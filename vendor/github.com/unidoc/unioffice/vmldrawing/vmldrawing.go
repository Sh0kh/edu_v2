//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package vmldrawing ;import (_a "encoding/xml";_b "fmt";_egg "github.com/unidoc/unioffice";_ag "github.com/unidoc/unioffice/common/logger";_d "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_g "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/office/excel";
_ae "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_eg "strconv";_c "strings";);

// FontFamily returns fontFamily of the text.
func (_dcba *TextpathStyle )FontFamily ()string {return _dcba ._aaf };

// Left get left attribute of shape style.
func (_aee *ShapeStyle )Left ()float64 {return _aee ._ge };

// SetWidth set width of shape.
func (_abgc *ShapeStyle )SetWidth (width float64 ){_abgc ._eef =width };

// Width return width of shape.
func (_bg *ShapeStyle )Width ()float64 {return _bg ._eef };const (ShapeStylePositionAbsolute ="\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065";ShapeStylePositionRelative ="\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065";);

// ToString generate string of TextpathStyle.
func (_egge *TextpathStyle )String ()string {_bbb :="";_bbb +=_b .Sprintf ("\u0066o\u006et\u002d\u0066\u0061\u006d\u0069\u006c\u0079\u003a\u0025\u0073\u003b",_egge ._aaf );_bbb +=_b .Sprintf ("\u0066o\u006et\u002d\u0073\u0069\u007a\u0065\u003a\u0025\u0064\u0070\u0074\u003b",_egge ._dcb );
if _egge ._ga {_bbb +=_b .Sprintf ("\u0066o\u006et\u002d\u0073\u0074\u0079\u006ce\u003a\u0069t\u0061\u006c\u0069\u0063\u003b");};if _egge ._cdb {_bbb +=_b .Sprintf ("\u0066\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003ab\u006f\u006c\u0064\u003b");
};return _bbb ;};func (_be *Container )MarshalXML (e *_a .Encoder ,start _a .StartElement )error {start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0076"},Value :"\u0075\u0072n\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d:v\u006d\u006c"});
start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u006f"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006di\u0063\u0072\u006f\u0073\u006f\u0066t\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u006ff\u0066\u0069\u0063\u0065"});
start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006fm\u003a\u006f\u0066\u0066\u0069c\u0065\u003ae\u0078\u0063\u0065\u006c"});
start .Name .Local ="\u0078\u006d\u006c";e .EncodeToken (start );if _be .Layout !=nil {_de :=_a .StartElement {Name :_a .Name {Local :"\u006f\u003a\u0073\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074"}};e .EncodeElement (_be .Layout ,_de );
};if _be .ShapeType !=nil {_deb :=_a .StartElement {Name :_a .Name {Local :"v\u003a\u0073\u0068\u0061\u0070\u0065\u0074\u0079\u0070\u0065"}};e .EncodeElement (_be .ShapeType ,_deb );};for _ ,_aeg :=range _be .Shape {_dd :=_a .StartElement {Name :_a .Name {Local :"\u0076:\u0073\u0068\u0061\u0070\u0065"}};
e .EncodeElement (_aeg ,_dd );};return e .EncodeToken (_a .EndElement {Name :start .Name });};

// Top get top attribute of shape style.
func (_eefc *ShapeStyle )Top ()float64 {return _eefc ._bbe };

// SetFontSize sets text's fontSize.
func (_ddg *TextpathStyle )SetFontSize (fontSize int64 ){_ddg ._dcb =fontSize };

// ToString formatting ShapeStyle to string.
func (_bacg *ShapeStyle )String ()string {_fga :="";_fga +=_b .Sprintf ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0025\u0073\u003b",_bacg ._bf );_fga +=_b .Sprintf ("\u006da\u0072g\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0025\u0064\u003b",int64 (_bacg ._ccg ));
_fga +=_b .Sprintf ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006fp\u003a\u0025\u0064\u003b",int64 (_bacg ._gd ));_fga +=_b .Sprintf ("w\u0069\u0064\u0074\u0068\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_bacg ._eef ));_fga +=_b .Sprintf ("\u0068\u0065\u0069g\u0068\u0074\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_bacg ._dbe ));
_fga +=_b .Sprintf ("z\u002d\u0069\u006e\u0064\u0065\u0078\u003a\u0025\u0064\u003b",_bacg ._cde );_fga +=_b .Sprintf ("m\u0073\u006f\u002d\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069z\u006f\u006e\u0074a\u006c:\u0025\u0073\u003b",_bacg ._dae );
_fga +=_b .Sprintf ("\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-ho\u0072iz\u006f\u006e\u0074\u0061\u006c\u002d\u0072el\u0061\u0074\u0069\u0076\u0065\u003a\u0025s\u003b",_bacg ._fba );_fga +=_b .Sprintf ("\u006ds\u006f\u002d\u0070\u006fs\u0069\u0074\u0069\u006f\u006e-\u0076e\u0072t\u0069\u0063\u0061\u006c\u003a\u0025\u0073;",_bacg ._fbb );
_fga +=_b .Sprintf ("\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076e\u0072t\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065\u003a\u0025\u0073\u003b",_bacg ._fdd );return _fga ;};func NewContainer ()*Container {return &Container {}};


// TextpathStyle is style attribute of element v:textpath.
type TextpathStyle struct{_aaf string ;_dcb int64 ;_cdb bool ;_ga bool ;};

// SetBold sets text to bold.
func (_eggg *TextpathStyle )SetBold (bold bool ){_eggg ._cdb =bold };

// NewTextpathStyle accept value of string style attribute of element v:textpath and format it to generate TextpathStyle.
func NewTextpathStyle (style string )TextpathStyle {_ac :=TextpathStyle {_aaf :"\u0022C\u0061\u006c\u0069\u0062\u0072\u0069\"",_dcb :44,_cdb :false ,_ga :false };_eb :=_c .Split (style ,"\u003b");for _ ,_dg :=range _eb {_fgd :=_c .Split (_dg ,"\u003a");
if len (_fgd )!=2{continue ;};switch _fgd [0]{case "f\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069\u006c\u0079":_ac ._aaf =_fgd [1];break ;case "\u0066o\u006e\u0074\u002d\u0073\u0069\u007ae":_ac ._dcb ,_ =_eg .ParseInt (_c .ReplaceAll (_fgd [1],"\u0070\u0074",""),10,64);
break ;case "f\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074":_ac ._cdb =_fgd [1]=="\u0062\u006f\u006c\u0064";break ;case "\u0066\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065":_ac ._ga =_fgd [1]=="\u0069\u0074\u0061\u006c\u0069\u0063";
break ;};};return _ac ;};

// Bottom get bottom attribute of shape style.
func (_bfd *ShapeStyle )Bottom ()float64 {return _bfd ._fbd };

// CreateFormula creates F element for typeFormulas.
func CreateFormula (s string )*_ae .CT_F {_bgf :=_ae .NewCT_F ();_bgf .EqnAttr =&s ;return _bgf };func (_ee *Container )UnmarshalXML (d *_a .Decoder ,start _a .StartElement )error {_ee .Shape =nil ;_db :for {_ba ,_cc :=d .Token ();if _cc !=nil {return _cc ;
};switch _cbg :=_ba .(type ){case _a .StartElement :switch _cbg .Name .Local {case "s\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074":_ee .Layout =_ae .NewOfcShapelayout ();if _gb :=d .DecodeElement (_ee .Layout ,&_cbg );_gb !=nil {return _gb ;
};case "\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e":_ee .ShapeType =_ae .NewShapetype ();if _fb :=d .DecodeElement (_ee .ShapeType ,&_cbg );_fb !=nil {return _fb ;};case "\u0073\u0068\u0061p\u0065":_ab :=_ae .NewShape ();if _dab :=d .DecodeElement (_ab ,&_cbg );
_dab !=nil {return _dab ;};_ee .Shape =append (_ee .Shape ,_ab );};case _a .EndElement :break _db ;};};return nil ;};

// Margins get margin top, left, bottom, and right of shape style.
func (_eefd *ShapeStyle )Margins ()(float64 ,float64 ,float64 ,float64 ){return _eefd ._gd ,_eefd ._ccg ,_eefd ._aec ,_eefd ._bb ;};

// NewShapeStyle accept value of string style attribute in v:shape and format it to generate ShapeStyle.
func NewShapeStyle (style string )ShapeStyle {_ddd :=ShapeStyle {_eef :0,_dbe :0};_fg :=_c .Split (style ,"\u003b");for _ ,_ff :=range _fg {_gde :=_c .Split (_ff ,"\u003a");if len (_gde )!=2{continue ;};var _abg error ;switch _gde [0]{case "\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e":_ddd ._bf =_gde [1];
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070":_ddd ._gd ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);break ;case "m\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074":_ddd ._ccg ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0062\u006f\u0074\u0074\u006f\u006d":_ddd ._aec ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);break ;case "\u006d\u0061\u0072g\u0069\u006e\u002d\u0072\u0069\u0067\u0068\u0074":_ddd ._bb ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);
break ;case "\u0074\u006f\u0070":_ddd ._bbe ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);break ;case "\u006c\u0065\u0066\u0074":_ddd ._ge ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);break ;case "\u0062\u006f\u0074\u0074\u006f\u006d":_ddd ._fbd ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);
break ;case "\u0072\u0069\u0067h\u0074":_ddd ._ccgc ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);break ;case "\u0077\u0069\u0064t\u0068":_ddd ._eef ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);break ;
case "\u0068\u0065\u0069\u0067\u0068\u0074":_ddd ._dbe ,_abg =_eg .ParseFloat (_c .ReplaceAll (_gde [1],"\u0070\u0074",""),64);break ;case "\u007a-\u0069\u006e\u0064\u0065\u0078":_ddd ._cde ,_abg =_eg .ParseInt (_gde [1],10,64);break ;case "\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c":_ddd ._dae =_gde [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006fr\u0069z\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_ddd ._fba =_gde [1];break ;case "m\u0073\u006f\u002d\u0070os\u0069t\u0069\u006f\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c":_ddd ._fbb =_gde [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e\u002d\u0076\u0065\u0072\u0074\u0069c\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_ddd ._fdd =_gde [1];break ;};if _abg !=nil {_ag .Log .Debug ("\u0055n\u0061\u0062l\u0065\u0020\u0074o\u0020\u0070\u0061\u0072\u0073\u0065\u0020s\u0074\u0079\u006c\u0065\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u003a\u0020\u0025\u0073 \u0076\u0061\u006c\u0075\u0065\u003a\u0020\u0025\u0076",_gde [0],_gde [1]);
};};return _ddd ;};

// NewCommentDrawing constructs a new comment drawing.
func NewCommentDrawing ()*Container {_cd :=NewContainer ();_cd .Layout =_ae .NewOfcShapelayout ();_cd .Layout .ExtAttr =_ae .ST_ExtEdit ;_cd .Layout .Idmap =_ae .NewOfcCT_IdMap ();_cd .Layout .Idmap .DataAttr =_egg .String ("\u0031");_cd .Layout .Idmap .ExtAttr =_ae .ST_ExtEdit ;
_cd .ShapeType =_ae .NewShapetype ();_cd .ShapeType .IdAttr =_egg .String ("_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");_cd .ShapeType .CoordsizeAttr =_egg .String ("2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030");_cd .ShapeType .SptAttr =_egg .Float32 (202);
_cd .ShapeType .PathAttr =_egg .String ("\u006d\u0030\u002c0l\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u00321\u00360\u0030,\u00321\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u0030\u0078\u0065");_gf :=_ae .NewEG_ShapeElements ();
_cd .ShapeType .EG_ShapeElements =append (_cd .ShapeType .EG_ShapeElements ,_gf );_gf .Path =_ae .NewPath ();_gf .Path .GradientshapeokAttr =_d .ST_TrueFalseT ;_gf .Path .ConnecttypeAttr =_ae .OfcST_ConnectTypeRect ;return _cd ;};

// MSOPositionHorizontalRelative get `mso-position-horizontal-relative` attribute of shape style.
func (_fbba *ShapeStyle )MSOPositionHorizontalRelative ()string {return _fbba ._fba };

// ShapeStyle is style attribute of v:shape element.
type ShapeStyle struct{_bf string ;_gd float64 ;_ccg float64 ;_aec float64 ;_bb float64 ;_bbe float64 ;_ge float64 ;_fbd float64 ;_ccgc float64 ;_eef float64 ;_dbe float64 ;_cde int64 ;_dae string ;_fba string ;_fbb string ;_fdd string ;};

// NewCommentShape creates a new comment shape for a given cell index.  The
// indices here are zero based.
func NewCommentShape (col ,row int64 )*_ae .Shape {_da :=_ae .NewShape ();_da .IdAttr =_egg .String (_b .Sprintf ("\u0063\u0073\u005f\u0025\u0064\u005f\u0025\u0064",col ,row ));_da .TypeAttr =_egg .String ("\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");
_da .StyleAttr =_egg .String ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006cu\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074:\u0038\u0030\u0070\u0074;\u006d\u0061\u0072\u0067\u0069n-\u0074o\u0070\u003a\u0032pt\u003b\u0077\u0069\u0064\u0074\u0068\u003a1\u0030\u0034\u0070\u0074\u003b\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0037\u0036\u0070\u0074\u003b\u007a\u002d\u0069\u006e\u0064\u0065x\u003a\u0031\u003bv\u0069\u0073\u0069\u0062\u0069\u006c\u0069t\u0079\u003a\u0068\u0069\u0064\u0064\u0065\u006e");
_da .FillcolorAttr =_egg .String ("\u0023f\u0062\u0066\u0036\u0064\u0036");_da .StrokecolorAttr =_egg .String ("\u0023e\u0064\u0065\u0061\u0061\u0031");_aa :=_ae .NewEG_ShapeElements ();_aa .Fill =_ae .NewFill ();_aa .Fill .Color2Attr =_egg .String ("\u0023f\u0062\u0066\u0065\u0038\u0032");
_aa .Fill .AngleAttr =_egg .Float64 (-180);_aa .Fill .TypeAttr =_ae .ST_FillTypeGradient ;_aa .Fill .Fill =_ae .NewOfcFill ();_aa .Fill .Fill .ExtAttr =_ae .ST_ExtView ;_aa .Fill .Fill .TypeAttr =_ae .OfcST_FillTypeGradientUnscaled ;_da .EG_ShapeElements =append (_da .EG_ShapeElements ,_aa );
_f :=_ae .NewEG_ShapeElements ();_f .Shadow =_ae .NewShadow ();_f .Shadow .OnAttr =_d .ST_TrueFalseT ;_f .Shadow .ObscuredAttr =_d .ST_TrueFalseT ;_da .EG_ShapeElements =append (_da .EG_ShapeElements ,_f );_ad :=_ae .NewEG_ShapeElements ();_ad .Path =_ae .NewPath ();
_ad .Path .ConnecttypeAttr =_ae .OfcST_ConnectTypeNone ;_da .EG_ShapeElements =append (_da .EG_ShapeElements ,_ad );_df :=_ae .NewEG_ShapeElements ();_df .Textbox =_ae .NewTextbox ();_df .Textbox .StyleAttr =_egg .String ("\u006d\u0073\u006f\u002ddi\u0072\u0065\u0063\u0074\u0069\u006f\u006e\u002d\u0061\u006c\u0074\u003a\u0061\u0075t\u006f");
_da .EG_ShapeElements =append (_da .EG_ShapeElements ,_df );_cb :=_ae .NewEG_ShapeElements ();_cb .ClientData =_g .NewClientData ();_cb .ClientData .ObjectTypeAttr =_g .ST_ObjectTypeNote ;_cb .ClientData .MoveWithCells =_d .ST_TrueFalseBlankT ;_cb .ClientData .SizeWithCells =_d .ST_TrueFalseBlankT ;
_cb .ClientData .Anchor =_egg .String ("\u0031,\u0020\u0031\u0035\u002c\u0020\u0030\u002c\u0020\u0032\u002c\u00202\u002c\u0020\u0035\u0034\u002c\u0020\u0035\u002c\u0020\u0033");_cb .ClientData .AutoFill =_d .ST_TrueFalseBlankFalse ;_cb .ClientData .Row =_egg .Int64 (row );
_cb .ClientData .Column =_egg .Int64 (col );_da .EG_ShapeElements =append (_da .EG_ShapeElements ,_cb );return _da ;};

// FontSize returns fontSize of the text.
func (_dec *TextpathStyle )FontSize ()int64 {return _dec ._dcb };

// SetFontFamily sets text's fontFamily.
func (_af *TextpathStyle )SetFontFamily (fontFamily string ){_af ._aaf =fontFamily };

// Position get position attribute of shape style.
func (_fddg *ShapeStyle )Position ()string {return _fddg ._bf };

// Right get right attribute of shape style.
func (_bgg *ShapeStyle )Right ()float64 {return _bgg ._ccgc };

// Height return height of shape.
func (_gbf *ShapeStyle )Height ()float64 {return _gbf ._dbe };

// SetItalic sets text to italic.
func (_gfc *TextpathStyle )SetItalic (italic bool ){_gfc ._ga =italic };

// IsItalic returns true if text is italic.
func (_ddge *TextpathStyle )IsItalic ()bool {return _ddge ._ga };

// SetHeight set height of shape.
func (_dc *ShapeStyle )SetHeight (height float64 ){_dc ._dbe =height };

// IsBold returns true if text is bold.
func (_gc *TextpathStyle )IsBold ()bool {return _gc ._cdb };type Container struct{Layout *_ae .OfcShapelayout ;ShapeType *_ae .Shapetype ;Shape []*_ae .Shape ;};

// MSOPositionVerticalRelative get `mso-position-vertical-relative` attribute of shape style.
func (_bac *ShapeStyle )MSOPositionVerticalRelative ()string {return _bac ._fdd };