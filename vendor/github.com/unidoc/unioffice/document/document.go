//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*
Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_bec "archive/zip";_g "bytes";_fg "errors";_aa "fmt";_ea "github.com/unidoc/unioffice";_ec "github.com/unidoc/unioffice/color";_cc "github.com/unidoc/unioffice/common";_fe "github.com/unidoc/unioffice/common/axcontrol";_gc "github.com/unidoc/unioffice/common/logger";
_ead "github.com/unidoc/unioffice/common/tempstorage";_cg "github.com/unidoc/unioffice/internal/formatutils";_fgd "github.com/unidoc/unioffice/internal/license";_fd "github.com/unidoc/unioffice/measurement";_bg "github.com/unidoc/unioffice/schema/schemas.microsoft.com/office/activeX";
_ee "github.com/unidoc/unioffice/schema/soo/dml";_ca "github.com/unidoc/unioffice/schema/soo/dml/chart";_ac "github.com/unidoc/unioffice/schema/soo/dml/picture";_cge "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_gca "github.com/unidoc/unioffice/schema/soo/pkg/relationships";
_eg "github.com/unidoc/unioffice/schema/soo/wml";_af "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_gf "github.com/unidoc/unioffice/vmldrawing";_dg "github.com/unidoc/unioffice/zippkg";_be "image";_dd "image/jpeg";_dfe "io";_c "math/rand";
_a "os";_b "path/filepath";_f "regexp";_df "strings";_d "unicode";);

// Paragraphs returns the paragraphs defined in a footer.
func (_eggaf Footer )Paragraphs ()[]Paragraph {_aagcd :=[]Paragraph {};for _ ,_dadc :=range _eggaf ._agef .EG_ContentBlockContent {for _ ,_befe :=range _dadc .P {_aagcd =append (_aagcd ,Paragraph {_eggaf ._fdfe ,_befe });};};for _ ,_egca :=range _eggaf .Tables (){for _ ,_geace :=range _egca .Rows (){for _ ,_cdcd :=range _geace .Cells (){_aagcd =append (_aagcd ,_cdcd .Paragraphs ()...);
};};};return _aagcd ;};

// SetWidth sets the table with to a specified width.
func (_cgcfg TableProperties )SetWidth (d _fd .Distance ){_cgcfg ._dbba .TblW =_eg .NewCT_TblWidth ();_cgcfg ._dbba .TblW .TypeAttr =_eg .ST_TblWidthDxa ;_cgcfg ._dbba .TblW .WAttr =&_eg .ST_MeasurementOrPercent {};_cgcfg ._dbba .TblW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};
_cgcfg ._dbba .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (d /_fd .Twips ));};

// SetAfterLineSpacing sets spacing below paragraph in line units.
func (_ffee Paragraph )SetAfterLineSpacing (d _fd .Distance ){_ffee .ensurePPr ();if _ffee ._dgfaed .PPr .Spacing ==nil {_ffee ._dgfaed .PPr .Spacing =_eg .NewCT_Spacing ();};_ecfg :=_ffee ._dgfaed .PPr .Spacing ;_ecfg .AfterLinesAttr =_ea .Int64 (int64 (d /_fd .Twips ));
};

// Text returns text from the document as one string separated with line breaks.
func (_cega *DocText )Text ()string {_efdec :=_g .NewBuffer ([]byte {});for _ ,_ddca :=range _cega .Items {if _ddca .Text !=""{_efdec .WriteString (_ddca .Text );_efdec .WriteString ("\u000a");};};return _efdec .String ();};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_bbfa Paragraph )SetStyle (s string ){_bbfa .ensurePPr ();if s ==""{_bbfa ._dgfaed .PPr .PStyle =nil ;}else {_bbfa ._dgfaed .PPr .PStyle =_eg .NewCT_String ();_bbfa ._dgfaed .PPr .PStyle .ValAttr =s ;};};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_dcda RunProperties )CharacterSpacingValue ()int64 {if _adfc :=_dcda ._afgg .Spacing ;_adfc !=nil {_befge :=_adfc .ValAttr ;if _befge .Int64 !=nil {return *_befge .Int64 ;};};return int64 (0);};

// Margins allows controlling individual cell margins.
func (_ecg CellProperties )Margins ()CellMargins {if _ecg ._eed .TcMar ==nil {_ecg ._eed .TcMar =_eg .NewCT_TcMar ();};return CellMargins {_ecg ._eed .TcMar };};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_aed AnchoredDrawing )SetOffset (x ,y _fd .Distance ){_aed .SetXOffset (x );_aed .SetYOffset (y )};

// Header is a header for a document section.
type Header struct{_acdg *Document ;_cceb *_eg .Hdr ;};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_ece *Document )Endnote (id int64 )Endnote {for _ ,_caee :=range _ece .Endnotes (){if _caee .id ()==id {return _caee ;};};return Endnote {};};

// Text return node and its child text,
func (_ddec *Node )Text ()string {_aebb :=_g .NewBuffer ([]byte {});switch _eeca :=_ddec .X ().(type ){case *Paragraph :for _ ,_bcce :=range _eeca .Runs (){if _bcce .Text ()!=""{_aebb .WriteString (_bcce .Text ());_aebb .WriteString ("\u000a");};};};for _ ,_ebge :=range _ddec .Children {_aebb .WriteString (_ebge .Text ());
};return _aebb .String ();};

// SetText sets the watermark text.
func (_bebbb *WatermarkText )SetText (text string ){_fgff :=_bebbb .getShape ();if _bebbb ._gdegag !=nil {_bafae :=_bebbb ._gdegag .EG_ShapeElements ;if len (_bafae )> 0&&_bafae [0].Textpath !=nil {_bafae [0].Textpath .StringAttr =&text ;};}else {_eaaab :=_bebbb .findNode (_fgff ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");
for _deace ,_aacg :=range _eaaab .Attrs {if _aacg .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{_eaaab .Attrs [_deace ].Value =text ;};};};};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_cagfa Run )AddDrawingAnchored (img _cc .ImageRef )(AnchoredDrawing ,error ){_dggef :=_cagfa .newIC ();_dggef .Drawing =_eg .NewCT_Drawing ();_bbfgd :=_eg .NewWdAnchor ();_aadg :=AnchoredDrawing {_cagfa ._caecc ,_bbfgd };_bbfgd .SimplePosAttr =_ea .Bool (false );
_bbfgd .AllowOverlapAttr =true ;_bbfgd .CNvGraphicFramePr =_ee .NewCT_NonVisualGraphicFrameProperties ();_dggef .Drawing .Anchor =append (_dggef .Drawing .Anchor ,_bbfgd );_bbfgd .Graphic =_ee .NewGraphic ();_bbfgd .Graphic .GraphicData =_ee .NewCT_GraphicalObjectData ();
_bbfgd .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_bbfgd .SimplePos .XAttr .ST_CoordinateUnqualified =_ea .Int64 (0);_bbfgd .SimplePos .YAttr .ST_CoordinateUnqualified =_ea .Int64 (0);_bbfgd .PositionH .RelativeFromAttr =_eg .WdST_RelFromHPage ;_bbfgd .PositionH .Choice =&_eg .WdCT_PosHChoice {};_bbfgd .PositionH .Choice .PosOffset =_ea .Int32 (0);
_bbfgd .PositionV .RelativeFromAttr =_eg .WdST_RelFromVPage ;_bbfgd .PositionV .Choice =&_eg .WdCT_PosVChoice {};_bbfgd .PositionV .Choice .PosOffset =_ea .Int32 (0);_bbfgd .Extent .CxAttr =int64 (float64 (img .Size ().X *_fd .Pixel72 )/_fd .EMU );_bbfgd .Extent .CyAttr =int64 (float64 (img .Size ().Y *_fd .Pixel72 )/_fd .EMU );
_bbfgd .Choice =&_eg .WdEG_WrapTypeChoice {};_bbfgd .Choice .WrapSquare =_eg .NewWdCT_WrapSquare ();_bbfgd .Choice .WrapSquare .WrapTextAttr =_eg .WdST_WrapTextBothSides ;_cdbac :=0x7FFFFFFF&_c .Uint32 ();_bbfgd .DocPr .IdAttr =_cdbac ;_dfef :=_ac .NewPic ();
_dfef .NvPicPr .CNvPr .IdAttr =_cdbac ;_bbgg :=img .RelID ();if _bbgg ==""{return _aadg ,_fg .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_bbfgd .Graphic .GraphicData .Any =append (_bbfgd .Graphic .GraphicData .Any ,_dfef );_dfef .BlipFill =_ee .NewCT_BlipFillProperties ();_dfef .BlipFill .Blip =_ee .NewCT_Blip ();_dfef .BlipFill .Blip .EmbedAttr =&_bbgg ;_dfef .BlipFill .Stretch =_ee .NewCT_StretchInfoProperties ();
_dfef .BlipFill .Stretch .FillRect =_ee .NewCT_RelativeRect ();_dfef .SpPr =_ee .NewCT_ShapeProperties ();_dfef .SpPr .Xfrm =_ee .NewCT_Transform2D ();_dfef .SpPr .Xfrm .Off =_ee .NewCT_Point2D ();_dfef .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_ea .Int64 (0);
_dfef .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_ea .Int64 (0);_dfef .SpPr .Xfrm .Ext =_ee .NewCT_PositiveSize2D ();_dfef .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_fd .Point );_dfef .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_fd .Point );
_dfef .SpPr .PrstGeom =_ee .NewCT_PresetGeometry2D ();_dfef .SpPr .PrstGeom .PrstAttr =_ee .ST_ShapeTypeRect ;return _aadg ,nil ;};

// read reads a document from an io.Reader.
func Read (r _dfe .ReaderAt ,size int64 )(*Document ,error ){return _efa (r ,size ,"")};

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// document.
func (_ffac *Document )GetChartSpaceByRelId (relId string )*_ca .ChartSpace {_fafgc :=_ffac ._fbg .GetTargetByRelId (relId );for _ ,_bacb :=range _ffac ._edb {if _fafgc ==_bacb .Target (){return _bacb ._dgee ;};};return nil ;};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_gbb *Document ;_cb *_eg .CT_Tc ;};

// FindNodeByText return node based on matched text and return a slice of node.
func (_gfdf *Nodes )FindNodeByText (text string )[]Node {_acceb :=[]Node {};for _ ,_cbbee :=range _gfdf ._gbeg {if _df .TrimSpace (_cbbee .Text ())==text {_acceb =append (_acceb ,_cbbee );};_afga :=Nodes {_gbeg :_cbbee .Children };_acceb =append (_acceb ,_afga .FindNodeByText (text )...);
};return _acceb ;};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_bgga *_eg .CT_PPrGeneral };

// AnchorDrawWrapOptions is options to set
// wrapPolygon for wrap text through and tight.
type AnchorDrawWrapOptions struct{_bf bool ;_cca *_ee .CT_Point2D ;_gcb []*_ee .CT_Point2D ;};

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_eg .CT_P ;Hyperlink *_eg .CT_Hyperlink ;Run *_eg .CT_R ;TableInfo *TableInfo ;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_acbeg Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_acbeg .ensurePPr ();if _acbeg ._dgfaed .PPr .NumPr ==nil {_acbeg ._dgfaed .PPr .NumPr =_eg .NewCT_NumPr ();};_fabf :=_eg .NewCT_DecimalNumber ();_fabf .ValAttr =int64 (abstractNumberID );
_acbeg ._dgfaed .PPr .NumPr .NumId =_fabf ;};func _cfgb ()*_af .Formulas {_bedbb :=_af .NewFormulas ();_bedbb .F =[]*_af .CT_F {_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0023\u0030\u0020\u0030\u00201\u0030\u0038\u0030\u0030"),_gf .CreateFormula ("p\u0072\u006f\u0064\u0020\u0023\u0030\u0020\u0032\u0020\u0031"),_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0031"),_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0032"),_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0033"),_gf .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0033\u0020\u0030"),_gf .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0032\u0031\u00360\u0030\u0020\u0040\u0031"),_gf .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0030\u0020\u0040\u0032"),_gf .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0034\u00202\u0031\u0036\u0030\u0030"),_gf .CreateFormula ("\u006di\u0064\u0020\u0040\u0035\u0020\u00406"),_gf .CreateFormula ("\u006di\u0064\u0020\u0040\u0038\u0020\u00405"),_gf .CreateFormula ("\u006di\u0064\u0020\u0040\u0037\u0020\u00408"),_gf .CreateFormula ("\u006di\u0064\u0020\u0040\u0036\u0020\u00407"),_gf .CreateFormula ("s\u0075\u006d\u0020\u0040\u0036\u0020\u0030\u0020\u0040\u0035")};
return _bedbb ;};

// SetEnabled marks a FormField as enabled or disabled.
func (_agdb FormField )SetEnabled (enabled bool ){_facaa :=_eg .NewCT_OnOff ();_facaa .ValAttr =&_cge .ST_OnOff {Bool :&enabled };_agdb ._dceed .Enabled =[]*_eg .CT_OnOff {_facaa };};

// Bookmarks returns all of the bookmarks defined in the document.
func (_facg Document )Bookmarks ()[]Bookmark {if _facg ._fdg .Body ==nil {return nil ;};_ffe :=[]Bookmark {};for _ ,_cddd :=range _facg ._fdg .Body .EG_BlockLevelElts {for _ ,_bdgf :=range _cddd .EG_ContentBlockContent {for _ ,_gaac :=range _fcgd (_bdgf ){_ffe =append (_ffe ,_gaac );
};};};return _ffe ;};type chart struct{_dgee *_ca .ChartSpace ;_ecb string ;_efb string ;};

// SetTextWrapInFrontOfText sets the text wrap to in front of text.
func (_geg AnchoredDrawing )SetTextWrapInFrontOfText (){_geg ._fdd .Choice =&_eg .WdEG_WrapTypeChoice {};_geg ._fdd .Choice .WrapNone =_eg .NewWdCT_WrapNone ();_geg ._fdd .BehindDocAttr =false ;_geg ._fdd .LayoutInCellAttr =true ;_geg ._fdd .AllowOverlapAttr =true ;
};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_ge AnchoredDrawing )SetName (name string ){_ge ._fdd .DocPr .NameAttr =name ;for _ ,_ae :=range _ge ._fdd .Graphic .GraphicData .Any {if _ccb ,_fef :=_ae .(*_ac .Pic );_fef {_ccb .NvPicPr .CNvPr .DescrAttr =_ea .String (name );};};};

// SetSmallCaps sets the run to small caps.
func (_dadbe RunProperties )SetSmallCaps (b bool ){if !b {_dadbe ._afgg .SmallCaps =nil ;}else {_dadbe ._afgg .SmallCaps =_eg .NewCT_OnOff ();};};func (_ecec Paragraph )addFldCharsForField (_adbb ,_dfbcf string )FormField {_adfg :=_ecec .addBeginFldChar (_adbb );
_gaef :=FormField {_dceed :_adfg };_acac :=_ecec ._acbbe .Bookmarks ();_gdeda :=int64 (len (_acac ));if _adbb !=""{_ecec .addStartBookmark (_gdeda ,_adbb );};_ecec .addInstrText (_dfbcf );_ecec .addSeparateFldChar ();if _dfbcf =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_gcaec :=_ecec .AddRun ();
_ggdd :=_eg .NewEG_RunInnerContent ();_gcaec ._fdae .EG_RunInnerContent =[]*_eg .EG_RunInnerContent {_ggdd };_gaef ._dbede =_ggdd ;};_ecec .addEndFldChar ();if _adbb !=""{_ecec .addEndBookmark (_gdeda );};return _gaef ;};

// SetSize sets the font size for a run.
func (_bddcg RunProperties )SetSize (size _fd .Distance ){_bddcg ._afgg .Sz =_eg .NewCT_HpsMeasure ();_bddcg ._afgg .Sz .ValAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (size /_fd .HalfPoint ));_bddcg ._afgg .SzCs =_eg .NewCT_HpsMeasure ();_bddcg ._afgg .SzCs .ValAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (size /_fd .HalfPoint ));
};

// X returns the inner wrapped XML type.
func (_bacf Header )X ()*_eg .Hdr {return _bacf ._cceb };func (_dcfb *Document )appendParagraph (_dagd *Paragraph ,_bcbg Paragraph ,_edd bool )Paragraph {_fddc :=_eg .NewEG_BlockLevelElts ();_dcfb ._fdg .Body .EG_BlockLevelElts =append (_dcfb ._fdg .Body .EG_BlockLevelElts ,_fddc );
_dea :=_eg .NewEG_ContentBlockContent ();_fddc .EG_ContentBlockContent =append (_fddc .EG_ContentBlockContent ,_dea );if _dagd !=nil {_ebff :=_dagd .X ();for _ ,_ddfd :=range _dcfb ._fdg .Body .EG_BlockLevelElts {for _ ,_cbg :=range _ddfd .EG_ContentBlockContent {for _cebc ,_fdga :=range _cbg .P {if _fdga ==_ebff {_cbaf :=_bcbg .X ();
_cbg .P =append (_cbg .P ,nil );if _edd {copy (_cbg .P [_cebc +1:],_cbg .P [_cebc :]);_cbg .P [_cebc ]=_cbaf ;}else {copy (_cbg .P [_cebc +2:],_cbg .P [_cebc +1:]);_cbg .P [_cebc +1]=_cbaf ;};break ;};};for _ ,_bbf :=range _cbg .Tbl {for _ ,_cga :=range _bbf .EG_ContentRowContent {for _ ,_beac :=range _cga .Tr {for _ ,_bgbg :=range _beac .EG_ContentCellContent {for _ ,_dgc :=range _bgbg .Tc {for _ ,_acga :=range _dgc .EG_BlockLevelElts {for _ ,_ccdf :=range _acga .EG_ContentBlockContent {for _cebcg ,_bba :=range _ccdf .P {if _bba ==_ebff {_ffge :=_bcbg .X ();
_ccdf .P =append (_ccdf .P ,nil );if _edd {copy (_ccdf .P [_cebcg +1:],_ccdf .P [_cebcg :]);_ccdf .P [_cebcg ]=_ffge ;}else {copy (_ccdf .P [_cebcg +2:],_ccdf .P [_cebcg +1:]);_ccdf .P [_cebcg +1]=_ffge ;};break ;};};};};};};};};};if _cbg .Sdt !=nil &&_cbg .Sdt .SdtContent !=nil &&_cbg .Sdt .SdtContent .P !=nil {for _fbgb ,_gdbf :=range _cbg .Sdt .SdtContent .P {if _gdbf ==_ebff {_ffgeg :=_bcbg .X ();
_cbg .Sdt .SdtContent .P =append (_cbg .Sdt .SdtContent .P ,nil );if _edd {copy (_cbg .Sdt .SdtContent .P [_fbgb +1:],_cbg .Sdt .SdtContent .P [_fbgb :]);_cbg .Sdt .SdtContent .P [_fbgb ]=_ffgeg ;}else {copy (_cbg .Sdt .SdtContent .P [_fbgb +2:],_cbg .Sdt .SdtContent .P [_fbgb +1:]);
_cbg .Sdt .SdtContent .P [_fbgb +1]=_ffgeg ;};break ;};};};};};}else {_dea .P =append (_dea .P ,_bcbg .X ());};_becae :=_bcbg .Properties ();if _bcf ,_bgca :=_becae .Section ();_bgca {var (_bbcbe map[string ]string ;_eadd map[string ]string ;);_agg :=_bcf .X ().EG_HdrFtrReferences ;
for _ ,_cbafa :=range _agg {if _cbafa .HeaderReference !=nil {_bbcbe =map[string ]string {_cbafa .HeaderReference .IdAttr :_bcf ._bcbbe ._fbg .GetTargetByRelId (_cbafa .HeaderReference .IdAttr )};};if _cbafa .FooterReference !=nil {_eadd =map[string ]string {_cbafa .FooterReference .IdAttr :_bcf ._bcbbe ._fbg .GetTargetByRelId (_cbafa .FooterReference .IdAttr )};
};};var _eedg map[int ]_cc .ImageRef ;for _ ,_dee :=range _bcf ._bcbbe .Headers (){for _fba ,_cbag :=range _bbcbe {_ggf :=_aa .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_dee .Index ()+1));if _ggf ==_cbag {_dgef :=_aa .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_dee .Index ());
_dcfb ._bebe =append (_dcfb ._bebe ,_dee .X ());_edfd :=_dcfb ._fbg .AddRelationship (_dgef ,_ea .HeaderType );_edfd .SetID (_fba );_dcfb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_dgef ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_dcfb ._befc =append (_dcfb ._befc ,_cc .NewRelationships ());_fce :=_dee .Paragraphs ();for _ ,_afe :=range _fce {for _ ,_eaaa :=range _afe .Runs (){_gccd :=_eaaa .DrawingAnchored ();for _ ,_adb :=range _gccd {if _cdc ,_ebb :=_adb .GetImage ();_ebb {_eedg =map[int ]_cc .ImageRef {_dee .Index ():_cdc };
};};_ecac :=_eaaa .DrawingInline ();for _ ,_aca :=range _ecac {if _cbae ,_eaac :=_aca .GetImage ();_eaac {_eedg =map[int ]_cc .ImageRef {_dee .Index ():_cbae };};};};};};};};for _cafc ,_fgcb :=range _eedg {for _ ,_ccbg :=range _dcfb .Headers (){if (_ccbg .Index ()+1)==_cafc {_aaf ,_ecacd :=_cc .ImageFromFile (_fgcb .Path ());
if _ecacd !=nil {_gc .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_ecacd );};if _ ,_ecacd =_ccbg .AddImage (_aaf );_ecacd !=nil {_gc .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_ecacd );
};};for _ ,_bbdc :=range _ccbg .Paragraphs (){if _ddfb ,_fca :=_bcf ._bcbbe .Styles .SearchStyleById (_bbdc .Style ());_fca {if _ ,_bgba :=_dcfb .Styles .SearchStyleById (_bbdc .Style ());!_bgba {_dcfb .Styles .InsertStyle (_ddfb );};};};};};var _bfcd map[int ]_cc .ImageRef ;
for _ ,_dfa :=range _bcf ._bcbbe .Footers (){for _abde ,_gcde :=range _eadd {_bfba :=_aa .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_dfa .Index ()+1));if _bfba ==_gcde {_bbad :=_aa .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_dfa .Index ());
_dcfb ._bfg =append (_dcfb ._bfg ,_dfa .X ());_dcga :=_dcfb ._fbg .AddRelationship (_bbad ,_ea .FooterType );_dcga .SetID (_abde );_dcfb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_bbad ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_dcfb ._fge =append (_dcfb ._fge ,_cc .NewRelationships ());_dfea :=_dfa .Paragraphs ();for _ ,_bdgc :=range _dfea {for _ ,_edfa :=range _bdgc .Runs (){_efdg :=_edfa .DrawingAnchored ();for _ ,_agfc :=range _efdg {if _dbee ,_eddg :=_agfc .GetImage ();_eddg {_bfcd =map[int ]_cc .ImageRef {_dfa .Index ():_dbee };
};};_cecg :=_edfa .DrawingInline ();for _ ,_febfc :=range _cecg {if _bge ,_aaa :=_febfc .GetImage ();_aaa {_bfcd =map[int ]_cc .ImageRef {_dfa .Index ():_bge };};};};};};};};for _becag ,_ddgc :=range _bfcd {for _ ,_bdgg :=range _dcfb .Footers (){if (_bdgg .Index ()+1)==_becag {_cff ,_bagg :=_cc .ImageFromFile (_ddgc .Path ());
if _bagg !=nil {_gc .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_bagg );};if _ ,_bagg =_bdgg .AddImage (_cff );_bagg !=nil {_gc .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_bagg );
};};for _ ,_egae :=range _bdgg .Paragraphs (){if _ffga ,_ecbg :=_bcf ._bcbbe .Styles .SearchStyleById (_egae .Style ());_ecbg {if _ ,_aggf :=_dcfb .Styles .SearchStyleById (_egae .Style ());!_aggf {_dcfb .Styles .InsertStyle (_ffga );};};};};};};_dec :=_bcbg .Numbering ();
_dcfb .Numbering ._bgfb .AbstractNum =append (_dcfb .Numbering ._bgfb .AbstractNum ,_dec ._bgfb .AbstractNum ...);_dcfb .Numbering ._bgfb .Num =append (_dcfb .Numbering ._bgfb .Num ,_dec ._bgfb .Num ...);return Paragraph {_dcfb ,_bcbg .X ()};};

// AddCell adds a cell to a row and returns it
func (_dfdg Row )AddCell ()Cell {_ccde :=_eg .NewEG_ContentCellContent ();_dfdg ._ffcff .EG_ContentCellContent =append (_dfdg ._ffcff .EG_ContentCellContent ,_ccde );_eeba :=_eg .NewCT_Tc ();_ccde .Tc =append (_ccde .Tc ,_eeba );return Cell {_dfdg ._cabca ,_eeba };
};

// Tables returns the tables defined in the footer.
func (_aebc Footer )Tables ()[]Table {_egcc :=[]Table {};if _aebc ._agef ==nil {return nil ;};for _ ,_fccf :=range _aebc ._agef .EG_ContentBlockContent {for _ ,_aecf :=range _aebc ._fdfe .tables (_fccf ){_egcc =append (_egcc ,_aecf );};};return _egcc ;
};

// TableProperties are the properties for a table within a document
type TableProperties struct{_dbba *_eg .CT_TblPr };

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_gbbaa ParagraphProperties )AddSection (t _eg .ST_SectionMark )Section {_gbbaa ._fbba .SectPr =_eg .NewCT_SectPr ();if t !=_eg .ST_SectionMarkUnset {_gbbaa ._fbba .SectPr .Type =_eg .NewCT_SectType ();_gbbaa ._fbba .SectPr .Type .ValAttr =t ;};return Section {_gbbaa ._aeeg ,_gbbaa ._fbba .SectPr };
};

// SetTopPct sets the cell top margin
func (_gcf CellMargins )SetTopPct (pct float64 ){_gcf ._gfba .Top =_eg .NewCT_TblWidth ();_fgc (_gcf ._gfba .Top ,pct );};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_bgfb *_eg .Numbering };

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_ffcda TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _ffcda ._adbbg .PPr ==nil {_ffcda ._adbbg .PPr =_eg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_ffcda ._adbbg .PPr };};

// X returns the internally wrapped *wml.CT_SectPr.
func (_efbe Section )X ()*_eg .CT_SectPr {return _efbe ._ccgbd };

// AddParagraph adds a paragraph to the endnote.
func (_gcggg Endnote )AddParagraph ()Paragraph {_egdbb :=_eg .NewEG_ContentBlockContent ();_eebec :=len (_gcggg ._edgd .EG_BlockLevelElts [0].EG_ContentBlockContent );_gcggg ._edgd .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_gcggg ._edgd .EG_BlockLevelElts [0].EG_ContentBlockContent ,_egdbb );
_dgcec :=_eg .NewCT_P ();var _fgfc *_eg .CT_String ;if _eebec !=0{_fgfcg :=len (_gcggg ._edgd .EG_BlockLevelElts [0].EG_ContentBlockContent [_eebec -1].P );_fgfc =_gcggg ._edgd .EG_BlockLevelElts [0].EG_ContentBlockContent [_eebec -1].P [_fgfcg -1].PPr .PStyle ;
}else {_fgfc =_eg .NewCT_String ();_fgfc .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_egdbb .P =append (_egdbb .P ,_dgcec );_deac :=Paragraph {_gcggg ._dfdf ,_dgcec };_deac ._dgfaed .PPr =_eg .NewCT_PPr ();_deac ._dgfaed .PPr .PStyle =_fgfc ;_deac ._dgfaed .PPr .RPr =_eg .NewCT_ParaRPr ();
return _deac ;};

// EastAsiaFont returns the name of run font family for East Asia.
func (_badf RunProperties )EastAsiaFont ()string {if _gfacad :=_badf ._afgg .RFonts ;_gfacad !=nil {if _gfacad .EastAsiaAttr !=nil {return *_gfacad .EastAsiaAttr ;};};return "";};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_cbfcb FormField )SetSize (size uint64 ){size *=2;if _cbfcb ._dceed .CheckBox !=nil {_cbfcb ._dceed .CheckBox .Choice =_eg .NewCT_FFCheckBoxChoice ();_cbfcb ._dceed .CheckBox .Choice .Size =_eg .NewCT_HpsMeasure ();_cbfcb ._dceed .CheckBox .Choice .Size .ValAttr =_eg .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };
};};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_acgad *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _acgad .insertParagraph (relativeTo ,false );};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_bgbdg ParagraphProperties )ComplexSizeMeasure ()string {if _dfcgb :=_bgbdg ._fbba .RPr .SzCs ;_dfcgb !=nil {_bfeea :=_dfcgb .ValAttr ;if _bfeea .ST_PositiveUniversalMeasure !=nil {return *_bfeea .ST_PositiveUniversalMeasure ;};};return "";};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_efdb *Document )Append (d1orig *Document )error {_eee ,_gcbbde :=d1orig .Copy ();if _gcbbde !=nil {return _gcbbde ;};_efdb .DocBase =_efdb .DocBase .Append (_eee .DocBase );if _eee ._fdg .ConformanceAttr !=_cge .ST_ConformanceClassStrict {_efdb ._fdg .ConformanceAttr =_eee ._fdg .ConformanceAttr ;
};_cbfg :=_efdb ._fbg .X ().Relationship ;_eaeb :=_eee ._fbg .X ().Relationship ;_gffg :=_eee ._fdg .Body ;_dgac :=map[string ]string {};_abaf :=map[int64 ]int64 {};_gcaff :=map[int64 ]int64 {};for _ ,_bgee :=range _eaeb {_ecef :=true ;_bbce :=_bgee .IdAttr ;
_gafdf :=_bgee .TargetAttr ;_fcgda :=_bgee .TypeAttr ;_bddd :=_fcgda ==_ea .ImageType ;_babb :=_fcgda ==_ea .HyperLinkType ;var _gedc string ;for _ ,_ecbe :=range _cbfg {if _ecbe .TypeAttr ==_fcgda &&_ecbe .TargetAttr ==_gafdf {_ecef =false ;_gedc =_ecbe .IdAttr ;
break ;};};if _bddd {_egga :="\u0077\u006f\u0072d\u002f"+_gafdf ;for _ ,_dbcf :=range _eee .DocBase .Images {if _dbcf .Target ()==_egga {_bage ,_cfe :=_cc .ImageFromStorage (_dbcf .Path ());if _cfe !=nil {return _cfe ;};_bbgb ,_cfe :=_efdb .AddImage (_bage );
if _cfe !=nil {return _cfe ;};_gedc =_bbgb .RelID ();break ;};};}else if _ecef {if _babb {_gbc :=_efdb ._fbg .AddHyperlink (_gafdf );_gedc =_cc .Relationship (_gbc ).ID ();}else {_gggg :=_efdb ._fbg .AddRelationship (_gafdf ,_fcgda );_gedc =_gggg .X ().IdAttr ;
};};if _bbce !=_gedc {_dgac [_bbce ]=_gedc ;};};if _gffg .SectPr !=nil {for _ ,_agee :=range _gffg .SectPr .EG_HdrFtrReferences {if _agee .HeaderReference !=nil {if _acag ,_eddf :=_dgac [_agee .HeaderReference .IdAttr ];_eddf {_agee .HeaderReference .IdAttr =_acag ;
_efdb ._befc =append (_efdb ._befc ,_cc .NewRelationships ());};}else if _agee .FooterReference !=nil {if _faca ,_gfe :=_dgac [_agee .FooterReference .IdAttr ];_gfe {_agee .FooterReference .IdAttr =_faca ;_efdb ._fge =append (_efdb ._fge ,_cc .NewRelationships ());
};};};};_bddf ,_cedef :=_efdb ._ccae ,_eee ._ccae ;if _bddf !=nil {if _cedef !=nil {if _bddf .Endnote !=nil {if _cedef .Endnote !=nil {_ffag :=int64 (len (_bddf .Endnote )+1);for _ ,_daag :=range _cedef .Endnote {_ffcf :=_daag .IdAttr ;if _ffcf > 0{_daag .IdAttr =_ffag ;
_bddf .Endnote =append (_bddf .Endnote ,_daag );_gcaff [_ffcf ]=_ffag ;_ffag ++;};};};}else {_bddf .Endnote =_cedef .Endnote ;};};}else if _cedef !=nil {_bddf =_cedef ;};_efdb ._ccae =_bddf ;_ccfga ,_cbdf :=_efdb ._dc ,_eee ._dc ;if _ccfga !=nil {if _cbdf !=nil {if _ccfga .Footnote !=nil {if _cbdf .Footnote !=nil {_gddc :=int64 (len (_ccfga .Footnote )+1);
for _ ,_dced :=range _cbdf .Footnote {_gfbae :=_dced .IdAttr ;if _gfbae > 0{_dced .IdAttr =_gddc ;_ccfga .Footnote =append (_ccfga .Footnote ,_dced );_abaf [_gfbae ]=_gddc ;_gddc ++;};};};}else {_ccfga .Footnote =_cbdf .Footnote ;};};}else if _cbdf !=nil {_ccfga =_cbdf ;
};_efdb ._dc =_ccfga ;for _ ,_aabf :=range _gffg .EG_BlockLevelElts {for _ ,_gbbfge :=range _aabf .EG_ContentBlockContent {for _ ,_afed :=range _gbbfge .P {_aeaf (_afed ,_dgac );_acab (_afed ,_dgac );_bfbea (_afed ,_abaf ,_gcaff );};for _ ,_cegfa :=range _gbbfge .Tbl {_aegd (_cegfa ,_dgac );
_bfbda (_cegfa ,_dgac );_abad (_cegfa ,_abaf ,_gcaff );};};};_efdb ._fdg .Body .EG_BlockLevelElts =append (_efdb ._fdg .Body .EG_BlockLevelElts ,_eee ._fdg .Body .EG_BlockLevelElts ...);if _efdb ._fdg .Body .SectPr ==nil {_efdb ._fdg .Body .SectPr =_eee ._fdg .Body .SectPr ;
}else {var _fbbb ,_ccgb bool ;for _ ,_gde :=range _efdb ._fdg .Body .SectPr .EG_HdrFtrReferences {if _gde .HeaderReference !=nil {_fbbb =true ;}else if _gde .FooterReference !=nil {_ccgb =true ;};};if !_fbbb {for _ ,_deea :=range _eee ._fdg .Body .SectPr .EG_HdrFtrReferences {if _deea .HeaderReference !=nil {_efdb ._fdg .Body .SectPr .EG_HdrFtrReferences =append (_efdb ._fdg .Body .SectPr .EG_HdrFtrReferences ,_deea );
break ;};};};if !_ccgb {for _ ,_bgag :=range _eee ._fdg .Body .SectPr .EG_HdrFtrReferences {if _bgag .FooterReference !=nil {_efdb ._fdg .Body .SectPr .EG_HdrFtrReferences =append (_efdb ._fdg .Body .SectPr .EG_HdrFtrReferences ,_bgag );break ;};};};if _efdb ._fdg .Body .SectPr .Cols ==nil &&_eee ._fdg .Body .SectPr .Cols !=nil {_efdb ._fdg .Body .SectPr .Cols =_eee ._fdg .Body .SectPr .Cols ;
};};_fbffg :=_efdb .Numbering ._bgfb ;_ddbg :=_eee .Numbering ._bgfb ;if _fbffg ==nil &&_ddbg !=nil {_fbffg =_ddbg ;};_efdb .Numbering ._bgfb =_fbffg ;if _efdb .Styles ._caeb ==nil &&_eee .Styles ._caeb !=nil {_efdb .Styles ._caeb =_eee .Styles ._caeb ;
};_efdb ._gg =append (_efdb ._gg ,_eee ._gg ...);_efdb ._cd =append (_efdb ._cd ,_eee ._cd ...);if len (_efdb ._bebe )==0{_efdb ._bebe =_eee ._bebe ;};if len (_efdb ._bfg )==0{_efdb ._bfg =_eee ._bfg ;};_egbf :=_efdb ._dbe ;_agd :=_eee ._dbe ;if _egbf !=nil {if _agd !=nil {if _egbf .Divs !=nil {if _agd .Divs !=nil {_egbf .Divs .Div =append (_egbf .Divs .Div ,_agd .Divs .Div ...);
};}else {_egbf .Divs =_agd .Divs ;};};_egbf .Frameset =nil ;}else if _agd !=nil {_egbf =_agd ;_egbf .Frameset =nil ;};_efdb ._dbe =_egbf ;_gbbc :=_efdb ._egd ;_cbaa :=_eee ._egd ;if _gbbc !=nil {if _cbaa !=nil {if _gbbc .Font !=nil {if _cbaa .Font !=nil {for _ ,_bbge :=range _cbaa .Font {_dcgg :=true ;
for _ ,_fgfa :=range _gbbc .Font {if _fgfa .NameAttr ==_bbge .NameAttr {_dcgg =false ;break ;};};if _dcgg {_gbbc .Font =append (_gbbc .Font ,_bbge );};};};}else {_gbbc .Font =_cbaa .Font ;};};}else if _cbaa !=nil {_gbbc =_cbaa ;};_efdb ._egd =_gbbc ;return nil ;
};func _ceff (_dcabg *_eg .CT_OnOff )OnOffValue {if _dcabg ==nil {return OnOffValueUnset ;};if _dcabg .ValAttr !=nil &&_dcabg .ValAttr .Bool !=nil &&*_dcabg .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_efbg Paragraph )InsertRunBefore (relativeTo Run )Run {return _efbg .insertRun (relativeTo ,true )};func _aegd (_bgadd *_eg .CT_Tbl ,_fcec map[string ]string ){for _ ,_bbecc :=range _bgadd .EG_ContentRowContent {for _ ,_eecb :=range _bbecc .Tr {for _ ,_acdd :=range _eecb .EG_ContentCellContent {for _ ,_edbd :=range _acdd .Tc {for _ ,_cfca :=range _edbd .EG_BlockLevelElts {for _ ,_dead :=range _cfca .EG_ContentBlockContent {for _ ,_abeed :=range _dead .P {_aeaf (_abeed ,_fcec );
};for _ ,_gdeg :=range _dead .Tbl {_aegd (_gdeg ,_fcec );};};};};};};};};

// SetSize sets the size of the displayed image on the page.
func (_gfbg InlineDrawing )SetSize (w ,h _fd .Distance ){_gfbg ._dbfag .Extent .CxAttr =int64 (float64 (w *_fd .Pixel72 )/_fd .EMU );_gfbg ._dbfag .Extent .CyAttr =int64 (float64 (h *_fd .Pixel72 )/_fd .EMU );};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_ddeg ParagraphProperties )SizeMeasure ()string {if _gbca :=_ddeg ._fbba .RPr .Sz ;_gbca !=nil {_cbcc :=_gbca .ValAttr ;if _cbcc .ST_PositiveUniversalMeasure !=nil {return *_cbcc .ST_PositiveUniversalMeasure ;};};return "";};

// SetRowBandSize sets the number of Rows in the row band
func (_edcg TableStyleProperties )SetRowBandSize (rows int64 ){_edcg ._deefc .TblStyleRowBandSize =_eg .NewCT_DecimalNumber ();_edcg ._deefc .TblStyleRowBandSize .ValAttr =rows ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_ffc CellBorders )SetRight (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_ffc ._ffb .Right =_eg .NewCT_Border ();_afec (_ffc ._ffb .Right ,t ,c ,thickness );};

// Numbering return numbering that being use by paragraph.
func (_dbgdg Paragraph )Numbering ()Numbering {_dbgdg .ensurePPr ();_afedg :=NewNumbering ();if _dbgdg ._dgfaed .PPr .NumPr !=nil {_edfcd :=int64 (-1);_cdaa :=int64 (-1);if _dbgdg ._dgfaed .PPr .NumPr .NumId !=nil {_edfcd =_dbgdg ._dgfaed .PPr .NumPr .NumId .ValAttr ;
};for _ ,_ecdb :=range _dbgdg ._acbbe .Numbering ._bgfb .Num {if _edfcd < 0{break ;};if _ecdb .NumIdAttr ==_edfcd {if _ecdb .AbstractNumId !=nil {_cdaa =_ecdb .AbstractNumId .ValAttr ;_afedg ._bgfb .Num =append (_afedg ._bgfb .Num ,_ecdb );break ;};};};
for _ ,_cgecg :=range _dbgdg ._acbbe .Numbering ._bgfb .AbstractNum {if _cdaa < 0{break ;};if _cgecg .AbstractNumIdAttr ==_cdaa {_afedg ._bgfb .AbstractNum =append (_afedg ._bgfb .AbstractNum ,_cgecg );break ;};};};return _afedg ;};

// Headers returns the headers defined in the document.
func (_ebc *Document )Headers ()[]Header {_dcg :=[]Header {};for _ ,_feeb :=range _ebc ._bebe {_dcg =append (_dcg ,Header {_ebc ,_feeb });};return _dcg ;};func (_eaddd Paragraph )ensurePPr (){if _eaddd ._dgfaed .PPr ==nil {_eaddd ._dgfaed .PPr =_eg .NewCT_PPr ();
};};func (_abdc *Document )addEndnotes (){_abdc ._ccae =_eg .NewEndnotes ();_abdc .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0065\u006e\u0064\u006e\u006f\u0074\u0065\u0073\u002b\u0078\u006d\u006c");
_abdc ._fbg .AddRelationship ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c",_ea .EndNotesType );_cggf :=_abdc .Styles .AddStyle (EndnoteTextStyleId ,_eg .ST_StyleTypeParagraph ,false );_cggf .SetName ("\u0045\u006e\u0064n\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_cggf .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_bcbb :=_cggf .ParagraphProperties ();_bcbb .X ().SuppressLineNumbers =&_eg .CT_OnOff {};_fdbg :=_cggf .RunProperties ();_fdbg .X ().Sz =&_eg .CT_HpsMeasure {ValAttr :_eg .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gege }};
_fdbg .X ().SzCs =&_eg .CT_HpsMeasure {ValAttr :_eg .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gege }};_dgbbf :=_abdc .Styles .AddStyle (_bbd ,_eg .ST_StyleTypeCharacter ,false );_dgbbf .SetName ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0020\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
_acaf :=_dgbbf .RunProperties ();_acaf .X ().VertAlign =&_eg .CT_VerticalAlignRun {ValAttr :_cge .ST_VerticalAlignRunSuperscript };_abdc .addEndnoteSeparator ();};

// SetBehindDoc sets the behindDoc attribute of anchor.
func (_fda AnchoredDrawing )SetBehindDoc (val bool ){_fda ._fdd .BehindDocAttr =val };

// AppendNode append node to document element.
func (_edba *Document )AppendNode (node Node ){_edba .insertImageFromNode (node );_edba .insertStyleFromNode (node );for _ ,_cebcc :=range node .Children {_edba .insertImageFromNode (_cebcc );_edba .insertStyleFromNode (_cebcc );};switch _gdf :=node .X ().(type ){case *Paragraph :_edba .appendParagraph (nil ,*_gdf ,false );
case *Table :_edba .appendTable (nil ,*_gdf ,false );};if node ._cdbd !=nil {if node ._cdbd ._gg !=nil {if _eece :=_edba ._fbg .FindRIDForN (0,_ea .ThemeType );_eece ==""{if _fdafe :=node ._cdbd ._fbg .FindRIDForN (0,_ea .ThemeType );_fdafe !=""{_edba ._gg =append (_edba ._gg ,node ._cdbd ._gg ...);
_eabgd :=node ._cdbd ._fbg .GetTargetByRelId (_fdafe );_edba .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_eabgd ,"\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e/\u0076\u006e\u0064.\u006f\u0070e\u006e\u0078\u006d\u006c\u0066\u006fr\u006dat\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0074\u0068\u0065\u006d\u0065\u002b\u0078\u006d\u006c");
_edba ._fbg .AddRelationship (_eabgd ,_ea .ThemeType );};};};_dgce :=_edba ._egd ;_edee :=node ._cdbd ._egd ;if _dgce !=nil {if _edee !=nil {if _dgce .Font !=nil {if _edee .Font !=nil {for _ ,_cgecbb :=range _edee .Font {_gedf :=true ;for _ ,_gefa :=range _dgce .Font {if _gefa .NameAttr ==_cgecbb .NameAttr {_gedf =false ;
break ;};};if _gedf {_dgce .Font =append (_dgce .Font ,_cgecbb );};};};}else {_dgce .Font =_edee .Font ;};};}else if _edee !=nil {_dgce =_edee ;};_edba ._egd =_dgce ;if _agfgf :=_edba ._fbg .FindRIDForN (0,_ea .FontTableType );_agfgf ==""{_edba .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006e\u0074T\u0061\u0062\u006c\u0065\u002b\u0078m\u006c");
_edba ._fbg .AddRelationship ("\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c",_ea .FontTableType );};};};

// New constructs an empty document that content can be added to.
func New ()*Document {_bce :=&Document {_fdg :_eg .NewDocument ()};_bce .ContentTypes =_cc .NewContentTypes ();_bce ._fdg .Body =_eg .NewCT_Body ();_bce ._fdg .ConformanceAttr =_cge .ST_ConformanceClassTransitional ;_bce ._fbg =_cc .NewRelationships ();
_bce ._dff =_cc .NewRelationships ();_bce .AppProperties =_cc .NewAppProperties ();_bce .CoreProperties =_cc .NewCoreProperties ();_bce .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");
_bce .Settings =NewSettings ();_bce ._fbg .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_ea .SettingsType );_bce .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");
_bce .Rels =_cc .NewRelationships ();_bce .Rels .AddRelationship (_ea .RelativeFilename (_ea .DocTypeDocument ,"",_ea .CorePropertiesType ,0),_ea .CorePropertiesType );_bce .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_ea .ExtendedPropertiesType );
_bce .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_ea .OfficeDocumentType );_bce .Numbering =NewNumbering ();_bce .Numbering .InitializeDefault ();_bce .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");
_bce ._fbg .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_ea .NumberingType );_bce .Styles =NewStyles ();_bce .Styles .InitializeDefault ();_bce .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");
_bce ._fbg .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_ea .StylesType );_bce ._fdg .Body =_eg .NewCT_Body ();return _bce ;};func (_cbbc *Document )getWatermarkHeaderInnerContentPictures ()[]*_eg .CT_Picture {var _ceceg []*_eg .CT_Picture ;
for _ ,_efda :=range _cbbc .Headers (){for _ ,_dfd :=range _efda .X ().EG_ContentBlockContent {for _ ,_dbed :=range _dfd .P {for _ ,_efab :=range _dbed .EG_PContent {for _ ,_ggd :=range _efab .EG_ContentRunContent {if _ggd .R ==nil {continue ;};for _ ,_afdb :=range _ggd .R .EG_RunInnerContent {if _afdb .Pict ==nil {continue ;
};_bbeaa :=false ;for _ ,_bee :=range _afdb .Pict .Any {_dcfc ,_ddaf :=_bee .(*_ea .XSDAny );if _ddaf &&_dcfc .XMLName .Local =="\u0073\u0068\u0061p\u0065"{_bbeaa =true ;};};if _bbeaa {_ceceg =append (_ceceg ,_afdb .Pict );};};};};};};};return _ceceg ;
};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_bfgdc TableLook )SetFirstRow (on bool ){if !on {_bfgdc ._gegf .FirstRowAttr =&_cge .ST_OnOff {};_bfgdc ._gegf .FirstRowAttr .ST_OnOff1 =_cge .ST_OnOff1Off ;}else {_bfgdc ._gegf .FirstRowAttr =&_cge .ST_OnOff {};_bfgdc ._gegf .FirstRowAttr .ST_OnOff1 =_cge .ST_OnOff1On ;
};};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_fbfbe NumberingLevel )RunProperties ()RunProperties {if _fbfbe ._ccga .RPr ==nil {_fbfbe ._ccga .RPr =_eg .NewCT_RPr ();};return RunProperties {_fbfbe ._ccga .RPr };};

// Paragraphs returns the paragraphs defined in a header.
func (_dcbd Header )Paragraphs ()[]Paragraph {_gagb :=[]Paragraph {};for _ ,_edeeg :=range _dcbd ._cceb .EG_ContentBlockContent {for _ ,_begac :=range _edeeg .P {_gagb =append (_gagb ,Paragraph {_dcbd ._acdg ,_begac });};};for _ ,_gbgaf :=range _dcbd .Tables (){for _ ,_cdbf :=range _gbgaf .Rows (){for _ ,_begd :=range _cdbf .Cells (){_gagb =append (_gagb ,_begd .Paragraphs ()...);
};};};return _gagb ;};

// AddEndnoteReference adds a footnote reference to a run.
func (_bfcb Run )AddEndnoteReference (){_ddffe :=_bfcb .newIC ();_ddffe .EndnoteRef =&_eg .CT_Empty {}};

// Properties returns the paragraph properties.
func (_beffg Paragraph )Properties ()ParagraphProperties {_beffg .ensurePPr ();return ParagraphProperties {_beffg ._acbbe ,_beffg ._dgfaed .PPr };};func (_dcff *Document )validateBookmarks ()error {_cfa :=make (map[string ]struct{});for _ ,_gafg :=range _dcff .Bookmarks (){if _ ,_daga :=_cfa [_gafg .Name ()];
_daga {return _aa .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_gafg .Name ());};_cfa [_gafg .Name ()]=struct{}{};};return nil ;};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_gef AnchoredDrawing )SetAlignment (h _eg .WdST_AlignH ,v _eg .WdST_AlignV ){_gef .SetHAlignment (h );_gef .SetVAlignment (v );};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_fbdfb Paragraph )AddEndnote (text string )Endnote {var _caec int64 ;if _fbdfb ._acbbe .HasEndnotes (){for _ ,_fdbdd :=range _fbdfb ._acbbe .Endnotes (){if _fdbdd .id ()> _caec {_caec =_fdbdd .id ();};};_caec ++;}else {_fbdfb ._acbbe .addEndnotes ();
_caec =1;};_abfe :=_eg .NewCT_FtnEdn ();_egfc :=_eg .NewCT_FtnEdnRef ();_egfc .IdAttr =_caec ;_fbdfb ._acbbe ._ccae .CT_Endnotes .Endnote =append (_fbdfb ._acbbe ._ccae .CT_Endnotes .Endnote ,_abfe );_febc :=_fbdfb .AddRun ();_cdag :=_febc .Properties ();
_cdag .SetStyle (_bbd );_febc ._fdae .EG_RunInnerContent =[]*_eg .EG_RunInnerContent {_eg .NewEG_RunInnerContent ()};_febc ._fdae .EG_RunInnerContent [0].EndnoteReference =_egfc ;_dfbdg :=Endnote {_fbdfb ._acbbe ,_abfe };_dfbdg ._edgd .IdAttr =_caec ;_dfbdg ._edgd .EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};
_ccba :=_dfbdg .AddParagraph ();_ccba .Properties ().SetStyle (EndnoteTextStyleId );_ccba ._dgfaed .PPr .RPr =_eg .NewCT_ParaRPr ();_daed :=_ccba .AddRun ();_fggb :=_daed .Properties ();_fggb .SetStyle (_bbd );_daed .AddEndnoteReference ();_ddece :=_ccba .AddRun ();
_ddece .AddText ("\u0020");_ddece =_ccba .AddRun ();_ddece .AddText (text );return _dfbdg ;};

// SetStart sets the cell start margin
func (_aede CellMargins )SetStart (d _fd .Distance ){_aede ._gfba .Start =_eg .NewCT_TblWidth ();_gcbg (_aede ._gfba .Start ,d );};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the endnote ids would be reordered.
func (_aaae Paragraph )RemoveEndnote (id int64 ){for _ ,_gdgf :=range _aaae .Runs (){if _cgddg ,_faad :=_gdgf .IsEndnote ();_cgddg {if _faad ==id {_aaae .RemoveRun (_gdgf );break ;};};};_aaae ._acbbe .removeEndnote (id );};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_gfcg Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_gfcg ._agge .UpdateFields =nil ;}else {_gfcg ._agge .UpdateFields =_eg .NewCT_OnOff ();};};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_dagb ,_bddb :=_a .Open (filename );if _bddb !=nil {return nil ,_aa .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_bddb );};defer _dagb .Close ();
_becg ,_bddb :=_a .Stat (filename );if _bddb !=nil {return nil ,_aa .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_bddb );};_ =_becg ;return Read (_dagb ,_becg .Size ());};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_gd AnchoredDrawing )GetImage ()(_cc .ImageRef ,bool ){_ga :=_gd ._fdd .Graphic .GraphicData .Any ;if len (_ga )> 0{_cgeb ,_ab :=_ga [0].(*_ac .Pic );if _ab {if _cgeb .BlipFill !=nil &&_cgeb .BlipFill .Blip !=nil &&_cgeb .BlipFill .Blip .EmbedAttr !=nil {return _gd ._dgb .GetImageByRelID (*_cgeb .BlipFill .Blip .EmbedAttr );
};};};return _cc .ImageRef {},false ;};

// Tables returns the tables defined in the header.
func (_cdcbbe Header )Tables ()[]Table {_cdea :=[]Table {};if _cdcbbe ._cceb ==nil {return nil ;};for _ ,_bebf :=range _cdcbbe ._cceb .EG_ContentBlockContent {for _ ,_aeac :=range _cdcbbe ._acdg .tables (_bebf ){_cdea =append (_cdea ,_aeac );};};return _cdea ;
};func (_dda *chart )Target ()string {return _dda ._efb };

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;_cfgd []listItemInfo ;_bebbd map[int64 ]map[int64 ]int64 ;};func _dbfg (_afeg *Document ,_fefgc []*_eg .CT_P ,_baee *TableInfo ,_ccffg *DrawingInfo )[]Node {_cccg :=[]Node {};for _ ,_ebgf :=range _fefgc {_gfacg :=Paragraph {_afeg ,_ebgf };
_cefe :=Node {_cdbd :_afeg ,_cdee :&_gfacg };if _gaad ,_cccbf :=_afeg .Styles .SearchStyleById (_gfacg .Style ());_cccbf {_cefe .Style =_gaad ;};for _ ,_fegg :=range _gfacg .Runs (){_cefe .Children =append (_cefe .Children ,Node {_cdbd :_afeg ,_cdee :_fegg ,AnchoredDrawings :_fegg .DrawingAnchored (),InlineDrawings :_fegg .DrawingInline ()});
};_cccg =append (_cccg ,_cefe );};return _cccg ;};

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_eebc Paragraph )AddCheckBox (name string )FormField {_abbf :=_eebc .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_abbf ._dceed .CheckBox =_eg .NewCT_FFCheckBox ();return _abbf ;};func _efa (_fgaf _dfe .ReaderAt ,_deef int64 ,_fcbc string )(*Document ,error ){const _afg ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";
if !_fgd .GetLicenseKey ().IsLicensed ()&&!_caf {_aa .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_aa .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return nil ,_fg .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_dfbc :=New ();_dfbc .Numbering ._bgfb =nil ;if len (_fcbc )> 0{_dfbc ._cdb =_fcbc ;
}else {_cccd ,_fcg :=_fgd .GenRefId ("\u0064\u0072");if _fcg !=nil {_gc .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fcg );return nil ,_fcg ;};_dfbc ._cdb =_cccd ;};if _dbb :=_fgd .Track (_dfbc ._cdb ,_afg );_dbb !=nil {_gc .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dbb );
return nil ,_dbb ;};_eddd ,_efgc :=_ead .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");if _efgc !=nil {return nil ,_efgc ;};_dfbc .TmpPath =_eddd ;_dde ,_efgc :=_bec .NewReader (_fgaf ,_deef );if _efgc !=nil {return nil ,_aa .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_efgc );
};_fadg :=[]*_bec .File {};_fadg =append (_fadg ,_dde .File ...);_ggfb :=false ;for _ ,_addf :=range _fadg {if _addf .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ggfb =true ;
break ;};};if _ggfb {_dfbc .CreateCustomProperties ();};_gfbcc :=_dfbc ._fdg .ConformanceAttr ;_gefd :=_dg .DecodeMap {};_gefd .SetOnNewRelationshipFunc (_dfbc .onNewRelationship );_gefd .AddTarget (_ea .ContentTypesFilename ,_dfbc .ContentTypes .X (),"",0);
_gefd .AddTarget (_ea .BaseRelsFilename ,_dfbc .Rels .X (),"",0);if _cgac :=_gefd .Decode (_fadg );_cgac !=nil {return nil ,_cgac ;};_dfbc ._fdg .ConformanceAttr =_gfbcc ;for _ ,_bfbe :=range _fadg {if _bfbe ==nil {continue ;};if _cdcb :=_dfbc .AddExtraFileFromZip (_bfbe );
_cdcb !=nil {return nil ,_cdcb ;};};if _ggfb {_egde :=false ;for _ ,_efae :=range _dfbc .Rels .X ().Relationship {if _efae .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_egde =true ;
break ;};};if !_egde {_dfbc .AddCustomRelationships ();};};return _dfbc ,nil ;};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_cadgd NumberingDefinition )AddLevel ()NumberingLevel {_adfdg :=_eg .NewCT_Lvl ();_adfdg .Start =&_eg .CT_DecimalNumber {ValAttr :1};_adfdg .IlvlAttr =int64 (len (_cadgd ._ddacb .Lvl ));_cadgd ._ddacb .Lvl =append (_cadgd ._ddacb .Lvl ,_adfdg );return NumberingLevel {_adfdg };
};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_aceg TableLook )SetVerticalBanding (on bool ){if !on {_aceg ._gegf .NoVBandAttr =&_cge .ST_OnOff {};_aceg ._gegf .NoVBandAttr .ST_OnOff1 =_cge .ST_OnOff1On ;}else {_aceg ._gegf .NoVBandAttr =&_cge .ST_OnOff {};_aceg ._gegf .NoVBandAttr .ST_OnOff1 =_cge .ST_OnOff1Off ;
};};func _ecagg (_aaeac string )mergeFieldInfo {_gebg :=[]string {};_beece :=_g .Buffer {};_bfdf :=-1;for _bfffb ,_adce :=range _aaeac {switch _adce {case ' ':if _beece .Len ()!=0{_gebg =append (_gebg ,_beece .String ());};_beece .Reset ();case '"':if _bfdf !=-1{_gebg =append (_gebg ,_aaeac [_bfdf +1:_bfffb ]);
_bfdf =-1;}else {_bfdf =_bfffb ;};default:_beece .WriteRune (_adce );};};if _beece .Len ()!=0{_gebg =append (_gebg ,_beece .String ());};_adfa :=mergeFieldInfo {};for _bdggf :=0;_bdggf < len (_gebg )-1;_bdggf ++{_becfa :=_gebg [_bdggf ];switch _becfa {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_adfa ._ebca =_gebg [_bdggf +1];
_bdggf ++;case "\u005c\u0066":_adfa ._eagca =_gebg [_bdggf +1];_bdggf ++;case "\u005c\u0062":_adfa ._afdfc =_gebg [_bdggf +1];_bdggf ++;case "\u005c\u002a":switch _gebg [_bdggf +1]{case "\u0055\u0070\u0070e\u0072":_adfa ._aeefa =true ;case "\u004c\u006f\u0077e\u0072":_adfa ._dfcgf =true ;
case "\u0043\u0061\u0070\u0073":_adfa ._aeaa =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_adfa ._abcgb =true ;};_bdggf ++;};};return _adfa ;};

// GetSize return the size of anchor on the page.
func (_ccd AnchoredDrawing )GetSize ()(_da ,_beb int64 ){return _ccd ._fdd .Extent .CxAttr ,_ccd ._fdd .Extent .CyAttr ;};

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_eg .Hdr )[]TextItem {return _aeag (header .EG_ContentBlockContent ,nil )};

// Properties returns the table properties.
func (_aeacc Table )Properties ()TableProperties {if _aeacc ._cfdb .TblPr ==nil {_aeacc ._cfdb .TblPr =_eg .NewCT_TblPr ();};return TableProperties {_aeacc ._cfdb .TblPr };};var _caf =false ;

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_ffgc Paragraph )InsertRunAfter (relativeTo Run )Run {return _ffgc .insertRun (relativeTo ,false )};

// NewAnchorDrawWrapOptions return anchor drawing options property.
func NewAnchorDrawWrapOptions ()*AnchorDrawWrapOptions {_egf :=&AnchorDrawWrapOptions {};if !_egf ._bf {_bc ,_beca :=_cab ();_egf ._cca =_bc ;_egf ._gcb =_beca ;};return _egf ;};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dfeae ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_dfeae ._bgga .KeepLines =nil ;}else {_dfeae ._bgga .KeepLines =_eg .NewCT_OnOff ();};};

// Node is document element node,
// contains Paragraph or Table element.
type Node struct{_cdbd *Document ;_cdee interface{};Style Style ;AnchoredDrawings []AnchoredDrawing ;InlineDrawings []InlineDrawing ;Children []Node ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_cece *Document )AddImage (i _cc .Image )(_cc .ImageRef ,error ){_ccaee :=_cc .MakeImageRef (i ,&_cece .DocBase ,_cece ._fbg );if i .Data ==nil &&i .Path ==""{return _ccaee ,_fg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");
};if i .Format ==""{return _ccaee ,_fg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _ccaee ,_fg .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");
};if i .Path !=""{_fcfb :=_ead .Add (i .Path );if _fcfb !=nil {return _ccaee ,_fcfb ;};};_cece .Images =append (_cece .Images ,_ccaee );_ddcb :=_aa .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_cece .Images ),i .Format );
_fagd :=_cece ._fbg .AddRelationship (_ddcb ,_ea .ImageType );_cece .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_cece .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");
_cece .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_cece .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_cece .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );
_ccaee .SetRelID (_fagd .X ().IdAttr );_ccaee .SetTarget (_ddcb );return _ccaee ,nil ;};

// SetStyle sets style to the text in watermark.
func (_daea *WatermarkText )SetStyle (style _gf .TextpathStyle ){_defdg :=_daea .getShape ();if _daea ._gdegag !=nil {_ccgag :=_daea ._gdegag .EG_ShapeElements ;if len (_ccgag )> 0&&_ccgag [0].Textpath !=nil {var _egaef =style .String ();_ccgag [0].Textpath .StyleAttr =&_egaef ;
};return ;};_dedg :=_daea .findNode (_defdg ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _fggf ,_fgdc :=range _dedg .Attrs {if _fgdc .Name .Local =="\u0073\u0074\u0079l\u0065"{_dedg .Attrs [_fggf ].Value =style .String ();};};};

// ExtractText returns text from the document as a DocText object.
func (_cgda *Document )ExtractText ()*DocText {_cfgcb :=[]TextItem {};for _ ,_cada :=range _cgda ._fdg .Body .EG_BlockLevelElts {_cfgcb =append (_cfgcb ,_aeag (_cada .EG_ContentBlockContent ,nil )...);};var _efgg []listItemInfo ;_gdab :=_cgda .Paragraphs ();
for _ ,_gggb :=range _gdab {_cbagg :=_ggbfe (_cgda ,_gggb );_efgg =append (_efgg ,_cbagg );};_bfgb :=_dafdg (_cgda );return &DocText {Items :_cfgcb ,_cfgd :_efgg ,_bebbd :_bfgb };};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to display on a separate page.
func (_egega ParagraphProperties )SetWindowControl (b bool ){if !b {_egega ._fbba .WidowControl =nil ;}else {_egega ._fbba .WidowControl =_eg .NewCT_OnOff ();};};func (_caa *chart )X ()*_ca .ChartSpace {return _caa ._dgee };

// Themes returns document's themes.
func (_aceb *Document )Themes ()[]*_ee .Theme {return _aceb ._gg };

// SetBeforeSpacing sets spacing above paragraph.
func (_ebga Paragraph )SetBeforeSpacing (d _fd .Distance ){_ebga .ensurePPr ();if _ebga ._dgfaed .PPr .Spacing ==nil {_ebga ._dgfaed .PPr .Spacing =_eg .NewCT_Spacing ();};_cbbg :=_ebga ._dgfaed .PPr .Spacing ;_cbbg .BeforeAttr =&_cge .ST_TwipsMeasure {};
_cbbg .BeforeAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (d /_fd .Twips ));};

// Outline returns true if paragraph outline is on.
func (_faec ParagraphProperties )Outline ()bool {return _fdc (_faec ._fbba .RPr .Outline )};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_aeefaa TableProperties )SetCellSpacingAuto (){_aeefaa ._dbba .TblCellSpacing =_eg .NewCT_TblWidth ();_aeefaa ._dbba .TblCellSpacing .TypeAttr =_eg .ST_TblWidthAuto ;};func _abad (_febb *_eg .CT_Tbl ,_ggbbf ,_gegdc map[int64 ]int64 ){for _ ,_dbga :=range _febb .EG_ContentRowContent {for _ ,_cfgg :=range _dbga .Tr {for _ ,_fdbd :=range _cfgg .EG_ContentCellContent {for _ ,_dbcg :=range _fdbd .Tc {for _ ,_baba :=range _dbcg .EG_BlockLevelElts {for _ ,_fgfae :=range _baba .EG_ContentBlockContent {for _ ,_daef :=range _fgfae .P {_bfbea (_daef ,_ggbbf ,_gegdc );
};for _ ,_deeb :=range _fgfae .Tbl {_abad (_deeb ,_ggbbf ,_gegdc );};};};};};};};};

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_ccga *_eg .CT_Lvl };func (_dafa Endnote )content ()[]*_eg .EG_ContentBlockContent {var _dgae []*_eg .EG_ContentBlockContent ;for _ ,_efde :=range _dafa ._edgd .EG_BlockLevelElts {_dgae =append (_dgae ,_efde .EG_ContentBlockContent ...);
};return _dgae ;};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_dgb *Document ;_fdd *_eg .WdAnchor ;};func _cab ()(*_ee .CT_Point2D ,[]*_ee .CT_Point2D ){var (_dga int64 =0;_db int64 =21600;);_ff :=_ee .ST_Coordinate {ST_CoordinateUnqualified :&_dga ,ST_UniversalMeasure :nil };_bd :=_ee .ST_Coordinate {ST_CoordinateUnqualified :&_db ,ST_UniversalMeasure :nil };
_gb :=_ee .NewCT_Point2D ();_gb .XAttr =_ff ;_gb .YAttr =_ff ;_ef :=[]*_ee .CT_Point2D {&_ee .CT_Point2D {XAttr :_ff ,YAttr :_bd },&_ee .CT_Point2D {XAttr :_bd ,YAttr :_bd },&_ee .CT_Point2D {XAttr :_bd ,YAttr :_ff },_gb };return _gb ,_ef ;};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_fcge Paragraph )AddBookmark (name string )Bookmark {_dbaaa :=_eg .NewEG_PContent ();_fdcb :=_eg .NewEG_ContentRunContent ();_dbaaa .EG_ContentRunContent =append (_dbaaa .EG_ContentRunContent ,_fdcb );_ccdca :=_eg .NewEG_RunLevelElts ();_fdcb .EG_RunLevelElts =append (_fdcb .EG_RunLevelElts ,_ccdca );
_bdacd :=_eg .NewEG_RangeMarkupElements ();_efed :=_eg .NewCT_Bookmark ();_bdacd .BookmarkStart =_efed ;_ccdca .EG_RangeMarkupElements =append (_ccdca .EG_RangeMarkupElements ,_bdacd );_bdacd =_eg .NewEG_RangeMarkupElements ();_bdacd .BookmarkEnd =_eg .NewCT_MarkupRange ();
_ccdca .EG_RangeMarkupElements =append (_ccdca .EG_RangeMarkupElements ,_bdacd );_fcge ._dgfaed .EG_PContent =append (_fcge ._dgfaed .EG_PContent ,_dbaaa );_bcgge :=Bookmark {_efed };_bcgge .SetName (name );return _bcgge ;};

// RemoveParagraph removes a paragraph from the footnote.
func (_dcaf Footnote )RemoveParagraph (p Paragraph ){for _ ,_cdga :=range _dcaf .content (){for _gebb ,_adcc :=range _cdga .P {if _adcc ==p ._dgfaed {copy (_cdga .P [_gebb :],_cdga .P [_gebb +1:]);_cdga .P =_cdga .P [0:len (_cdga .P )-1];return ;};};};
};

// ParagraphProperties returns the paragraph style properties.
func (_acaef Style )ParagraphProperties ()ParagraphStyleProperties {if _acaef ._adcgb .PPr ==nil {_acaef ._adcgb .PPr =_eg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_acaef ._adcgb .PPr };};func (_ecfa *WatermarkPicture )getShape ()*_ea .XSDAny {return _ecfa .getInnerElement ("\u0073\u0068\u0061p\u0065");
};func _fdab (_bbda *_eg .CT_P ,_gedg *_eg .CT_Hyperlink ,_eefd *TableInfo ,_ggac *DrawingInfo ,_agbd []*_eg .EG_ContentRunContent )[]TextItem {_bdgd :=[]TextItem {};for _ ,_agfbd :=range _agbd {if _gacb :=_agfbd .Sdt ;_gacb !=nil {if _ccdaf :=_gacb .SdtContent ;
_ccdaf !=nil {_bdgd =append (_bdgd ,_fdab (_bbda ,_gedg ,_eefd ,_ggac ,_ccdaf .EG_ContentRunContent )...);};};if _dadb :=_agfbd .R ;_dadb !=nil {_gaab :=_g .NewBuffer ([]byte {});for _ ,_dfbcg :=range _dadb .EG_RunInnerContent {if _dfbcg .Br !=nil {_gaab .WriteString ("\u000a");
};if _dfbcg .Tab !=nil {_gaab .WriteString ("\u0009");};if _dfbcg .T !=nil {_gaab .WriteString (_dfbcg .T .Content );};if _dfbcg .Pict !=nil &&len (_dfbcg .Pict .Any )> 0{for _ ,_gccaa :=range _dfbcg .Pict .Any {if _ebdda ,_geae :=_gccaa .(*_af .Shape );
_geae {for _ ,_feef :=range _ebdda .EG_ShapeElements {if _bbbc :=_feef .Textbox ;_bbbc !=nil {if _bbbc .TxbxContent !=nil {_bdgd =append (_bdgd ,_aeag (_bbbc .TxbxContent .EG_ContentBlockContent ,nil )...);};};};};};};};_bdgd =append (_bdgd ,TextItem {Text :_gaab .String (),DrawingInfo :_ggac ,Paragraph :_bbda ,Hyperlink :_gedg ,Run :_dadb ,TableInfo :_eefd });
for _ ,_feccb :=range _dadb .Extra {if _ddba ,_eacdf :=_feccb .(*_eg .AlternateContentRun );_eacdf {_agfdg :=&DrawingInfo {Drawing :_ddba .Choice .Drawing };for _ ,_cgcg :=range _agfdg .Drawing .Anchor {for _ ,_dafd :=range _cgcg .Graphic .GraphicData .Any {if _cfge ,_cdac :=_dafd .(*_eg .WdWsp );
_cdac {if _cfge .WChoice !=nil {if _egeg :=_cfge .SpPr ;_egeg !=nil {if _gcgb :=_egeg .Xfrm ;_gcgb !=nil {if _bbdaf :=_gcgb .Ext ;_bbdaf !=nil {_agfdg .Width =_bbdaf .CxAttr ;_agfdg .Height =_bbdaf .CyAttr ;};};};for _ ,_ecba :=range _cfge .WChoice .Txbx .TxbxContent .EG_ContentBlockContent {_bdgd =append (_bdgd ,_fae (_ecba .P ,_eefd ,_agfdg )...);
};};};};};};};};};return _bdgd ;};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_dafba TableStyleProperties )SetTableIndent (ind _fd .Distance ){_dafba ._deefc .TblInd =_eg .NewCT_TblWidth ();_dafba ._deefc .TblInd .TypeAttr =_eg .ST_TblWidthDxa ;_dafba ._deefc .TblInd .WAttr =&_eg .ST_MeasurementOrPercent {};_dafba ._deefc .TblInd .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};
_dafba ._deefc .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (ind /_fd .Dxa ));};func _bfbda (_adfd *_eg .CT_Tbl ,_cgfg map[string ]string ){for _ ,_cfef :=range _adfd .EG_ContentRowContent {for _ ,_dedc :=range _cfef .Tr {for _ ,_fbad :=range _dedc .EG_ContentCellContent {for _ ,_bccga :=range _fbad .Tc {for _ ,_gba :=range _bccga .EG_BlockLevelElts {for _ ,_cbfc :=range _gba .EG_ContentBlockContent {for _ ,_caac :=range _cbfc .P {_acab (_caac ,_cgfg );
};for _ ,_eaae :=range _cbfc .Tbl {_bfbda (_eaae ,_cgfg );};};};};};};};};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_badg ParagraphStyleProperties )SetHangingIndent (m _fd .Distance ){if _badg ._bgga .Ind ==nil {_badg ._bgga .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_badg ._bgga .Ind .HangingAttr =nil ;}else {_badg ._bgga .Ind .HangingAttr =&_cge .ST_TwipsMeasure {};
_badg ._bgga .Ind .HangingAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (m /_fd .Twips ));};};func (_deg *Document )insertTable (_gefg Paragraph ,_cec bool )Table {_gbd :=_deg ._fdg .Body ;if _gbd ==nil {return _deg .AddTable ();};_bege :=_gefg .X ();
for _bbe ,_dce :=range _gbd .EG_BlockLevelElts {for _ ,_bac :=range _dce .EG_ContentBlockContent {for _fcbb ,_dbdd :=range _bac .P {if _dbdd ==_bege {_aea :=_eg .NewCT_Tbl ();_bdef :=_eg .NewEG_BlockLevelElts ();_bgg :=_eg .NewEG_ContentBlockContent ();
_bdef .EG_ContentBlockContent =append (_bdef .EG_ContentBlockContent ,_bgg );_bgg .Tbl =append (_bgg .Tbl ,_aea );_gbd .EG_BlockLevelElts =append (_gbd .EG_BlockLevelElts ,nil );if _cec {copy (_gbd .EG_BlockLevelElts [_bbe +1:],_gbd .EG_BlockLevelElts [_bbe :]);
_gbd .EG_BlockLevelElts [_bbe ]=_bdef ;if _fcbb !=0{_efbc :=_eg .NewEG_BlockLevelElts ();_fefd :=_eg .NewEG_ContentBlockContent ();_efbc .EG_ContentBlockContent =append (_efbc .EG_ContentBlockContent ,_fefd );_fefd .P =_bac .P [:_fcbb ];_gbd .EG_BlockLevelElts =append (_gbd .EG_BlockLevelElts ,nil );
copy (_gbd .EG_BlockLevelElts [_bbe +1:],_gbd .EG_BlockLevelElts [_bbe :]);_gbd .EG_BlockLevelElts [_bbe ]=_efbc ;};_bac .P =_bac .P [_fcbb :];}else {copy (_gbd .EG_BlockLevelElts [_bbe +2:],_gbd .EG_BlockLevelElts [_bbe +1:]);_gbd .EG_BlockLevelElts [_bbe +1]=_bdef ;
if _fcbb !=len (_bac .P )-1{_acda :=_eg .NewEG_BlockLevelElts ();_fbf :=_eg .NewEG_ContentBlockContent ();_acda .EG_ContentBlockContent =append (_acda .EG_ContentBlockContent ,_fbf );_fbf .P =_bac .P [_fcbb +1:];_gbd .EG_BlockLevelElts =append (_gbd .EG_BlockLevelElts ,nil );
copy (_gbd .EG_BlockLevelElts [_bbe +3:],_gbd .EG_BlockLevelElts [_bbe +2:]);_gbd .EG_BlockLevelElts [_bbe +2]=_acda ;};_bac .P =_bac .P [:_fcbb +1];};return Table {_deg ,_aea };};};for _ ,_dgeb :=range _bac .Tbl {_bea :=_agfb (_dgeb ,_bege ,_cec );if _bea !=nil {return Table {_deg ,_bea };
};};};};return _deg .AddTable ();};

// GetWrapPathLineTo return wrapPath lineTo value.
func (_dfb AnchorDrawWrapOptions )GetWrapPathLineTo ()[]*_ee .CT_Point2D {return _dfb ._gcb };func (_eacdd *Document )syncEndnoteSettings (){_gbee :=[]int64 {};_ccce :=_eacdd .Endnotes ();for _ ,_dafe :=range _ccce {if _dafe .X ().TypeAttr !=_eg .ST_FtnEdnUnset &&_dafe .X ().TypeAttr !=_eg .ST_FtnEdnNormal {_gbee =append (_gbee ,_dafe .X ().IdAttr );
};};_cbge :=_eacdd .Settings .X ().CT_Settings .EndnotePr ;if _cbge ==nil {_cbge =_eg .NewCT_EdnDocProps ();};if len (_gbee )==0{_cbge .Endnote =nil ;return ;};_cbge .Endnote =[]*_eg .CT_FtnEdnSepRef {};for _ ,_eabe :=range _gbee {_cebe :=_eg .NewCT_FtnEdnSepRef ();
_cebe .IdAttr =_eabe ;_cbge .Endnote =append (_cbge .Endnote ,_cebe );};};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_ad CellBorders )SetInsideVertical (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_ad ._ffb .InsideV =_eg .NewCT_Border ();_afec (_ad ._ffb .InsideV ,t ,c ,thickness );};

// Color returns the style's Color.
func (_eabdf RunProperties )Color ()Color {if _eabdf ._afgg .Color ==nil {_eabdf ._afgg .Color =_eg .NewCT_Color ();};return Color {_eabdf ._afgg .Color };};

// Clear clears all content within a footer
func (_bbgcc Footer )Clear (){_bbgcc ._agef .EG_ContentBlockContent =nil };

// SetLeft sets the left border to a specified type, color and thickness.
func (_bcfa TableBorders )SetLeft (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_bcfa ._caaacb .Left =_eg .NewCT_Border ();_afec (_bcfa ._caaacb .Left ,t ,c ,thickness );};

// SetCantSplit set row properties for Can't Split value.
func (_addgg RowProperties )SetCantSplit (val bool ){if !val {_addgg ._edbab .CantSplit =nil ;}else {_bede :=_eg .NewCT_OnOff ();_addgg ._edbab .CantSplit =[]*_eg .CT_OnOff {_bede };};};

// Clear resets the numbering.
func (_debf Numbering )Clear (){_debf ._bgfb .AbstractNum =nil ;_debf ._bgfb .Num =nil ;_debf ._bgfb .NumIdMacAtCleanup =nil ;_debf ._bgfb .NumPicBullet =nil ;};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_ecfd Header )Index ()int {for _eegc ,_befg :=range _ecfd ._acdg ._bebe {if _befg ==_ecfd ._cceb {return _eegc ;};};return -1;};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_ebee RunProperties )SetVerticalAlignment (v _cge .ST_VerticalAlignRun ){if v ==_cge .ST_VerticalAlignRunUnset {_ebee ._afgg .VertAlign =nil ;}else {_ebee ._afgg .VertAlign =_eg .NewCT_VerticalAlignRun ();_ebee ._afgg .VertAlign .ValAttr =v ;};};


// Footnotes returns the footnotes defined in the document.
func (_ebd *Document )Footnotes ()[]Footnote {_cdf :=[]Footnote {};for _ ,_baf :=range _ebd ._dc .CT_Footnotes .Footnote {_cdf =append (_cdf ,Footnote {_ebd ,_baf });};return _cdf ;};

// SetTop sets the cell top margin
func (_eabg CellMargins )SetTop (d _fd .Distance ){_eabg ._gfba .Top =_eg .NewCT_TblWidth ();_gcbg (_eabg ._gfba .Top ,d );};

// // SetBeforeLineSpacing sets spacing above paragraph in line units.
func (_ddea Paragraph )SetBeforeLineSpacing (d _fd .Distance ){_ddea .ensurePPr ();if _ddea ._dgfaed .PPr .Spacing ==nil {_ddea ._dgfaed .PPr .Spacing =_eg .NewCT_Spacing ();};_gcgfe :=_ddea ._dgfaed .PPr .Spacing ;_gcgfe .BeforeLinesAttr =_ea .Int64 (int64 (d /_fd .Twips ));
};func (_ebdd *Document )insertParagraph (_cdfg Paragraph ,_adgc bool )Paragraph {if _ebdd ._fdg .Body ==nil {return _ebdd .AddParagraph ();};_faae :=_cdfg .X ();for _ ,_befba :=range _ebdd ._fdg .Body .EG_BlockLevelElts {for _ ,_faaea :=range _befba .EG_ContentBlockContent {for _fbff ,_adef :=range _faaea .P {if _adef ==_faae {_afae :=_eg .NewCT_P ();
_faaea .P =append (_faaea .P ,nil );if _adgc {copy (_faaea .P [_fbff +1:],_faaea .P [_fbff :]);_faaea .P [_fbff ]=_afae ;}else {copy (_faaea .P [_fbff +2:],_faaea .P [_fbff +1:]);_faaea .P [_fbff +1]=_afae ;};return Paragraph {_ebdd ,_afae };};};for _ ,_cfdaf :=range _faaea .Tbl {for _ ,_gdgb :=range _cfdaf .EG_ContentRowContent {for _ ,_cegg :=range _gdgb .Tr {for _ ,_aga :=range _cegg .EG_ContentCellContent {for _ ,_cfaa :=range _aga .Tc {for _ ,_caaac :=range _cfaa .EG_BlockLevelElts {for _ ,_gcded :=range _caaac .EG_ContentBlockContent {for _fbgg ,_ffgg :=range _gcded .P {if _ffgg ==_faae {_dbdg :=_eg .NewCT_P ();
_gcded .P =append (_gcded .P ,nil );if _adgc {copy (_gcded .P [_fbgg +1:],_gcded .P [_fbgg :]);_gcded .P [_fbgg ]=_dbdg ;}else {copy (_gcded .P [_fbgg +2:],_gcded .P [_fbgg +1:]);_gcded .P [_fbgg +1]=_dbdg ;};return Paragraph {_ebdd ,_dbdg };};};};};};
};};};};if _faaea .Sdt !=nil &&_faaea .Sdt .SdtContent !=nil &&_faaea .Sdt .SdtContent .P !=nil {for _cffd ,_gac :=range _faaea .Sdt .SdtContent .P {if _gac ==_faae {_gacd :=_eg .NewCT_P ();_faaea .Sdt .SdtContent .P =append (_faaea .Sdt .SdtContent .P ,nil );
if _adgc {copy (_faaea .Sdt .SdtContent .P [_cffd +1:],_faaea .Sdt .SdtContent .P [_cffd :]);_faaea .Sdt .SdtContent .P [_cffd ]=_gacd ;}else {copy (_faaea .Sdt .SdtContent .P [_cffd +2:],_faaea .Sdt .SdtContent .P [_cffd +1:]);_faaea .Sdt .SdtContent .P [_cffd +1]=_gacd ;
};return Paragraph {_ebdd ,_gacd };};};};};};return _ebdd .AddParagraph ();};func (_dcgf *Document )putNode (_cgea ,_badbe Node ,_ggaf bool )bool {_dcgf .insertImageFromNode (_badbe );_dcgf .insertStyleFromNode (_badbe );switch _bffe :=_badbe ._cdee .(type ){case *Paragraph :if _bdea ,_dcee :=_cgea .X ().(*Paragraph );
_dcee {_dcgf .appendParagraph (_bdea ,*_bffe ,_ggaf );return true ;}else {for _ ,_deff :=range _cgea .Children {if _fcab :=_dcgf .putNode (_deff ,_badbe ,_ggaf );_fcab {break ;};};};case *Table :if _degd ,_gdce :=_cgea .X ().(*Paragraph );_gdce {_cbefa :=_dcgf .appendTable (_degd ,*_bffe ,_ggaf );
_cbefa ._cfdb =_bffe ._cfdb ;return true ;}else {for _ ,_ddfc :=range _cgea .Children {if _eedga :=_dcgf .putNode (_ddfc ,_badbe ,_ggaf );_eedga {break ;};};};};return false ;};

// RemoveParagraph removes a paragraph from a footer.
func (_ffbg Header )RemoveParagraph (p Paragraph ){for _ ,_eafd :=range _ffbg ._cceb .EG_ContentBlockContent {for _edda ,_dcebc :=range _eafd .P {if _dcebc ==p ._dgfaed {copy (_eafd .P [_edda :],_eafd .P [_edda +1:]);_eafd .P =_eafd .P [0:len (_eafd .P )-1];
return ;};};};};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_fbcd *Document ;_baff *_eg .CT_SdtBlock ;};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_cbgc *_eg .CT_Fonts };

// SetShading controls the cell shading.
func (_cag CellProperties )SetShading (shd _eg .ST_Shd ,foreground ,fill _ec .Color ){if shd ==_eg .ST_ShdUnset {_cag ._eed .Shd =nil ;}else {_cag ._eed .Shd =_eg .NewCT_Shd ();_cag ._eed .Shd .ValAttr =shd ;_cag ._eed .Shd .ColorAttr =&_eg .ST_HexColor {};
if foreground .IsAuto (){_cag ._eed .Shd .ColorAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;}else {_cag ._eed .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_cag ._eed .Shd .FillAttr =&_eg .ST_HexColor {};if fill .IsAuto (){_cag ._eed .Shd .FillAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;
}else {_cag ._eed .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// ClearColor clears the text color.
func (_cbde RunProperties )ClearColor (){_cbde ._afgg .Color =nil };

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_cc .DocBase ;_fdg *_eg .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_bebe []*_eg .Hdr ;_befc []_cc .Relationships ;_bfg []*_eg .Ftr ;_fge []_cc .Relationships ;_fbg _cc .Relationships ;_gg []*_ee .Theme ;_dbe *_eg .WebSettings ;
_egd *_eg .Fonts ;_dff _cc .Relationships ;_ccae *_eg .Endnotes ;_dc *_eg .Footnotes ;_cd []*_fe .Control ;_edb []*chart ;_cdb string ;};func (_baad FormFieldType )String ()string {if _baad >=FormFieldType (len (_aeabbd )-1){return _aa .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_baad );
};return _dafab [_aeabbd [_baad ]:_aeabbd [_baad +1]];};

// X returns the inner wrapped XML type.
func (_ecbf Settings )X ()*_eg .Settings {return _ecbf ._agge };func (_fgba *Document )removeEndnote (_gfbe int64 ){_eaag :=_fgba ._ccae ;var _eafc int ;for _afdf ,_baa :=range _eaag .CT_Endnotes .Endnote {if _baa .IdAttr ==_gfbe {_eafc =_afdf ;break ;
};};_eaag .CT_Endnotes .Endnote [_eafc ]=nil ;_eaag .CT_Endnotes .Endnote [_eafc ]=_eaag .CT_Endnotes .Endnote [len (_eaag .CT_Endnotes .Endnote )-1];_eaag .CT_Endnotes .Endnote =_eaag .CT_Endnotes .Endnote [:len (_eaag .CT_Endnotes .Endnote )-1];_fgba .reorderEndnote ();
_fgba .syncEndnoteSettings ();};

// SetCSTheme sets the font complex script theme.
func (_adeg Fonts )SetCSTheme (t _eg .ST_Theme ){_adeg ._cbgc .CsthemeAttr =t };

// SetTextStyleItalic set text style of watermark to italic.
func (_dgade *WatermarkText )SetTextStyleItalic (value bool ){if _dgade ._gdegag !=nil {_efgfe :=_dgade .GetStyle ();_efgfe .SetItalic (value );_dgade .SetStyle (_efgfe );};};

// Nodes contains slice of Node element.
type Nodes struct{_gbeg []Node };

// SetKerning sets the run's font kerning.
func (_fefeg RunProperties )SetKerning (size _fd .Distance ){_fefeg ._afgg .Kern =_eg .NewCT_HpsMeasure ();_fefeg ._afgg .Kern .ValAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (size /_fd .HalfPoint ));};

// RemoveParagraph removes a paragraph from the endnote.
func (_fcbg Endnote )RemoveParagraph (p Paragraph ){for _ ,_aadc :=range _fcbg .content (){for _cadc ,_acggc :=range _aadc .P {if _acggc ==p ._dgfaed {copy (_aadc .P [_cadc :],_aadc .P [_cadc +1:]);_aadc .P =_aadc .P [0:len (_aadc .P )-1];return ;};};};
};

// Paragraphs returns the paragraphs defined in the cell.
func (_bdg Cell )Paragraphs ()[]Paragraph {_eab :=[]Paragraph {};for _ ,_bdd :=range _bdg ._cb .EG_BlockLevelElts {for _ ,_bbc :=range _bdd .EG_ContentBlockContent {for _ ,_agb :=range _bbc .P {_eab =append (_eab ,Paragraph {_bdg ._gbb ,_agb });};};};return _eab ;
};

// AddBreak adds a line break to a run.
func (_dbgf Run )AddBreak (){_bded :=_dbgf .newIC ();_bded .Br =_eg .NewCT_Br ()};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_dcfff ParagraphProperties )RStyle ()string {if _dcfff ._fbba .RPr .RStyle !=nil {return _dcfff ._fbba .RPr .RStyle .ValAttr ;};return "";};

// Row is a row within a table within a document.
type Row struct{_cabca *Document ;_ffcff *_eg .CT_Row ;};func (_gfac *Document )appendTable (_bcgee *Paragraph ,_gbg Table ,_afd bool )Table {_fad :=_gfac ._fdg .Body ;_dgbb :=_eg .NewEG_BlockLevelElts ();_gfac ._fdg .Body .EG_BlockLevelElts =append (_gfac ._fdg .Body .EG_BlockLevelElts ,_dgbb );
_edf :=_eg .NewEG_ContentBlockContent ();_dgbb .EG_ContentBlockContent =append (_dgbb .EG_ContentBlockContent ,_edf );if _bcgee !=nil {_agfd :=_bcgee .X ();for _eaa ,_fff :=range _fad .EG_BlockLevelElts {for _ ,_dbfe :=range _fff .EG_ContentBlockContent {for _abfg ,_gfaca :=range _edf .P {if _gfaca ==_agfd {_aaea :=_gbg .X ();
_gda :=_eg .NewEG_BlockLevelElts ();_abag :=_eg .NewEG_ContentBlockContent ();_gda .EG_ContentBlockContent =append (_gda .EG_ContentBlockContent ,_abag );_abag .Tbl =append (_abag .Tbl ,_aaea );_fad .EG_BlockLevelElts =append (_fad .EG_BlockLevelElts ,nil );
if _afd {copy (_fad .EG_BlockLevelElts [_eaa +1:],_fad .EG_BlockLevelElts [_eaa :]);_fad .EG_BlockLevelElts [_eaa ]=_gda ;if _abfg !=0{_afcg :=_eg .NewEG_BlockLevelElts ();_ffg :=_eg .NewEG_ContentBlockContent ();_afcg .EG_ContentBlockContent =append (_afcg .EG_ContentBlockContent ,_ffg );
_ffg .P =_dbfe .P [:_abfg ];_fad .EG_BlockLevelElts =append (_fad .EG_BlockLevelElts ,nil );copy (_fad .EG_BlockLevelElts [_eaa +1:],_fad .EG_BlockLevelElts [_eaa :]);_fad .EG_BlockLevelElts [_eaa ]=_afcg ;};_dbfe .P =_dbfe .P [_abfg :];}else {copy (_fad .EG_BlockLevelElts [_eaa +2:],_fad .EG_BlockLevelElts [_eaa +1:]);
_fad .EG_BlockLevelElts [_eaa +1]=_gda ;if _abfg !=len (_dbfe .P )-1{_cdd :=_eg .NewEG_BlockLevelElts ();_cfda :=_eg .NewEG_ContentBlockContent ();_cdd .EG_ContentBlockContent =append (_cdd .EG_ContentBlockContent ,_cfda );_cfda .P =_dbfe .P [_abfg +1:];
_fad .EG_BlockLevelElts =append (_fad .EG_BlockLevelElts ,nil );copy (_fad .EG_BlockLevelElts [_eaa +3:],_fad .EG_BlockLevelElts [_eaa +2:]);_fad .EG_BlockLevelElts [_eaa +2]=_cdd ;};_dbfe .P =_dbfe .P [:_abfg +1];};break ;};};for _ ,_abc :=range _dbfe .Tbl {_eag :=_agfb (_abc ,_agfd ,_afd );
if _eag !=nil {break ;};};};};}else {_edf .Tbl =append (_edf .Tbl ,_gbg .X ());};return Table {_gfac ,_gbg .X ()};};

// SetWidthAuto sets the the cell width to automatic.
func (_gbe CellProperties )SetWidthAuto (){_gbe ._eed .TcW =_eg .NewCT_TblWidth ();_gbe ._eed .TcW .TypeAttr =_eg .ST_TblWidthAuto ;};

// AddDefinition adds a new numbering definition.
func (_ebaa Numbering )AddDefinition ()NumberingDefinition {_ddgf :=_eg .NewCT_Num ();_feda :=int64 (1);for _ ,_dcgbb :=range _ebaa .Definitions (){if _dcgbb .AbstractNumberID ()>=_feda {_feda =_dcgbb .AbstractNumberID ()+1;};};_cade :=int64 (1);for _ ,_cgad :=range _ebaa .X ().Num {if _cgad .NumIdAttr >=_cade {_cade =_cgad .NumIdAttr +1;
};};_ddgf .NumIdAttr =_cade ;_ddgf .AbstractNumId =_eg .NewCT_DecimalNumber ();_ddgf .AbstractNumId .ValAttr =_feda ;_gded :=_eg .NewCT_AbstractNum ();_gded .AbstractNumIdAttr =_feda ;_ebaa ._bgfb .AbstractNum =append (_ebaa ._bgfb .AbstractNum ,_gded );
_ebaa ._bgfb .Num =append (_ebaa ._bgfb .Num ,_ddgf );return NumberingDefinition {_gded };};func (_gcbd Paragraph )addEndFldChar ()*_eg .CT_FldChar {_gegag :=_gcbd .addFldChar ();_gegag .FldCharTypeAttr =_eg .ST_FldCharTypeEnd ;return _gegag ;};

// Emboss returns true if paragraph emboss is on.
func (_ecccf ParagraphProperties )Emboss ()bool {return _fdc (_ecccf ._fbba .RPr .Emboss )};

// AddTOC adds a table of contents to the document and customize it according to TOCOptions if necessary.
func (_dbegc Run )AddTOC (options *TOCOptions ){_eefbf :="";if options !=nil {if options .UseHyperlinks {_eefbf +="\u0020\u005c\u0068\u0020";};if options .OmitPageNumbers {_eefbf +="\u0020\u005c\u006e\u0020";};if options .HeadingLevel !=""{_eefbf +="\u0020\u005c\u006f \u0027"+options .HeadingLevel +"\u0027";
};};_dbegc .AddFieldWithFormatting (FieldTOC ,_eefbf ,true );};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_dfdf *Document ;_edgd *_eg .CT_FtnEdn ;};

// StyleID returns the style ID.
func (_bebbc Style )StyleID ()string {if _bebbc ._adcgb .StyleIdAttr ==nil {return "";};return *_bebbc ._adcgb .StyleIdAttr ;};func (_bfffc *WatermarkPicture )getInnerElement (_bbacd string )*_ea .XSDAny {for _ ,_aabc :=range _bfffc ._ecccfd .Any {_dcaa ,_cbce :=_aabc .(*_ea .XSDAny );
if _cbce &&(_dcaa .XMLName .Local ==_bbacd ||_dcaa .XMLName .Local =="\u0076\u003a"+_bbacd ){return _dcaa ;};};return nil ;};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_eae AnchoredDrawing )SetOrigin (h _eg .WdST_RelFromH ,v _eg .WdST_RelFromV ){_eae ._fdd .PositionH .RelativeFromAttr =h ;_eae ._fdd .PositionV .RelativeFromAttr =v ;};

// Strike returns true if paragraph is striked.
func (_cgge ParagraphProperties )Strike ()bool {return _fdc (_cgge ._fbba .RPr .Strike )};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_ggbb *Document )GetImageByRelID (relID string )(_cc .ImageRef ,bool ){_cabe :=_ggbb ._fbg .GetTargetByRelId (relID );_bdec :="";for _ ,_abeeb :=range _ggbb ._befc {if _bdec !=""{break ;};_bdec =_abeeb .GetTargetByRelId (relID );};for _ ,_beba :=range _ggbb .Images {if _beba .RelID ()==relID {return _beba ,true ;
};if _cabe !=""{_feca :=_df .Replace (_beba .Target (),"\u0077\u006f\u0072d\u002f","",1);if _feca ==_cabe {if _beba .RelID ()==""{_beba .SetRelID (relID );};return _beba ,true ;};};if _bdec !=""{_aag :=_df .Replace (_beba .Target (),"\u0077\u006f\u0072d\u002f","",1);
if _aag ==_bdec {if _beba .RelID ()==""{_beba .SetRelID (relID );};return _beba ,true ;};};};return _cc .ImageRef {},false ;};

// X return slice of node.
func (_eabf *Nodes )X ()[]Node {return _eabf ._gbeg };

// Paragraphs returns the paragraphs within a structured document tag.
func (_gade StructuredDocumentTag )Paragraphs ()[]Paragraph {if _gade ._baff .SdtContent ==nil {return nil ;};_baed :=[]Paragraph {};for _ ,_fbadf :=range _gade ._baff .SdtContent .P {_baed =append (_baed ,Paragraph {_gade ._fbcd ,_fbadf });};return _baed ;
};

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_eceag RunProperties )ItalicValue ()OnOffValue {return _ceff (_eceag ._afgg .I )};

// Table is a table within a document.
type Table struct{_caacb *Document ;_cfdb *_eg .CT_Tbl ;};var (FootnoteTextStyleId ="\u0046\u006f\u006ft\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_ecgg ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065";
EndnoteTextStyleId ="E\u006e\u0064\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_bbd ="\u0045\u006ed\u006e\u006f\u0074e\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065";_gege =uint64 (20););

// Settings controls the document settings.
type Settings struct{_agge *_eg .Settings };

// SetTextWrapThrough sets the text wrap to through with a give wrap type.
func (_ccbe AnchoredDrawing )SetTextWrapThrough (option *AnchorDrawWrapOptions ){_ccbe ._fdd .Choice =&_eg .WdEG_WrapTypeChoice {};_ccbe ._fdd .Choice .WrapThrough =_eg .NewWdCT_WrapThrough ();_ccbe ._fdd .Choice .WrapThrough .WrapTextAttr =_eg .WdST_WrapTextBothSides ;
_fa :=false ;_ccbe ._fdd .Choice .WrapThrough .WrapPolygon .EditedAttr =&_fa ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_ccbe ._fdd .Choice .WrapThrough .WrapPolygon .Start =option .GetWrapPathStart ();_ccbe ._fdd .Choice .WrapThrough .WrapPolygon .LineTo =option .GetWrapPathLineTo ();
_ccbe ._fdd .LayoutInCellAttr =true ;_ccbe ._fdd .AllowOverlapAttr =true ;};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_ebbe Paragraph )SetFirstLineIndent (m _fd .Distance ){_ebbe .ensurePPr ();_gbge :=_ebbe ._dgfaed .PPr ;if _gbge .Ind ==nil {_gbge .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_gbge .Ind .FirstLineAttr =nil ;}else {_gbge .Ind .FirstLineAttr =&_cge .ST_TwipsMeasure {};
_gbge .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (m /_fd .Twips ));};};

// RightToLeft returns true if run text goes from right to left.
func (_gabf RunProperties )RightToLeft ()bool {return _fdc (_gabf ._afgg .Rtl )};

// SetAlignment controls the paragraph alignment
func (_bbdcb ParagraphProperties )SetAlignment (align _eg .ST_Jc ){if align ==_eg .ST_JcUnset {_bbdcb ._fbba .Jc =nil ;}else {_bbdcb ._fbba .Jc =_eg .NewCT_Jc ();_bbdcb ._fbba .Jc .ValAttr =align ;};};

// SetStyle sets the font size.
func (_aeff RunProperties )SetStyle (style string ){if style ==""{_aeff ._afgg .RStyle =nil ;}else {_aeff ._afgg .RStyle =_eg .NewCT_String ();_aeff ._afgg .RStyle .ValAttr =style ;};};

// X returns the inner wrapped XML type.
func (_bfff HyperLink )X ()*_eg .CT_Hyperlink {return _bfff ._gcae };

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_bccd TableLook )SetHorizontalBanding (on bool ){if !on {_bccd ._gegf .NoHBandAttr =&_cge .ST_OnOff {};_bccd ._gegf .NoHBandAttr .ST_OnOff1 =_cge .ST_OnOff1On ;}else {_bccd ._gegf .NoHBandAttr =&_cge .ST_OnOff {};_bccd ._gegf .NoHBandAttr .ST_OnOff1 =_cge .ST_OnOff1Off ;
};};

// AddParagraph adds a paragraph to the table cell.
func (_dae Cell )AddParagraph ()Paragraph {_fb :=_eg .NewEG_BlockLevelElts ();_dae ._cb .EG_BlockLevelElts =append (_dae ._cb .EG_BlockLevelElts ,_fb );_aec :=_eg .NewEG_ContentBlockContent ();_fb .EG_ContentBlockContent =append (_fb .EG_ContentBlockContent ,_aec );
_ddgb :=_eg .NewCT_P ();_aec .P =append (_aec .P ,_ddgb );return Paragraph {_dae ._gbb ,_ddgb };};

// SetHANSITheme sets the font H ANSI Theme.
func (_gadc Fonts )SetHANSITheme (t _eg .ST_Theme ){_gadc ._cbgc .HAnsiThemeAttr =t };

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_deafa FormField )PossibleValues ()[]string {if _deafa ._dceed .DdList ==nil {return nil ;};_bebbdb :=[]string {};for _ ,_fbe :=range _deafa ._dceed .DdList .ListEntry {if _fbe ==nil {continue ;};_bebbdb =append (_bebbdb ,_fbe .ValAttr );};return _bebbdb ;
};

// SetName marks sets a name attribute for a FormField.
func (_abbge FormField )SetName (name string ){_eabcg :=_eg .NewCT_FFName ();_eabcg .ValAttr =&name ;_abbge ._dceed .Name =[]*_eg .CT_FFName {_eabcg };};func (_bebc *WatermarkText )getInnerElement (_afad string )*_ea .XSDAny {for _ ,_aadb :=range _bebc ._bgge .Any {_aggda ,_adddd :=_aadb .(*_ea .XSDAny );
if _adddd &&(_aggda .XMLName .Local ==_afad ||_aggda .XMLName .Local =="\u0076\u003a"+_afad ){return _aggda ;};};return nil ;};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_aaac NumberingDefinition )AbstractNumberID ()int64 {return _aaac ._ddacb .AbstractNumIdAttr };

// AddImageRef add ImageRef to header as relationship, returning ImageRef
// that can be used to be placed as header content.
func (_eefb Header )AddImageRef (r _cc .ImageRef )(_cc .ImageRef ,error ){var _cfdcbf _cc .Relationships ;for _bgab ,_fbge :=range _eefb ._acdg ._bebe {if _fbge ==_eefb ._cceb {_cfdcbf =_eefb ._acdg ._befc [_bgab ];};};_dbfd :=_cfdcbf .AddRelationship (r .Target (),_ea .ImageType );
r .SetRelID (_dbfd .X ().IdAttr );return r ,nil ;};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_caecc *Document ;_fdae *_eg .CT_R ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_gadgc Header )AddImage (i _cc .Image )(_cc .ImageRef ,error ){var _ggbf _cc .Relationships ;for _ggag ,_adgba :=range _gadgc ._acdg ._bebe {if _adgba ==_gadgc ._cceb {_ggbf =_gadgc ._acdg ._befc [_ggag ];};};_bgddb :=_cc .MakeImageRef (i ,&_gadgc ._acdg .DocBase ,_ggbf );
if i .Data ==nil &&i .Path ==""{return _bgddb ,_fg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _bgddb ,_fg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _bgddb ,_fg .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_gadgc ._acdg .Images =append (_gadgc ._acdg .Images ,_bgddb );
_ceca :=_aa .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_gadgc ._acdg .Images ),i .Format );_dagca :=_ggbf .AddRelationship (_ceca ,_ea .ImageType );_bgddb .SetRelID (_dagca .X ().IdAttr );return _bgddb ,nil ;
};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_baggg *Document )MailMerge (mergeContent map[string ]string ){_ccbge :=_baggg .mergeFields ();_fccg :=map[Paragraph ][]Run {};for _ ,_edeb :=range _ccbge {_dcab ,_fbeg :=mergeContent [_edeb ._ebca ];if _fbeg {if _edeb ._aeefa {_dcab =_df .ToUpper (_dcab );
}else if _edeb ._dfcgf {_dcab =_df .ToLower (_dcab );}else if _edeb ._aeaa {_dcab =_df .Title (_dcab );}else if _edeb ._abcgb {_adbg :=_g .Buffer {};for _ddgcf ,_egef :=range _dcab {if _ddgcf ==0{_adbg .WriteRune (_d .ToUpper (_egef ));}else {_adbg .WriteRune (_egef );
};};_dcab =_adbg .String ();};if _dcab !=""&&_edeb ._afdfc !=""{_dcab =_edeb ._afdfc +_dcab ;};if _dcab !=""&&_edeb ._eagca !=""{_dcab =_dcab +_edeb ._eagca ;};};if _edeb ._agff {if len (_edeb ._gged .FldSimple )==1&&len (_edeb ._gged .FldSimple [0].EG_PContent )==1&&len (_edeb ._gged .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_fedc :=&_eg .EG_ContentRunContent {};
_fedc .R =_edeb ._gged .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_edeb ._gged .FldSimple =nil ;_gead :=Run {_baggg ,_fedc .R };_gead .ClearContent ();_gead .AddText (_dcab );_edeb ._gged .EG_ContentRunContent =append (_edeb ._gged .EG_ContentRunContent ,_fedc );
};}else {_bdfe :=_edeb ._gddca .Runs ();for _acbee :=_edeb ._bdbb ;_acbee <=_edeb ._bgbd ;_acbee ++{if _acbee ==_edeb ._dadbc +1{_bdfe [_acbee ].ClearContent ();_bdfe [_acbee ].AddText (_dcab );}else {_fccg [_edeb ._gddca ]=append (_fccg [_edeb ._gddca ],_bdfe [_acbee ]);
};};};};for _cgcfb ,_cfcf :=range _fccg {for _ ,_fegfd :=range _cfcf {_cgcfb .RemoveRun (_fegfd );};};_baggg .Settings .RemoveMailMerge ();};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_ddg AnchoredDrawing )SetTextWrapNone (){_ddg ._fdd .Choice =&_eg .WdEG_WrapTypeChoice {};_ddg ._fdd .Choice .WrapNone =_eg .NewWdCT_WrapNone ();};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_cbfeb RunProperties )CharacterSpacingMeasure ()string {if _geef :=_cbfeb ._afgg .Spacing ;_geef !=nil {_ecegf :=_geef .ValAttr ;if _ecegf .ST_UniversalMeasure !=nil {return *_ecegf .ST_UniversalMeasure ;};};return "";};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_eeb *Document )BodySection ()Section {if _eeb ._fdg .Body .SectPr ==nil {_eeb ._fdg .Body .SectPr =_eg .NewCT_SectPr ();};return Section {_eeb ,_eeb ._fdg .Body .SectPr };};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_dbgd FormField )SetValue (v string ){if _dbgd ._dceed .DdList !=nil {for _bafa ,_eea :=range _dbgd .PossibleValues (){if _eea ==v {_dbgd ._dceed .DdList .Result =_eg .NewCT_DecimalNumber ();_dbgd ._dceed .DdList .Result .ValAttr =int64 (_bafa );
break ;};};}else if _dbgd ._dceed .TextInput !=nil {_dbgd ._dbede .T =_eg .NewCT_Text ();_dbgd ._dbede .T .Content =v ;};};func (_eecc Paragraph )addStartBookmark (_baage int64 ,_fdfc string )*_eg .CT_Bookmark {_fcgg :=_eg .NewEG_PContent ();_eecc ._dgfaed .EG_PContent =append (_eecc ._dgfaed .EG_PContent ,_fcgg );
_egaee :=_eg .NewEG_ContentRunContent ();_dbeeb :=_eg .NewEG_RunLevelElts ();_begff :=_eg .NewEG_RangeMarkupElements ();_cddca :=_eg .NewCT_Bookmark ();_cddca .NameAttr =_fdfc ;_cddca .IdAttr =_baage ;_begff .BookmarkStart =_cddca ;_fcgg .EG_ContentRunContent =append (_fcgg .EG_ContentRunContent ,_egaee );
_egaee .EG_RunLevelElts =append (_egaee .EG_RunLevelElts ,_dbeeb );_dbeeb .EG_RangeMarkupElements =append (_dbeeb .EG_RangeMarkupElements ,_begff );return _cddca ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_gedbe TableStyleProperties )SetCellSpacingAuto (){_gedbe ._deefc .TblCellSpacing =_eg .NewCT_TblWidth ();_gedbe ._deefc .TblCellSpacing .TypeAttr =_eg .ST_TblWidthAuto ;};func (_dcbg *Document )insertNumberingFromStyleProperties (_cgace Numbering ,_fcbe ParagraphStyleProperties ){_cfce :=_fcbe .NumId ();
_acca :=int64 (-1);if _cfce > -1{for _ ,_eagd :=range _cgace ._bgfb .Num {if _eagd .NumIdAttr ==_cfce {if _eagd .AbstractNumId !=nil {_acca =_eagd .AbstractNumId .ValAttr ;_caea :=false ;for _ ,_dfda :=range _dcbg .Numbering ._bgfb .Num {if _dfda .NumIdAttr ==_cfce {_caea =true ;
break ;};};if !_caea {_dcbg .Numbering ._bgfb .Num =append (_dcbg .Numbering ._bgfb .Num ,_eagd );};break ;};};};for _ ,_beff :=range _cgace ._bgfb .AbstractNum {if _beff .AbstractNumIdAttr ==_acca {_edbdf :=false ;for _ ,_cffc :=range _dcbg .Numbering ._bgfb .AbstractNum {if _cffc .AbstractNumIdAttr ==_acca {_edbdf =true ;
break ;};};if !_edbdf {_dcbg .Numbering ._bgfb .AbstractNum =append (_dcbg .Numbering ._bgfb .AbstractNum ,_beff );};break ;};};};};

// MergeFields returns the list of all mail merge fields found in the document.
func (_dfag Document )MergeFields ()[]string {_cgdeb :=map[string ]struct{}{};for _ ,_dgfc :=range _dfag .mergeFields (){_cgdeb [_dgfc ._ebca ]=struct{}{};};_efgfb :=[]string {};for _agegb :=range _cgdeb {_efgfb =append (_efgfb ,_agegb );};return _efgfb ;
};

// UnderlineColor returns the hex color value of paragraph underline.
func (_dfgc ParagraphProperties )UnderlineColor ()string {if _dffd :=_dfgc ._fbba .RPr .U ;_dffd !=nil {_addgf :=_dffd .ColorAttr ;if _addgf !=nil &&_addgf .ST_HexColorRGB !=nil {return *_addgf .ST_HexColorRGB ;};};return "";};

// IsBold returns true if the run has been set to bold.
func (_bdgba RunProperties )IsBold ()bool {return _bdgba .BoldValue ()==OnOffValueOn };

// SetThemeShade sets the shade based off the theme color.
func (_bcdf Color )SetThemeShade (s uint8 ){_ecge :=_aa .Sprintf ("\u0025\u0030\u0032\u0078",s );_bcdf ._cce .ThemeShadeAttr =&_ecge ;};

// SetMultiLevelType sets the multilevel type.
func (_bdafg NumberingDefinition )SetMultiLevelType (t _eg .ST_MultiLevelType ){if t ==_eg .ST_MultiLevelTypeUnset {_bdafg ._ddacb .MultiLevelType =nil ;}else {_bdafg ._ddacb .MultiLevelType =_eg .NewCT_MultiLevelType ();_bdafg ._ddacb .MultiLevelType .ValAttr =t ;
};};

// RemoveParagraph removes a paragraph from a footer.
func (_fagga Footer )RemoveParagraph (p Paragraph ){for _ ,_acea :=range _fagga ._agef .EG_ContentBlockContent {for _begf ,_aebd :=range _acea .P {if _aebd ==p ._dgfaed {copy (_acea .P [_begf :],_acea .P [_begf +1:]);_acea .P =_acea .P [0:len (_acea .P )-1];
return ;};};};};

// SetLeftIndent controls left indent of paragraph.
func (_fcgf Paragraph )SetLeftIndent (m _fd .Distance ){_fcgf .ensurePPr ();_ddff :=_fcgf ._dgfaed .PPr ;if _ddff .Ind ==nil {_ddff .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_ddff .Ind .LeftAttr =nil ;}else {_ddff .Ind .LeftAttr =&_eg .ST_SignedTwipsMeasure {};
_ddff .Ind .LeftAttr .Int64 =_ea .Int64 (int64 (m /_fd .Twips ));};};func _fae (_gdag []*_eg .CT_P ,_beee *TableInfo ,_fddcf *DrawingInfo )[]TextItem {_fagb :=[]TextItem {};for _ ,_gabg :=range _gdag {_fagb =append (_fagb ,_acbf (_gabg ,nil ,_beee ,_fddcf ,_gabg .EG_PContent )...);
};return _fagb ;};

// ExtractTextOptions extraction text options.
type ExtractTextOptions struct{

// WithNumbering extract numbering elements if set to `true`.
WithNumbering bool ;

// NumberingIndent default value of numbering indent.
NumberingIndent string ;

// RunsOnNewLine write each of runs text on new line if set to `true`.
RunsOnNewLine bool ;};

// Properties returns the run properties.
func (_fffa Run )Properties ()RunProperties {if _fffa ._fdae .RPr ==nil {_fffa ._fdae .RPr =_eg .NewCT_RPr ();};return RunProperties {_fffa ._fdae .RPr };};var _aeabbd =[...]uint8 {0,20,37,58,79};func _agbg ()*_af .Handles {_cbccd :=_af .NewHandles ();
_gagc :=_af .NewCT_H ();_ffab :="\u0023\u0030\u002c\u0062\u006f\u0074\u0074\u006f\u006dR\u0069\u0067\u0068\u0074";_gagc .PositionAttr =&_ffab ;_bbdcc :="\u0036\u0036\u0032\u0039\u002c\u0031\u0034\u0039\u0037\u0031";_gagc .XrangeAttr =&_bbdcc ;_cbccd .H =[]*_af .CT_H {_gagc };
return _cbccd ;};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_gfca ParagraphProperties )EastAsiaFont ()string {if _ccef :=_gfca ._fbba .RPr .RFonts ;_ccef !=nil {if _ccef .EastAsiaAttr !=nil {return *_ccef .EastAsiaAttr ;};};return "";};

// AddRow adds a row to a table.
func (_ddab Table )AddRow ()Row {_acfa :=_eg .NewEG_ContentRowContent ();_ddab ._cfdb .EG_ContentRowContent =append (_ddab ._cfdb .EG_ContentRowContent ,_acfa );_ddef :=_eg .NewCT_Row ();_acfa .Tr =append (_acfa .Tr ,_ddef );return Row {_ddab ._caacb ,_ddef };
};

// AddPageBreak adds a page break to a run.
func (_dcbab Run )AddPageBreak (){_eged :=_dcbab .newIC ();_eged .Br =_eg .NewCT_Br ();_eged .Br .TypeAttr =_eg .ST_BrTypePage ;};

// DrawingInline return a slice of InlineDrawings.
func (_bdcca Run )DrawingInline ()[]InlineDrawing {_cfbb :=[]InlineDrawing {};for _ ,_beda :=range _bdcca ._fdae .EG_RunInnerContent {if _beda .Drawing ==nil {continue ;};for _ ,_cceda :=range _beda .Drawing .Inline {_cfbb =append (_cfbb ,InlineDrawing {_bdcca ._caecc ,_cceda });
};};return _cfbb ;};

// GetColor returns the color.Color object representing the run color.
func (_baeb RunProperties )GetColor ()_ec .Color {if _bedg :=_baeb ._afgg .Color ;_bedg !=nil {_gfbf :=_bedg .ValAttr ;if _gfbf .ST_HexColorRGB !=nil {return _ec .FromHex (*_gfbf .ST_HexColorRGB );};};return _ec .Color {};};

// ParagraphBorders allows manipulation of borders on a paragraph.
type ParagraphBorders struct{_befcf *Document ;_edef *_eg .CT_PBdr ;};

// RemoveMailMerge removes any mail merge settings
func (_fedf Settings )RemoveMailMerge (){_fedf ._agge .MailMerge =nil };

// X returns the inner wrapped XML type.
func (_eeccg Styles )X ()*_eg .Styles {return _eeccg ._caeb };

// AddParagraph adds a paragraph to the footer.
func (_bgda Footer )AddParagraph ()Paragraph {_agaa :=_eg .NewEG_ContentBlockContent ();_bgda ._agef .EG_ContentBlockContent =append (_bgda ._agef .EG_ContentBlockContent ,_agaa );_ffbag :=_eg .NewCT_P ();_agaa .P =append (_agaa .P ,_ffbag );return Paragraph {_bgda ._fdfe ,_ffbag };
};

// Nodes return the document's element as nodes.
func (_bfaf *Document )Nodes ()Nodes {_gedca :=[]Node {};for _ ,_fgcd :=range _bfaf ._fdg .Body .EG_BlockLevelElts {_gedca =append (_gedca ,_cdedb (_bfaf ,_fgcd .EG_ContentBlockContent ,nil )...);};if _bfaf ._fdg .Body .SectPr !=nil {_gedca =append (_gedca ,Node {_cdee :_bfaf ._fdg .Body .SectPr });
};_eagaf :=Nodes {_gbeg :_gedca };return _eagaf ;};func (_gdga *Document )insertStyleFromNode (_afaec Node ){if _afaec .Style .X ()!=nil {if _ ,_cbbce :=_gdga .Styles .SearchStyleById (_afaec .Style .StyleID ());!_cbbce {_gdga .Styles .InsertStyle (_afaec .Style );
_ecbb :=_afaec .Style .ParagraphProperties ();_gdga .insertNumberingFromStyleProperties (_afaec ._cdbd .Numbering ,_ecbb );};};};

// Emboss returns true if run emboss is on.
func (_bbdg RunProperties )Emboss ()bool {return _fdc (_bbdg ._afgg .Emboss )};

// SetFollowImageShape sets wrapPath to follow image shape,
// if nil return wrapPath that follow image size.
func (_ddd AnchorDrawWrapOptions )SetFollowImageShape (val bool ){_ddd ._bf =val ;if !val {_bcb ,_bef :=_cab ();_ddd ._cca =_bcb ;_ddd ._gcb =_bef ;};};func (_cdfa Paragraph )insertRun (_dbfb Run ,_fgafg bool )Run {for _ ,_bbba :=range _cdfa ._dgfaed .EG_PContent {for _ffff ,_ccgd :=range _bbba .EG_ContentRunContent {if _ccgd .R ==_dbfb .X (){_bffd :=_eg .NewCT_R ();
_bbba .EG_ContentRunContent =append (_bbba .EG_ContentRunContent ,nil );if _fgafg {copy (_bbba .EG_ContentRunContent [_ffff +1:],_bbba .EG_ContentRunContent [_ffff :]);_bbba .EG_ContentRunContent [_ffff ]=_eg .NewEG_ContentRunContent ();_bbba .EG_ContentRunContent [_ffff ].R =_bffd ;
}else {copy (_bbba .EG_ContentRunContent [_ffff +2:],_bbba .EG_ContentRunContent [_ffff +1:]);_bbba .EG_ContentRunContent [_ffff +1]=_eg .NewEG_ContentRunContent ();_bbba .EG_ContentRunContent [_ffff +1].R =_bffd ;};return Run {_cdfa ._acbbe ,_bffd };};
if _ccgd .Sdt !=nil &&_ccgd .Sdt .SdtContent !=nil {for _ ,_bdbf :=range _ccgd .Sdt .SdtContent .EG_ContentRunContent {if _bdbf .R ==_dbfb .X (){_bfcad :=_eg .NewCT_R ();_ccgd .Sdt .SdtContent .EG_ContentRunContent =append (_ccgd .Sdt .SdtContent .EG_ContentRunContent ,nil );
if _fgafg {copy (_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff +1:],_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff :]);_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff ]=_eg .NewEG_ContentRunContent ();_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff ].R =_bfcad ;
}else {copy (_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff +2:],_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff +1:]);_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff +1]=_eg .NewEG_ContentRunContent ();_ccgd .Sdt .SdtContent .EG_ContentRunContent [_ffff +1].R =_bfcad ;
};return Run {_cdfa ._acbbe ,_bfcad };};};};};};return _cdfa .AddRun ();};

// Clear removes all of the content from within a run.
func (_feebd Run )Clear (){_feebd ._fdae .EG_RunInnerContent =nil };

// TextWithOptions extract text with options.
func (_ecggc *DocText )TextWithOptions (options ExtractTextOptions )string {_edbg :=make (map[int64 ]map[int64 ]int64 ,0);_deba :=_g .NewBuffer ([]byte {});_fegdf :=int64 (0);_daegf :=int64 (0);_bdac :=int64 (0);for _gadfd ,_dbdff :=range _ecggc .Items {_gdee :=false ;
if _dbdff .Text !=""{if _gadfd > 0{if _dbdff .Paragraph !=_ecggc .Items [_gadfd -1].Paragraph {_gdee =true ;};if !options .RunsOnNewLine &&_gdee {_deba .WriteString ("\u000a");}else if options .RunsOnNewLine {_deba .WriteString ("\u000a");};}else {_gdee =true ;
};if options .WithNumbering {if _gdee {for _ ,_dffg :=range _ecggc ._cfgd {if _dffg .FromParagraph ==nil {continue ;};if _dffg .FromParagraph .X ()==_dbdff .Paragraph {if _agba :=_dffg .NumberingLevel .X ();_agba !=nil {if _dffg .AbstractNumId !=nil &&_ecggc ._bebbd [*_dffg .AbstractNumId ][_agba .IlvlAttr ]> 0{if _ ,_agea :=_edbg [*_dffg .AbstractNumId ];
_agea {if _ ,_bfbc :=_edbg [*_dffg .AbstractNumId ][_agba .IlvlAttr ];_bfbc {_edbg [*_dffg .AbstractNumId ][_agba .IlvlAttr ]++;}else {_edbg [*_dffg .AbstractNumId ][_agba .IlvlAttr ]=1;};}else {_edbg [*_dffg .AbstractNumId ]=map[int64 ]int64 {_agba .IlvlAttr :1};
};if _fegdf ==_dffg .NumberingLevel .X ().IlvlAttr &&_agba .IlvlAttr > 0{_daegf ++;}else {_daegf =_edbg [*_dffg .AbstractNumId ][_agba .IlvlAttr ];if _agba .IlvlAttr > _fegdf &&_bdac ==*_dffg .AbstractNumId {_daegf =1;};};_fgaa :="";if _agba .LvlText .ValAttr !=nil {_fgaa =*_agba .LvlText .ValAttr ;
};_gbgf :=_cg .FormatNumberingText (_daegf ,_agba .IlvlAttr ,_fgaa ,_agba .NumFmt ,_edbg [*_dffg .AbstractNumId ]);_deba .WriteString (_gbgf );_ecggc ._bebbd [*_dffg .AbstractNumId ][_agba .IlvlAttr ]--;_fegdf =_agba .IlvlAttr ;_bdac =*_dffg .AbstractNumId ;
if options .NumberingIndent !=""{_deba .WriteString (options .NumberingIndent );};};};break ;};};};};_deba .WriteString (_dbdff .Text );};};return _deba .String ();};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_ccac Bookmark )Name ()string {return _ccac ._feb .NameAttr };

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_aggbd *_eg .CT_Spacing };

// Outline returns true if run outline is on.
func (_bdabg RunProperties )Outline ()bool {return _fdc (_bdabg ._afgg .Outline )};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_gddb Style )SetUnhideWhenUsed (b bool ){if b {_gddb ._adcgb .UnhideWhenUsed =_eg .NewCT_OnOff ();}else {_gddb ._adcgb .UnhideWhenUsed =nil ;};};func _acbf (_ecff *_eg .CT_P ,_bfdb *_eg .CT_Hyperlink ,_dgge *TableInfo ,_fbac *DrawingInfo ,_ddcg []*_eg .EG_PContent )[]TextItem {if len (_ddcg )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_fbac ,Paragraph :_ecff ,Hyperlink :_bfdb ,Run :nil ,TableInfo :_dgge }};
};_eecfa :=[]TextItem {};for _ ,_dcba :=range _ddcg {for _ ,_cfacb :=range _dcba .FldSimple {if _cfacb !=nil {_eecfa =append (_eecfa ,_acbf (_ecff ,_bfdb ,_dgge ,_fbac ,_cfacb .EG_PContent )...);};};if _cfbg :=_dcba .Hyperlink ;_cfbg !=nil {_eecfa =append (_eecfa ,_fdab (_ecff ,_cfbg ,_dgge ,_fbac ,_cfbg .EG_ContentRunContent )...);
};_eecfa =append (_eecfa ,_fdab (_ecff ,nil ,_dgge ,_fbac ,_dcba .EG_ContentRunContent )...);};return _eecfa ;};

// SetPageMargins sets the page margins for a section
func (_effag Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _fd .Distance ){_cedc :=_eg .NewCT_PageMar ();_cedc .TopAttr .Int64 =_ea .Int64 (int64 (top /_fd .Twips ));_cedc .BottomAttr .Int64 =_ea .Int64 (int64 (bottom /_fd .Twips ));
_cedc .RightAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (right /_fd .Twips ));_cedc .LeftAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (left /_fd .Twips ));_cedc .HeaderAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (header /_fd .Twips ));
_cedc .FooterAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (footer /_fd .Twips ));_cedc .GutterAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (gutter /_fd .Twips ));_effag ._ccgbd .PgMar =_cedc ;};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_caaae Paragraph )SetNumberingLevel (listLevel int ){_caaae .ensurePPr ();if _caaae ._dgfaed .PPr .NumPr ==nil {_caaae ._dgfaed .PPr .NumPr =_eg .NewCT_NumPr ();};_gdedg :=_eg .NewCT_DecimalNumber ();_gdedg .ValAttr =int64 (listLevel );_caaae ._dgfaed .PPr .NumPr .Ilvl =_gdedg ;
};

// SetTop sets the top border to a specified type, color and thickness.
func (_fcdd ParagraphBorders )SetTop (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_fcdd ._edef .Top =_eg .NewCT_Border ();_ggggd (_fcdd ._edef .Top ,t ,c ,thickness );};

// SetOutlineLvl sets outline level of paragraph.
func (_fggbd Paragraph )SetOutlineLvl (lvl int64 ){_fggbd .ensurePPr ();if _fggbd ._dgfaed .PPr .OutlineLvl ==nil {_fggbd ._dgfaed .PPr .OutlineLvl =_eg .NewCT_DecimalNumber ();};_ecgga :=lvl -1;_fggbd ._dgfaed .PPr .OutlineLvl .ValAttr =_ecgga ;};func (_aebf Document )mergeFields ()[]mergeFieldInfo {_cfgge :=[]Paragraph {};
_gadbc :=[]mergeFieldInfo {};for _ ,_eafcb :=range _aebf .Tables (){for _ ,_dacfd :=range _eafcb .Rows (){for _ ,_acbe :=range _dacfd .Cells (){_cfgge =append (_cfgge ,_acbe .Paragraphs ()...);};};};_cfgge =append (_cfgge ,_aebf .Paragraphs ()...);for _ ,_dceg :=range _aebf .Headers (){_cfgge =append (_cfgge ,_dceg .Paragraphs ()...);
for _ ,_aeeb :=range _dceg .Tables (){for _ ,_dagg :=range _aeeb .Rows (){for _ ,_gaff :=range _dagg .Cells (){_cfgge =append (_cfgge ,_gaff .Paragraphs ()...);};};};};for _ ,_gecgb :=range _aebf .Footers (){_cfgge =append (_cfgge ,_gecgb .Paragraphs ()...);
for _ ,_ebffg :=range _gecgb .Tables (){for _ ,_dfeba :=range _ebffg .Rows (){for _ ,_fbab :=range _dfeba .Cells (){_cfgge =append (_cfgge ,_fbab .Paragraphs ()...);};};};};for _ ,_gbbcf :=range _cfgge {_abdb :=_gbbcf .Runs ();_bfgee :=-1;_cdae :=-1;_cfag :=-1;
_ddga :=mergeFieldInfo {};for _ ,_dbcgff :=range _gbbcf ._dgfaed .EG_PContent {for _ ,_fdbcg :=range _dbcgff .FldSimple {if _df .Contains (_fdbcg .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_deffe :=_ecagg (_fdbcg .InstrAttr );
_deffe ._agff =true ;_deffe ._gddca =_gbbcf ;_deffe ._gged =_dbcgff ;_gadbc =append (_gadbc ,_deffe );};};};for _cgcc :=0;_cgcc < len (_abdb );_cgcc ++{_bdgdb :=_abdb [_cgcc ];for _ ,_fgda :=range _bdgdb .X ().EG_RunInnerContent {if _fgda .FldChar !=nil {switch _fgda .FldChar .FldCharTypeAttr {case _eg .ST_FldCharTypeBegin :_bfgee =_cgcc ;
case _eg .ST_FldCharTypeSeparate :_cdae =_cgcc ;case _eg .ST_FldCharTypeEnd :_cfag =_cgcc ;if _ddga ._ebca !=""{_ddga ._gddca =_gbbcf ;_ddga ._bdbb =_bfgee ;_ddga ._bgbd =_cfag ;_ddga ._dadbc =_cdae ;_gadbc =append (_gadbc ,_ddga );};_bfgee =-1;_cdae =-1;
_cfag =-1;_ddga =mergeFieldInfo {};};}else if _fgda .InstrText !=nil &&_df .Contains (_fgda .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _bfgee !=-1&&_cfag ==-1{_ddga =_ecagg (_fgda .InstrText .Content );};};};
};};return _gadbc ;};

// FindNodeByStyleId return slice of node base on style id.
func (_gaee *Nodes )FindNodeByStyleId (styleId string )[]Node {_cbbfa :=[]Node {};for _ ,_eafe :=range _gaee ._gbeg {switch _afcb :=_eafe ._cdee .(type ){case *Paragraph :if _afcb !=nil &&_afcb .Style ()==styleId {_cbbfa =append (_cbbfa ,_eafe );};case *Table :if _afcb !=nil &&_afcb .Style ()==styleId {_cbbfa =append (_cbbfa ,_eafe );
};};_cdba :=Nodes {_gbeg :_eafe .Children };_cbbfa =append (_cbbfa ,_cdba .FindNodeByStyleId (styleId )...);};return _cbbfa ;};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_gebdg ParagraphStyleProperties )SetSpacing (before ,after _fd .Distance ){if _gebdg ._bgga .Spacing ==nil {_gebdg ._bgga .Spacing =_eg .NewCT_Spacing ();};if before ==_fd .Zero {_gebdg ._bgga .Spacing .BeforeAttr =nil ;}else {_gebdg ._bgga .Spacing .BeforeAttr =&_cge .ST_TwipsMeasure {};
_gebdg ._bgga .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (before /_fd .Twips ));};if after ==_fd .Zero {_gebdg ._bgga .Spacing .AfterAttr =nil ;}else {_gebdg ._bgga .Spacing .AfterAttr =&_cge .ST_TwipsMeasure {};_gebdg ._bgga .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (after /_fd .Twips ));
};};func (_gcea *Document )InsertTableBefore (relativeTo Paragraph )Table {return _gcea .insertTable (relativeTo ,true );};func (_feebf *WatermarkText )findNode (_bggg *_ea .XSDAny ,_bffc string )*_ea .XSDAny {for _ ,_dbaab :=range _bggg .Nodes {if _dbaab .XMLName .Local ==_bffc {return _dbaab ;
};};return nil ;};

// SetTextStyleBold set text style of watermark to bold.
func (_gbbac *WatermarkText )SetTextStyleBold (value bool ){if _gbbac ._gdegag !=nil {_ggca :=_gbbac .GetStyle ();_ggca .SetBold (value );_gbbac .SetStyle (_ggca );};};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_faag HyperLink )SetTargetByRef (link _cc .Hyperlink ){_faag ._gcae .IdAttr =_ea .String (_cc .Relationship (link ).ID ());_faag ._gcae .AnchorAttr =nil ;};func (_ccfge Paragraph )addInstrText (_bceea string )*_eg .CT_Text {_bebd :=_ccfge .AddRun ();
_degg :=_bebd .X ();_bcaea :=_eg .NewEG_RunInnerContent ();_bgcg :=_eg .NewCT_Text ();_afbbf :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_bgcg .SpaceAttr =&_afbbf ;_bgcg .Content ="\u0020"+_bceea +"\u0020";_bcaea .InstrText =_bgcg ;_degg .EG_RunInnerContent =append (_degg .EG_RunInnerContent ,_bcaea );
return _bgcg ;};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_dddc TableLook )SetFirstColumn (on bool ){if !on {_dddc ._gegf .FirstColumnAttr =&_cge .ST_OnOff {};_dddc ._gegf .FirstColumnAttr .ST_OnOff1 =_cge .ST_OnOff1Off ;}else {_dddc ._gegf .FirstColumnAttr =&_cge .ST_OnOff {};_dddc ._gegf .FirstColumnAttr .ST_OnOff1 =_cge .ST_OnOff1On ;
};};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_edage TableProperties )SetCellSpacingPercent (pct float64 ){_edage ._dbba .TblCellSpacing =_eg .NewCT_TblWidth ();_edage ._dbba .TblCellSpacing .TypeAttr =_eg .ST_TblWidthPct ;_edage ._dbba .TblCellSpacing .WAttr =&_eg .ST_MeasurementOrPercent {};
_edage ._dbba .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_edage ._dbba .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (pct *50));};

// SetSemiHidden controls if the style is hidden in the UI.
func (_bggab Style )SetSemiHidden (b bool ){if b {_bggab ._adcgb .SemiHidden =_eg .NewCT_OnOff ();}else {_bggab ._adcgb .SemiHidden =nil ;};};

// X returns the inner wrapped XML type.
func (_ffce RunProperties )X ()*_eg .CT_RPr {return _ffce ._afgg };

// VerticalAlign returns the value of run vertical align.
func (_bdeff RunProperties )VerticalAlignment ()_cge .ST_VerticalAlignRun {if _fafd :=_bdeff ._afgg .VertAlign ;_fafd !=nil {return _fafd .ValAttr ;};return 0;};

// SetRight sets the right border to a specified type, color and thickness.
func (_ceced TableBorders )SetRight (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_ceced ._caaacb .Right =_eg .NewCT_Border ();_afec (_ceced ._caaacb .Right ,t ,c ,thickness );};func (_bae *Document )reorderFootnote (){_bcgg :=int64 (1);_dgdg :=map[int64 ]int64 {};
for _ ,_begc :=range _bae ._dc .Footnote {switch _begc .TypeAttr {case _eg .ST_FtnEdnSeparator :_begc .IdAttr =-1;break ;case _eg .ST_FtnEdnContinuationSeparator :_begc .IdAttr =0;break ;default:_dgdg [_begc .IdAttr ]=_bcgg ;_begc .IdAttr =_bcgg ;_bcgg ++;
};};for _ ,_cfc :=range _bae .Paragraphs (){for _ ,_fgf :=range _cfc .Runs (){if _bbg ,_ced :=_fgf .IsFootnote ();_bbg {_fgf .X ().EG_RunInnerContent [0].FootnoteReference .IdAttr =_dgdg [_ced ];};};};};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_abcb ParagraphProperties )ComplexSizeValue ()float64 {if _agdg :=_abcb ._fbba .RPr .SzCs ;_agdg !=nil {_aedbe :=_agdg .ValAttr ;if _aedbe .ST_UnsignedDecimalNumber !=nil {return float64 (*_aedbe .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_geeb *Document )HasEndnotes ()bool {return _geeb ._ccae !=nil };

// X returns the inner wrapped XML type.
func (_bfdg TableStyleProperties )X ()*_eg .CT_TblPrBase {return _bfdg ._deefc };

// ReplaceText replace text inside node.
func (_ecfef *Nodes )ReplaceText (oldText ,newText string ){for _ ,_ffdd :=range _ecfef ._gbeg {_ffdd .ReplaceText (oldText ,newText );};};

// X returns the inner wrapped XML type.
func (_adab Footer )X ()*_eg .Ftr {return _adab ._agef };

// AddFootnoteReference adds a footnote reference to a run.
func (_eafab Run )AddFootnoteReference (){_agcc :=_eafab .newIC ();_agcc .FootnoteRef =&_eg .CT_Empty {};};

// Shadow returns true if run shadow is on.
func (_ceee RunProperties )Shadow ()bool {return _fdc (_ceee ._afgg .Shadow )};

// SetHighlight highlights text in a specified color.
func (_cdca RunProperties )SetHighlight (c _eg .ST_HighlightColor ){_cdca ._afgg .Highlight =_eg .NewCT_Highlight ();_cdca ._afgg .Highlight .ValAttr =c ;};

// GetStyle returns string style of the text in watermark and format it to TextpathStyle.
func (_bcfac *WatermarkText )GetStyle ()_gf .TextpathStyle {_bcdd :=_bcfac .getShape ();if _bcfac ._gdegag !=nil {_fccb :=_bcfac ._gdegag .EG_ShapeElements ;if len (_fccb )> 0&&_fccb [0].Textpath !=nil {return _gf .NewTextpathStyle (*_fccb [0].Textpath .StyleAttr );
};}else {_adgf :=_bcfac .findNode (_bcdd ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_adff :=range _adgf .Attrs {if _adff .Name .Local =="\u0073\u0074\u0079l\u0065"{return _gf .NewTextpathStyle (_adff .Value );};};};return _gf .NewTextpathStyle ("");
};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_aggd Document )SetConformance (conformanceAttr _cge .ST_ConformanceClass ){_aggd ._fdg .ConformanceAttr =conformanceAttr ;};func (_ddad *Document )removeFootnote (_daeb int64 ){_gdca :=_ddad ._dc ;var _gccdg int ;for _abbc ,_addd :=range _gdca .CT_Footnotes .Footnote {if _addd .IdAttr ==_daeb {_gccdg =_abbc ;
break ;};};_gdca .CT_Footnotes .Footnote [_gccdg ]=nil ;_gdca .CT_Footnotes .Footnote [_gccdg ]=_gdca .CT_Footnotes .Footnote [len (_gdca .CT_Footnotes .Footnote )-1];_gdca .CT_Footnotes .Footnote =_gdca .CT_Footnotes .Footnote [:len (_gdca .CT_Footnotes .Footnote )-1];
_ddad .reorderFootnote ();_ddad .syncFootnoteSettings ();};

// AddWatermarkPicture adds new watermark picture to document.
func (_bgad *Document )AddWatermarkPicture (imageRef _cc .ImageRef )WatermarkPicture {var _afbb []Header ;if _ebe ,_cgbf :=_bgad .BodySection ().GetHeader (_eg .ST_HdrFtrDefault );_cgbf {_afbb =append (_afbb ,_ebe );};if _efcg ,_cbff :=_bgad .BodySection ().GetHeader (_eg .ST_HdrFtrEven );
_cbff {_afbb =append (_afbb ,_efcg );};if _fbbg ,_edbf :=_bgad .BodySection ().GetHeader (_eg .ST_HdrFtrFirst );_edbf {_afbb =append (_afbb ,_fbbg );};if len (_afbb )< 1{_cedg :=_bgad .AddHeader ();_bgad .BodySection ().SetHeader (_cedg ,_eg .ST_HdrFtrDefault );
_afbb =append (_afbb ,_cedg );};var _dcfbd error ;_ffd :=NewWatermarkPicture ();for _ ,_ddbe :=range _afbb {imageRef ,_dcfbd =_ddbe .AddImageRef (imageRef );if _dcfbd !=nil {return WatermarkPicture {};};_gbgc :=_ddbe .Paragraphs ();if len (_gbgc )< 1{_dbae :=_ddbe .AddParagraph ();
_dbae .AddRun ().AddText ("");};for _ ,_cegf :=range _ddbe .X ().EG_ContentBlockContent {for _ ,_fbdf :=range _cegf .P {for _ ,_cgdd :=range _fbdf .EG_PContent {for _ ,_ccfg :=range _cgdd .EG_ContentRunContent {if _ccfg .R ==nil {continue ;};for _ ,_gfff :=range _ccfg .R .EG_RunInnerContent {_gfff .Pict =_ffd ._ecccfd ;
break ;};};};};};};_ffd .SetPicture (imageRef );return _ffd ;};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_fabd RunProperties )SetFontFamily (family string ){if _fabd ._afgg .RFonts ==nil {_fabd ._afgg .RFonts =_eg .NewCT_Fonts ();};_fabd ._afgg .RFonts .AsciiAttr =_ea .String (family );_fabd ._afgg .RFonts .HAnsiAttr =_ea .String (family );_fabd ._afgg .RFonts .EastAsiaAttr =_ea .String (family );
};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// InsertStyle insert style to styles.
func (_cbgf Styles )InsertStyle (ss Style ){_cbgf ._caeb .Style =append (_cbgf ._caeb .Style ,ss .X ())};

// SetLeft sets the left border to a specified type, color and thickness.
func (_fgb CellBorders )SetLeft (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_fgb ._ffb .Left =_eg .NewCT_Border ();_afec (_fgb ._ffb .Left ,t ,c ,thickness );};

// RemoveParagraph removes a paragraph from a document.
func (_eff *Document )RemoveParagraph (p Paragraph ){if _eff ._fdg .Body ==nil {return ;};for _ ,_fcbbf :=range _eff ._fdg .Body .EG_BlockLevelElts {for _ ,_cdbb :=range _fcbbf .EG_ContentBlockContent {for _egg ,_edc :=range _cdbb .P {if _edc ==p ._dgfaed {copy (_cdbb .P [_egg :],_cdbb .P [_egg +1:]);
_cdbb .P =_cdbb .P [0:len (_cdbb .P )-1];return ;};};if _cdbb .Sdt !=nil &&_cdbb .Sdt .SdtContent !=nil &&_cdbb .Sdt .SdtContent .P !=nil {for _cba ,_abed :=range _cdbb .Sdt .SdtContent .P {if _abed ==p ._dgfaed {copy (_cdbb .P [_cba :],_cdbb .P [_cba +1:]);
_cdbb .P =_cdbb .P [0:len (_cdbb .P )-1];return ;};};};};};for _ ,_cgb :=range _eff .Tables (){for _ ,_eabc :=range _cgb .Rows (){for _ ,_abee :=range _eabc .Cells (){for _ ,_ccc :=range _abee ._cb .EG_BlockLevelElts {for _ ,_caba :=range _ccc .EG_ContentBlockContent {for _ded ,_acce :=range _caba .P {if _acce ==p ._dgfaed {copy (_caba .P [_ded :],_caba .P [_ded +1:]);
_caba .P =_caba .P [0:len (_caba .P )-1];return ;};};};};};};};for _ ,_fcc :=range _eff .Headers (){_fcc .RemoveParagraph (p );};for _ ,_dddf :=range _eff .Footers (){_dddf .RemoveParagraph (p );};};

// SetStartIndent controls the start indentation.
func (_baaae ParagraphProperties )SetStartIndent (m _fd .Distance ){if _baaae ._fbba .Ind ==nil {_baaae ._fbba .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_baaae ._fbba .Ind .StartAttr =nil ;}else {_baaae ._fbba .Ind .StartAttr =&_eg .ST_SignedTwipsMeasure {};
_baaae ._fbba .Ind .StartAttr .Int64 =_ea .Int64 (int64 (m /_fd .Twips ));};};

// SetPageSizeAndOrientation sets the page size and orientation for a section.
func (_ffbfb Section )SetPageSizeAndOrientation (w ,h _fd .Distance ,orientation _eg .ST_PageOrientation ){if _ffbfb ._ccgbd .PgSz ==nil {_ffbfb ._ccgbd .PgSz =_eg .NewCT_PageSz ();};_ffbfb ._ccgbd .PgSz .OrientAttr =orientation ;if orientation ==_eg .ST_PageOrientationLandscape {_ffbfb ._ccgbd .PgSz .WAttr =&_cge .ST_TwipsMeasure {};
_ffbfb ._ccgbd .PgSz .WAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (h /_fd .Twips ));_ffbfb ._ccgbd .PgSz .HAttr =&_cge .ST_TwipsMeasure {};_ffbfb ._ccgbd .PgSz .HAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (w /_fd .Twips ));}else {_ffbfb ._ccgbd .PgSz .WAttr =&_cge .ST_TwipsMeasure {};
_ffbfb ._ccgbd .PgSz .WAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (w /_fd .Twips ));_ffbfb ._ccgbd .PgSz .HAttr =&_cge .ST_TwipsMeasure {};_ffbfb ._ccgbd .PgSz .HAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (h /_fd .Twips ));};};

// TOCOptions specify options for table of contents customization.
type TOCOptions struct{

//UseHyperlinks makes the table of contents entries hyperlinks.
UseHyperlinks bool ;

//OmitPageNumbers allows omitting page numbers from the table of contents.
OmitPageNumbers bool ;

//HeadingLevel uses paragraphs formatted with all of the specified range of built-in heading styles.
//"3-3" is to show only third heading level, for instance.
HeadingLevel string ;};

// FormFieldType is the type of the form field.
//
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// SetAlignment set alignment of paragraph.
func (_eabad Paragraph )SetAlignment (alignment _eg .ST_Jc ){_eabad .ensurePPr ();if _eabad ._dgfaed .PPr .Jc ==nil {_eabad ._dgfaed .PPr .Jc =_eg .NewCT_Jc ();};_eabad ._dgfaed .PPr .Jc .ValAttr =alignment ;};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_cdgdd ParagraphProperties )Style ()string {if _cdgdd ._fbba .PStyle !=nil {return _cdgdd ._fbba .PStyle .ValAttr ;};return "";};func (_aggg *Document )reorderEndnote (){_gcgg :=int64 (1);_bdgb :=map[int64 ]int64 {};for _ ,_abac :=range _aggg ._ccae .Endnote {switch _abac .TypeAttr {case _eg .ST_FtnEdnSeparator :_abac .IdAttr =-1;
break ;case _eg .ST_FtnEdnContinuationSeparator :_abac .IdAttr =0;break ;default:_bdgb [_abac .IdAttr ]=_gcgg ;_abac .IdAttr =_gcgg ;_gcgg ++;};};for _ ,_eaga :=range _aggg .Paragraphs (){for _ ,_adgb :=range _eaga .Runs (){if _cee ,_afda :=_adgb .IsEndnote ();
_cee {_adgb .X ().EG_RunInnerContent [0].EndnoteReference .IdAttr =_bdgb [_afda ];};};};};

// SearchStyleByName return style by its name.
func (_dgaf Styles )SearchStyleByName (name string )(Style ,bool ){for _ ,_fbbf :=range _dgaf ._caeb .Style {if _fbbf .Name !=nil {if _fbbf .Name .ValAttr ==name {return Style {_fbbf },true ;};};};return Style {},false ;};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_cfec ParagraphProperties )SetKeepWithNext (b bool ){if !b {_cfec ._fbba .KeepNext =nil ;}else {_cfec ._fbba .KeepNext =_eg .NewCT_OnOff ();};};

// SetColor sets the text color.
func (_gdeb RunProperties )SetColor (c _ec .Color ){_gdeb ._afgg .Color =_eg .NewCT_Color ();_gdeb ._afgg .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_ffgf *Document ;_fggc *_eg .CT_FtnEdn ;};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_caga ParagraphProperties )SetSpacing (before ,after _fd .Distance ){if _caga ._fbba .Spacing ==nil {_caga ._fbba .Spacing =_eg .NewCT_Spacing ();};_caga ._fbba .Spacing .BeforeAttr =&_cge .ST_TwipsMeasure {};_caga ._fbba .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (before /_fd .Twips ));
_caga ._fbba .Spacing .AfterAttr =&_cge .ST_TwipsMeasure {};_caga ._fbba .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (after /_fd .Twips ));};

// SetOutlineLevel sets the outline level of this style.
func (_dgcfc ParagraphStyleProperties )SetOutlineLevel (lvl int ){_dgcfc ._bgga .OutlineLvl =_eg .NewCT_DecimalNumber ();_dgcfc ._bgga .OutlineLvl .ValAttr =int64 (lvl );};

// Pict returns the pict object.
func (_aeefg *WatermarkPicture )Pict ()*_eg .CT_Picture {return _aeefg ._ecccfd };

// SetEffect sets a text effect on the run.
func (_ggc RunProperties )SetEffect (e _eg .ST_TextEffect ){if e ==_eg .ST_TextEffectUnset {_ggc ._afgg .Effect =nil ;}else {_ggc ._afgg .Effect =_eg .NewCT_TextEffect ();_ggc ._afgg .Effect .ValAttr =e ;};};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_ebcf TableProperties )TableLook ()TableLook {if _ebcf ._dbba .TblLook ==nil {_ebcf ._dbba .TblLook =_eg .NewCT_TblLook ();};return TableLook {_ebcf ._dbba .TblLook };};

// ParagraphStyles returns only the paragraph styles.
func (_fdaea Styles )ParagraphStyles ()[]Style {_fdfab :=[]Style {};for _ ,_gcda :=range _fdaea ._caeb .Style {if _gcda .TypeAttr !=_eg .ST_StyleTypeParagraph {continue ;};_fdfab =append (_fdfab ,Style {_gcda });};return _fdfab ;};

// SetPictureSize set watermark picture size with given width and height.
func (_ccgc *WatermarkPicture )SetPictureSize (width ,height int64 ){if _ccgc ._gcccgc !=nil {_cfacbc :=_ccgc .GetShapeStyle ();_cfacbc .SetWidth (float64 (width )*_fd .Point );_cfacbc .SetHeight (float64 (height )*_fd .Point );_ccgc .SetShapeStyle (_cfacbc );
};};

// AddTable adds a new table to the document body.
func (_dadf *Document )AddTable ()Table {_bdde :=_eg .NewEG_BlockLevelElts ();_dadf ._fdg .Body .EG_BlockLevelElts =append (_dadf ._fdg .Body .EG_BlockLevelElts ,_bdde );_eac :=_eg .NewEG_ContentBlockContent ();_bdde .EG_ContentBlockContent =append (_bdde .EG_ContentBlockContent ,_eac );
_bbcb :=_eg .NewCT_Tbl ();_eac .Tbl =append (_eac .Tbl ,_bbcb );return Table {_dadf ,_bbcb };};

// Name returns the name of the style if set.
func (_fbdb Style )Name ()string {if _fbdb ._adcgb .Name ==nil {return "";};return _fbdb ._adcgb .Name .ValAttr ;};

// GetText returns text in the watermark.
func (_ffeeb *WatermarkText )GetText ()string {_eaaee :=_ffeeb .getShape ();if _ffeeb ._gdegag !=nil {_ddbfg :=_ffeeb ._gdegag .EG_ShapeElements ;if len (_ddbfg )> 0&&_ddbfg [0].Textpath !=nil {return *_ddbfg [0].Textpath .StringAttr ;};}else {_caeg :=_ffeeb .findNode (_eaaee ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");
for _ ,_bddeb :=range _caeg .Attrs {if _bddeb .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{return _bddeb .Value ;};};};return "";};

// Bold returns true if paragraph font is bold.
func (_fdbge ParagraphProperties )Bold ()bool {_efcb :=_fdbge ._fbba .RPr ;return _fdc (_efcb .B )||_fdc (_efcb .BCs );};

// X returns the inner wrapped XML type.
func (_bgd *Document )X ()*_eg .Document {return _bgd ._fdg };const _dafab ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";


// X returns the inner wrapped XML type.
func (_cdbfb TableLook )X ()*_eg .CT_TblLook {return _cdbfb ._gegf };

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_bdcb ParagraphProperties )CharacterSpacingValue ()int64 {if _dcbgc :=_bdcb ._fbba .RPr .Spacing ;_dcbgc !=nil {_gffc :=_dcbgc .ValAttr ;if _gffc .Int64 !=nil {return *_gffc .Int64 ;};};return int64 (0);};func _aeaf (_bfbb *_eg .CT_P ,_ebffb map[string ]string ){for _ ,_bbbea :=range _bfbb .EG_PContent {for _ ,_cgaa :=range _bbbea .EG_ContentRunContent {if _cgaa .R !=nil {for _ ,_eefg :=range _cgaa .R .EG_RunInnerContent {_facc :=_eefg .Drawing ;
if _facc !=nil {for _ ,_eecf :=range _facc .Anchor {for _ ,_fcdbg :=range _eecf .Graphic .GraphicData .Any {switch _ccea :=_fcdbg .(type ){case *_ac .Pic :if _ccea .BlipFill !=nil &&_ccea .BlipFill .Blip !=nil {_gdef (_ccea .BlipFill .Blip ,_ebffb );};
default:};};};for _ ,_edfb :=range _facc .Inline {for _ ,_fefb :=range _edfb .Graphic .GraphicData .Any {switch _fcgb :=_fefb .(type ){case *_ac .Pic :if _fcgb .BlipFill !=nil &&_fcgb .BlipFill .Blip !=nil {_gdef (_fcgb .BlipFill .Blip ,_ebffb );};default:};
};};};};};};};};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_eg .NewStyles ()}};

// X returns the inner wrapped XML type.
func (_cegge InlineDrawing )X ()*_eg .WdInline {return _cegge ._dbfag };

// X returns the inner wrapped XML type.
func (_ecag Footnote )X ()*_eg .CT_FtnEdn {return _ecag ._fggc };

// Color controls the run or styles color.
type Color struct{_cce *_eg .CT_Color };func _dafdg (_dbbd *Document )map[int64 ]map[int64 ]int64 {_bagfe :=_dbbd .Paragraphs ();_gdcc :=make (map[int64 ]map[int64 ]int64 ,0);for _ ,_gae :=range _bagfe {_gcefa :=_ggbfe (_dbbd ,_gae );if _gcefa .NumberingLevel !=nil &&_gcefa .AbstractNumId !=nil {_decg :=*_gcefa .AbstractNumId ;
if _ ,_dfga :=_gdcc [_decg ];_dfga {if _cbga :=_gcefa .NumberingLevel .X ();_cbga !=nil {if _ ,_cfga :=_gdcc [_decg ][_cbga .IlvlAttr ];_cfga {_gdcc [_decg ][_cbga .IlvlAttr ]++;}else {_gdcc [_decg ][_cbga .IlvlAttr ]=1;};};}else {if _adbf :=_gcefa .NumberingLevel .X ();
_adbf !=nil {_gdcc [_decg ]=map[int64 ]int64 {_adbf .IlvlAttr :1};};};};};return _gdcc ;};

// AddParagraph adds a paragraph to the footnote.
func (_ggbcc Footnote )AddParagraph ()Paragraph {_ddcc :=_eg .NewEG_ContentBlockContent ();_gcgf :=len (_ggbcc ._fggc .EG_BlockLevelElts [0].EG_ContentBlockContent );_ggbcc ._fggc .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_ggbcc ._fggc .EG_BlockLevelElts [0].EG_ContentBlockContent ,_ddcc );
_gfbdf :=_eg .NewCT_P ();var _cfbf *_eg .CT_String ;if _gcgf !=0{_dagbe :=len (_ggbcc ._fggc .EG_BlockLevelElts [0].EG_ContentBlockContent [_gcgf -1].P );_cfbf =_ggbcc ._fggc .EG_BlockLevelElts [0].EG_ContentBlockContent [_gcgf -1].P [_dagbe -1].PPr .PStyle ;
}else {_cfbf =_eg .NewCT_String ();_cfbf .ValAttr =FootnoteTextStyleId ;};_ddcc .P =append (_ddcc .P ,_gfbdf );_fffg :=Paragraph {_ggbcc ._ffgf ,_gfbdf };_fffg ._dgfaed .PPr =_eg .NewCT_PPr ();_fffg ._dgfaed .PPr .PStyle =_cfbf ;_fffg ._dgfaed .PPr .RPr =_eg .NewCT_ParaRPr ();
return _fffg ;};func (_fcbaa Footnote )content ()[]*_eg .EG_ContentBlockContent {var _egab []*_eg .EG_ContentBlockContent ;for _ ,_acdff :=range _fcbaa ._fggc .EG_BlockLevelElts {_egab =append (_egab ,_acdff .EG_ContentBlockContent ...);};return _egab ;
};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_cfdf :=_eg .NewNumbering ();return Numbering {_cfdf }};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_cfg *Document )Validate ()error {if _cfg ==nil ||_cfg ._fdg ==nil {return _fg .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");
};for _ ,_gfab :=range []func ()error {_cfg .validateTableCells ,_cfg .validateBookmarks }{if _ccfe :=_gfab ();_ccfe !=nil {return _ccfe ;};};if _cdbg :=_cfg ._fdg .Validate ();_cdbg !=nil {return _cdbg ;};return nil ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_fdfeg Footer )AddImage (i _cc .Image )(_cc .ImageRef ,error ){var _gbbd _cc .Relationships ;for _afgb ,_cdaf :=range _fdfeg ._fdfe ._bfg {if _cdaf ==_fdfeg ._agef {_gbbd =_fdfeg ._fdfe ._fge [_afgb ];};};_cebb :=_cc .MakeImageRef (i ,&_fdfeg ._fdfe .DocBase ,_gbbd );
if i .Data ==nil &&i .Path ==""{return _cebb ,_fg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _cebb ,_fg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _cebb ,_fg .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_fdfeg ._fdfe .Images =append (_fdfeg ._fdfe .Images ,_cebb );
_edbge :=_aa .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_fdfeg ._fdfe .Images ),i .Format );_beaa :=_gbbd .AddRelationship (_edbge ,_ea .ImageType );_cebb .SetRelID (_beaa .X ().IdAttr );return _cebb ,nil ;
};

// X returns the inner wrapped XML type.
func (_bdefa Endnote )X ()*_eg .CT_FtnEdn {return _bdefa ._edgd };

// SetLayoutInCell sets the layoutInCell attribute of anchor.
func (_bb AnchoredDrawing )SetLayoutInCell (val bool ){_bb ._fdd .LayoutInCellAttr =val };

// IgnoreSpaceBetweenParagraphOfSameStyle sets contextual spacing.
func (_cgadg Paragraph )IgnoreSpaceBetweenParagraphOfSameStyle (){_cgadg .ensurePPr ();if _cgadg ._dgfaed .PPr .ContextualSpacing ==nil {_cgadg ._dgfaed .PPr .ContextualSpacing =_eg .NewCT_OnOff ();};_cgadg ._dgfaed .PPr .ContextualSpacing .ValAttr =&_cge .ST_OnOff {ST_OnOff1 :_cge .ST_OnOff1On };
};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_eadddb Style )TableConditionalFormatting (typ _eg .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_cggb :=range _eadddb ._adcgb .TblStylePr {if _cggb .TypeAttr ==typ {return TableConditionalFormatting {_cggb };};};_gfgg :=_eg .NewCT_TblStylePr ();
_gfgg .TypeAttr =typ ;_eadddb ._adcgb .TblStylePr =append (_eadddb ._adcgb .TblStylePr ,_gfgg );return TableConditionalFormatting {_gfgg };};

// SetAlignment sets the paragraph alignment
func (_fagbb NumberingLevel )SetAlignment (j _eg .ST_Jc ){if j ==_eg .ST_JcUnset {_fagbb ._ccga .LvlJc =nil ;}else {_fagbb ._ccga .LvlJc =_eg .NewCT_Jc ();_fagbb ._ccga .LvlJc .ValAttr =j ;};};

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_agbf *Document )Close ()error {if _agbf .TmpPath !=""{return _ead .RemoveAll (_agbf .TmpPath );};return nil ;};

// SetRightIndent controls right indent of paragraph.
func (_ggfaa Paragraph )SetRightIndent (m _fd .Distance ){_ggfaa .ensurePPr ();_cbcf :=_ggfaa ._dgfaed .PPr ;if _cbcf .Ind ==nil {_cbcf .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_cbcf .Ind .RightAttr =nil ;}else {_cbcf .Ind .RightAttr =&_eg .ST_SignedTwipsMeasure {};
_cbcf .Ind .RightAttr .Int64 =_ea .Int64 (int64 (m /_fd .Twips ));};};

// SetXOffset sets the X offset for an image relative to the origin.
func (_ba AnchoredDrawing )SetXOffset (x _fd .Distance ){_ba ._fdd .PositionH .Choice =&_eg .WdCT_PosHChoice {};_ba ._fdd .PositionH .Choice .PosOffset =_ea .Int32 (int32 (x /_fd .EMU ));};func _fbca ()*_af .Textpath {_ecad :=_af .NewTextpath ();_ecad .OnAttr =_cge .ST_TrueFalseTrue ;
_ecad .FitshapeAttr =_cge .ST_TrueFalseTrue ;return _ecad ;};

// X returns the inner wrapped XML type.
func (_deeag TableConditionalFormatting )X ()*_eg .CT_TblStylePr {return _deeag ._adbbg };

// Styles returns all styles.
func (_adae Styles )Styles ()[]Style {_febbg :=[]Style {};for _ ,_gaed :=range _adae ._caeb .Style {_febbg =append (_febbg ,Style {_gaed });};return _febbg ;};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_aafg RunProperties )SetCharacterSpacing (size _fd .Distance ){_aafg ._afgg .Spacing =_eg .NewCT_SignedTwipsMeasure ();_aafg ._afgg .Spacing .ValAttr .Int64 =_ea .Int64 (int64 (size /_fd .Twips ));};

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_gcafg Document )AddHyperlink (url string )_cc .Hyperlink {return _gcafg ._fbg .AddHyperlink (url )};func (_gfgbf Paragraph )addBeginFldChar (_gecgbg string )*_eg .CT_FFData {_dbce :=_gfgbf .addFldChar ();_dbce .FldCharTypeAttr =_eg .ST_FldCharTypeBegin ;
_dbce .FfData =_eg .NewCT_FFData ();_gecb :=_eg .NewCT_FFName ();_gecb .ValAttr =&_gecgbg ;_dbce .FfData .Name =[]*_eg .CT_FFName {_gecb };return _dbce .FfData ;};

// SetHangingIndent controls special indent of paragraph.
func (_abcgc Paragraph )SetHangingIndent (m _fd .Distance ){_abcgc .ensurePPr ();_ccbc :=_abcgc ._dgfaed .PPr ;if _ccbc .Ind ==nil {_ccbc .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_ccbc .Ind .HangingAttr =nil ;}else {_ccbc .Ind .HangingAttr =&_cge .ST_TwipsMeasure {};
_ccbc .Ind .HangingAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (m /_fd .Twips ));};};

// AddTabStop adds a tab stop to the paragraph.
func (_aaafg ParagraphStyleProperties )AddTabStop (position _fd .Distance ,justificaton _eg .ST_TabJc ,leader _eg .ST_TabTlc ){if _aaafg ._bgga .Tabs ==nil {_aaafg ._bgga .Tabs =_eg .NewCT_Tabs ();};_gedbd :=_eg .NewCT_TabStop ();_gedbd .LeaderAttr =leader ;
_gedbd .ValAttr =justificaton ;_gedbd .PosAttr .Int64 =_ea .Int64 (int64 (position /_fd .Twips ));_aaafg ._bgga .Tabs .Tab =append (_aaafg ._bgga .Tabs .Tab ,_gedbd );};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_faf CellBorders )SetInsideHorizontal (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_faf ._ffb .InsideH =_eg .NewCT_Border ();_afec (_faf ._ffb .InsideH ,t ,c ,thickness );};

// TableWidth controls width values in table settings.
type TableWidth struct{_adbc *_eg .CT_TblWidth };

// Strike returns true if run is striked.
func (_beaf RunProperties )Strike ()bool {return _fdc (_beaf ._afgg .Strike )};func _bcgaa ()*_af .Path {_ebdfa :=_af .NewPath ();_ebdfa .ExtrusionokAttr =_cge .ST_TrueFalseTrue ;_ebdfa .GradientshapeokAttr =_cge .ST_TrueFalseTrue ;_ebdfa .ConnecttypeAttr =_af .OfcST_ConnectTypeRect ;
return _ebdfa ;};

// PutNodeBefore put node to position before relativeTo.
func (_bdb *Document )PutNodeBefore (relativeTo ,node Node ){_bdb .putNode (relativeTo ,node ,true )};

// SetName sets the name of the style.
func (_fafe Style )SetName (name string ){_fafe ._adcgb .Name =_eg .NewCT_String ();_fafe ._adcgb .Name .ValAttr =name ;};

// SetTextWrapTopAndBottom sets the text wrap to top and bottom.
func (_eec AnchoredDrawing )SetTextWrapTopAndBottom (){_eec ._fdd .Choice =&_eg .WdEG_WrapTypeChoice {};_eec ._fdd .Choice .WrapTopAndBottom =_eg .NewWdCT_WrapTopBottom ();_eec ._fdd .LayoutInCellAttr =true ;_eec ._fdd .AllowOverlapAttr =true ;};

// Pict returns the pict object.
func (_debd *WatermarkText )Pict ()*_eg .CT_Picture {return _debd ._bgge };

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_bgea *Document )GetTargetByRelId (idAttr string )string {return _bgea ._fbg .GetTargetByRelId (idAttr );};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_ebbd Style )SetUISortOrder (order int ){_ebbd ._adcgb .UiPriority =_eg .NewCT_DecimalNumber ();_ebbd ._adcgb .UiPriority .ValAttr =int64 (order );};

// X returns the inner wrapped XML type.
func (_bfc Bookmark )X ()*_eg .CT_Bookmark {return _bfc ._feb };

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_gegf *_eg .CT_TblLook };func _acfd ()*_af .Path {_dbfagd :=_af .NewPath ();_dbfagd .TextpathokAttr =_cge .ST_TrueFalseTrue ;_dbfagd .ConnecttypeAttr =_af .OfcST_ConnectTypeCustom ;_gaeed :="\u0040\u0039\u002c0;\u0040\u0031\u0030\u002c\u0031\u0030\u0038\u0030\u0030;\u00401\u0031,\u00321\u0036\u0030\u0030\u003b\u0040\u0031\u0032\u002c\u0031\u0030\u0038\u0030\u0030";
_dbfagd .ConnectlocsAttr =&_gaeed ;_aecb :="\u0032\u0037\u0030,\u0031\u0038\u0030\u002c\u0039\u0030\u002c\u0030";_dbfagd .ConnectanglesAttr =&_aecb ;return _dbfagd ;};

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_cadd Paragraph )AddDropdownList (name string )FormField {_fccga :=_cadd .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_fccga ._dceed .DdList =_eg .NewCT_FFDDList ();return _fccga ;};

// FindNodeByStyleName return slice of node base on style name.
func (_abfce *Nodes )FindNodeByStyleName (styleName string )[]Node {_egfa :=[]Node {};for _ ,_cdge :=range _abfce ._gbeg {switch _abeedc :=_cdge ._cdee .(type ){case *Paragraph :if _abeedc !=nil {if _bbddd ,_ebbg :=_cdge ._cdbd .Styles .SearchStyleByName (styleName );
_ebbg {_gffd :=_abeedc .Style ();if _gffd ==_bbddd .StyleID (){_egfa =append (_egfa ,_cdge );};};};case *Table :if _abeedc !=nil {if _ddbf ,_dgdf :=_cdge ._cdbd .Styles .SearchStyleByName (styleName );_dgdf {_feab :=_abeedc .Style ();if _feab ==_ddbf .StyleID (){_egfa =append (_egfa ,_cdge );
};};};};_bfgbe :=Nodes {_gbeg :_cdge .Children };_egfa =append (_egfa ,_bfgbe .FindNodeByStyleName (styleName )...);};return _egfa ;};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_daaf ParagraphProperties )SetHeadingLevel (idx int ){_daaf .SetStyle (_aa .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _daaf ._fbba .NumPr ==nil {_daaf ._fbba .NumPr =_eg .NewCT_NumPr ();};_daaf ._fbba .NumPr .Ilvl =_eg .NewCT_DecimalNumber ();
_daaf ._fbba .NumPr .Ilvl .ValAttr =int64 (idx );};func _fccgd ()*_af .Textpath {_gccb :=_af .NewTextpath ();_efggc :="\u0066\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069l\u0079\u003a\u0022\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0022\u003b\u0066\u006f\u006e\u0074\u002d\u0073\u0069\u007a\u0065\u003a\u00366\u0070\u0074;\u0066\u006fn\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003a\u0062\u006f\u006c\u0064;f\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065:\u0069\u0074\u0061\u006c\u0069\u0063";
_gccb .StyleAttr =&_efggc ;_egegb :="\u0041\u0053\u0041\u0050";_gccb .StringAttr =&_egegb ;return _gccb ;};

// X returns the inner wrapped XML type.
func (_ebda TableWidth )X ()*_eg .CT_TblWidth {return _ebda ._adbc };

// X returns the inner wrapped XML type.
func (_efcd Paragraph )X ()*_eg .CT_P {return _efcd ._dgfaed };

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_aeeg *Document ;_fbba *_eg .CT_PPr ;};

// SetWrapPathStart sets wrapPath start value.
func (_daf AnchorDrawWrapOptions )SetWrapPathStart (coordinate *_ee .CT_Point2D ){_daf ._cca =coordinate ;};

// Paragraphs returns the paragraphs defined in a footnote.
func (_eadb Footnote )Paragraphs ()[]Paragraph {_eedc :=[]Paragraph {};for _ ,_feag :=range _eadb .content (){for _ ,_ggdb :=range _feag .P {_eedc =append (_eedc ,Paragraph {_eadb ._ffgf ,_ggdb });};};return _eedc ;};

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_bffdf TableLook )SetLastColumn (on bool ){if !on {_bffdf ._gegf .LastColumnAttr =&_cge .ST_OnOff {};_bffdf ._gegf .LastColumnAttr .ST_OnOff1 =_cge .ST_OnOff1Off ;}else {_bffdf ._gegf .LastColumnAttr =&_cge .ST_OnOff {};_bffdf ._gegf .LastColumnAttr .ST_OnOff1 =_cge .ST_OnOff1On ;
};};

// X returns the inner wrapped type
func (_cbb CellBorders )X ()*_eg .CT_TcBorders {return _cbb ._ffb };

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_gccg *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_adba :=range _gccg ._fbg .X ().Relationship {if _adba .IdAttr ==idAttr {return _adba .TargetAttr ;};};return "";};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_eeeae TableBorders )SetInsideHorizontal (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_eeeae ._caaacb .InsideH =_eg .NewCT_Border ();_afec (_eeeae ._caaacb .InsideH ,t ,c ,thickness );};

// Underline returns the type of paragraph underline.
func (_dbbc ParagraphProperties )Underline ()_eg .ST_Underline {if _gdda :=_dbbc ._fbba .RPr .U ;_gdda !=nil {return _gdda .ValAttr ;};return 0;};

// CellBorders are the borders for an individual
type CellBorders struct{_ffb *_eg .CT_TcBorders };

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_fdgf *Document )Copy ()(*Document ,error ){_dgdd :=_g .NewBuffer ([]byte {});_afef :=_fdgf .save (_dgdd ,_fdgf ._cdb );if _afef !=nil {return nil ,_afef ;};_cdgf :=_dgdd .Bytes ();_eacddc :=_g .NewReader (_cdgf );return _efa (_eacddc ,int64 (_eacddc .Len ()),_fdgf ._cdb );
};

// X returns the inner wrapped XML type.
func (_affb NumberingLevel )X ()*_eg .CT_Lvl {return _affb ._ccga };func (_fgec *Document )addFootnotes (){_fgec ._dc =_eg .NewFootnotes ();_fgec ._dc .CT_Footnotes =_eg .CT_Footnotes {};_fgec ._dc .Footnote =make ([]*_eg .CT_FtnEdn ,0);_fgec .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074n\u006f\u0074\u0065\u0073\u002b\u0078m\u006c");
_fgec ._fbg .AddRelationship ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c",_ea .FootNotesType );_cgff :=_fgec .Styles .AddStyle (FootnoteTextStyleId ,_eg .ST_StyleTypeParagraph ,false );_cgff .SetName ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_cgff .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_fece :=_cgff .ParagraphProperties ();_fece .X ().SuppressLineNumbers =&_eg .CT_OnOff {};_abcc :=_cgff .RunProperties ();_abcc .X ().Sz =&_eg .CT_HpsMeasure {ValAttr :_eg .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gege }};
_abcc .X ().SzCs =&_eg .CT_HpsMeasure {ValAttr :_eg .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gege }};_ffa :=_fgec .Styles .AddStyle (_ecgg ,_eg .ST_StyleTypeCharacter ,false );_ffa .SetName ("\u0046o\u006ft\u006e\u006f\u0074\u0065\u0020R\u0065\u0066e\u0072\u0065\u006e\u0063\u0065");
_gec :=_ffa .RunProperties ();_gec .X ().VertAlign =&_eg .CT_VerticalAlignRun {ValAttr :_cge .ST_VerticalAlignRunSuperscript };_fgec .addFootnoteSeparator ();};

// X returns the inner wrapped XML type.
func (_fga Color )X ()*_eg .CT_Color {return _fga ._cce };

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_gdgcf Run )IsEndnote ()(bool ,int64 ){if _gdgcf ._fdae .EG_RunInnerContent !=nil {if _gdgcf ._fdae .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_gdgcf ._fdae .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};


// SetFooter sets a section footer.
func (_dggfa Section )SetFooter (f Footer ,t _eg .ST_HdrFtr ){_afbe :=_eg .NewEG_HdrFtrReferences ();_dggfa ._ccgbd .EG_HdrFtrReferences =append (_dggfa ._ccgbd .EG_HdrFtrReferences ,_afbe );_afbe .FooterReference =_eg .NewCT_HdrFtrRef ();_afbe .FooterReference .TypeAttr =t ;
_egbd :=_dggfa ._bcbbe ._fbg .FindRIDForN (f .Index (),_ea .FooterType );if _egbd ==""{_gc .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");
};_afbe .FooterReference .IdAttr =_egbd ;};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_dceed *_eg .CT_FFData ;_dbede *_eg .EG_RunInnerContent ;};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_eaf AnchoredDrawing )SetYOffset (y _fd .Distance ){_eaf ._fdd .PositionV .Choice =&_eg .WdCT_PosVChoice {};_eaf ._fdd .PositionV .Choice .PosOffset =_ea .Int32 (int32 (y /_fd .EMU ));};

// SetRight sets the right border to a specified type, color and thickness.
func (_cbffee ParagraphBorders )SetRight (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_cbffee ._edef .Right =_eg .NewCT_Border ();_ggggd (_cbffee ._edef .Right ,t ,c ,thickness );};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_fffga RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_fffga ._afgg .Dstrike =nil ;}else {_fffga ._afgg .Dstrike =_eg .NewCT_OnOff ();};};func (_dfgb *Document )validateTableCells ()error {for _ ,_fab :=range _dfgb ._fdg .Body .EG_BlockLevelElts {for _ ,_fbgc :=range _fab .EG_ContentBlockContent {for _ ,_bbcc :=range _fbgc .Tbl {for _ ,_gbba :=range _bbcc .EG_ContentRowContent {for _ ,_abab :=range _gbba .Tr {_gcbbd :=false ;
for _ ,_acgb :=range _abab .EG_ContentCellContent {_dagc :=false ;for _ ,_fdfa :=range _acgb .Tc {_gcbbd =true ;for _ ,_ffcd :=range _fdfa .EG_BlockLevelElts {for _ ,_bebb :=range _ffcd .EG_ContentBlockContent {if len (_bebb .P )> 0{_dagc =true ;break ;
};};};};if !_dagc {return _fg .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_gcbbd {return _fg .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");
};};};};};};return nil ;};

// GetRightToLeft returns true if the run text is displayed from right to left.
func (_eecga RunProperties )GetRightToLeft ()bool {return _fdc (_eecga ._afgg .Rtl )};

// Section is the beginning of a new section.
type Section struct{_bcbbe *Document ;_ccgbd *_eg .CT_SectPr ;};

// SetBefore sets the spacing that comes before the paragraph.
func (_fffcf ParagraphSpacing )SetBefore (before _fd .Distance ){_fffcf ._aggbd .BeforeAttr =&_cge .ST_TwipsMeasure {};_fffcf ._aggbd .BeforeAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (before /_fd .Twips ));};func (_cggae Paragraph )addSeparateFldChar ()*_eg .CT_FldChar {_daefb :=_cggae .addFldChar ();
_daefb .FldCharTypeAttr =_eg .ST_FldCharTypeSeparate ;return _daefb ;};

// VerticalAlign returns the value of paragraph vertical align.
func (_gedb ParagraphProperties )VerticalAlignment ()_cge .ST_VerticalAlignRun {if _ffcg :=_gedb ._fbba .RPr .VertAlign ;_ffcg !=nil {return _ffcg .ValAttr ;};return 0;};

// SetCellSpacing sets the cell spacing within a table.
func (_gdbd TableProperties )SetCellSpacing (m _fd .Distance ){_gdbd ._dbba .TblCellSpacing =_eg .NewCT_TblWidth ();_gdbd ._dbba .TblCellSpacing .TypeAttr =_eg .ST_TblWidthDxa ;_gdbd ._dbba .TblCellSpacing .WAttr =&_eg .ST_MeasurementOrPercent {};_gdbd ._dbba .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};
_gdbd ._dbba .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (m /_fd .Dxa ));};

// Italic returns true if run font is italic.
func (_abbgd RunProperties )Italic ()bool {_gcfee :=_abbgd ._afgg ;return _fdc (_gcfee .I )||_fdc (_gcfee .ICs );};

// SetLeftPct sets the cell left margin
func (_cfd CellMargins )SetLeftPct (pct float64 ){_cfd ._gfba .Left =_eg .NewCT_TblWidth ();_fgc (_cfd ._gfba .Left ,pct );};

// X returns the inner wrapped XML type.
func (_cedd ParagraphStyleProperties )X ()*_eg .CT_PPrGeneral {return _cedd ._bgga };

// Borders allows manipulation of the table borders.
func (_bdefae TableStyleProperties )Borders ()TableBorders {if _bdefae ._deefc .TblBorders ==nil {_bdefae ._deefc .TblBorders =_eg .NewCT_TblBorders ();};return TableBorders {_bdefae ._deefc .TblBorders };};

// UnderlineColor returns the hex color value of run underline.
func (_fedad RunProperties )UnderlineColor ()string {if _abbb :=_fedad ._afgg .U ;_abbb !=nil {_cfbbd :=_abbb .ColorAttr ;if _cfbbd !=nil &&_cfbbd .ST_HexColorRGB !=nil {return *_cfbbd .ST_HexColorRGB ;};};return "";};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_bfgbed ParagraphSpacing )SetLineSpacing (d _fd .Distance ,rule _eg .ST_LineSpacingRule ){if rule ==_eg .ST_LineSpacingRuleUnset {_bfgbed ._aggbd .LineRuleAttr =_eg .ST_LineSpacingRuleUnset ;_bfgbed ._aggbd .LineAttr =nil ;}else {_bfgbed ._aggbd .LineRuleAttr =rule ;
_bfgbed ._aggbd .LineAttr =&_eg .ST_SignedTwipsMeasure {};_bfgbed ._aggbd .LineAttr .Int64 =_ea .Int64 (int64 (d /_fd .Twips ));};};

// Font returns the name of paragraph font family.
func (_gebgf ParagraphProperties )Font ()string {if _dacg :=_gebgf ._fbba .RPr .RFonts ;_dacg !=nil {if _dacg .AsciiAttr !=nil {return *_dacg .AsciiAttr ;}else if _dacg .HAnsiAttr !=nil {return *_dacg .HAnsiAttr ;}else if _dacg .CsAttr !=nil {return *_dacg .CsAttr ;
};};return "";};

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_aedb AnchoredDrawing )SetHAlignment (h _eg .WdST_AlignH ){_aedb ._fdd .PositionH .Choice =&_eg .WdCT_PosHChoice {};_aedb ._fdd .PositionH .Choice .Align =h ;};

// SetProperties sets the `RunProperties` to the `Run` element
func (_bcdfe Run )SetProperties (rp RunProperties ){if rp ._afgg ==nil {_bcdfe ._fdae .RPr =_eg .NewCT_RPr ();}else {_acdae :=&_eg .CT_RPr {};if rp ._afgg .RStyle !=nil {_acdae .RStyle =&_eg .CT_String {ValAttr :rp ._afgg .RStyle .ValAttr };};if rp ._afgg .RFonts !=nil {_acdae .RFonts =&_eg .CT_Fonts {HintAttr :rp ._afgg .RFonts .HintAttr ,AsciiAttr :rp ._afgg .RFonts .AsciiAttr ,HAnsiAttr :rp ._afgg .RFonts .HAnsiAttr ,EastAsiaAttr :rp ._afgg .RFonts .EastAsiaAttr ,CsAttr :rp ._afgg .RFonts .CsAttr ,AsciiThemeAttr :rp ._afgg .RFonts .AsciiThemeAttr ,HAnsiThemeAttr :rp ._afgg .RFonts .HAnsiThemeAttr ,EastAsiaThemeAttr :rp ._afgg .RFonts .EastAsiaThemeAttr ,CsthemeAttr :rp ._afgg .RFonts .CsthemeAttr };
};if rp ._afgg .B !=nil {_acdae .B =&_eg .CT_OnOff {};if rp ._afgg .B .ValAttr !=nil {_gecc :=*rp ._afgg .B .ValAttr ;_acdae .B .ValAttr =&_gecc ;};};if rp ._afgg .BCs !=nil {_acdae .BCs =&_eg .CT_OnOff {};if rp ._afgg .BCs .ValAttr !=nil {_cbea :=*rp ._afgg .BCs .ValAttr ;
_acdae .BCs .ValAttr =&_cbea ;};};if rp ._afgg .I !=nil {_acdae .I =&_eg .CT_OnOff {};if rp ._afgg .I .ValAttr !=nil {_gddcab :=*rp ._afgg .I .ValAttr ;_acdae .I .ValAttr =&_gddcab ;};};if rp ._afgg .ICs !=nil {_acdae .ICs =&_eg .CT_OnOff {};if rp ._afgg .ICs .ValAttr !=nil {_efgdg :=*rp ._afgg .ICs .ValAttr ;
_acdae .ICs .ValAttr =&_efgdg ;};};if rp ._afgg .Caps !=nil {_acdae .Caps =&_eg .CT_OnOff {};if rp ._afgg .Caps .ValAttr !=nil {_gdffg :=*rp ._afgg .Caps .ValAttr ;_acdae .Caps .ValAttr =&_gdffg ;};};if rp ._afgg .SmallCaps !=nil {_acdae .SmallCaps =&_eg .CT_OnOff {};
if rp ._afgg .SmallCaps .ValAttr !=nil {_agdd :=*rp ._afgg .SmallCaps .ValAttr ;_acdae .SmallCaps .ValAttr =&_agdd ;};};if rp ._afgg .Strike !=nil {_acdae .Strike =&_eg .CT_OnOff {};if rp ._afgg .Strike .ValAttr !=nil {_gbcf :=*rp ._afgg .Strike .ValAttr ;
_acdae .Strike .ValAttr =&_gbcf ;};};if rp ._afgg .Dstrike !=nil {_acdae .Dstrike =&_eg .CT_OnOff {};if rp ._afgg .Dstrike .ValAttr !=nil {_egcd :=*rp ._afgg .Dstrike .ValAttr ;_acdae .Dstrike .ValAttr =&_egcd ;};};if rp ._afgg .Outline !=nil {_acdae .Outline =&_eg .CT_OnOff {};
if rp ._afgg .Outline .ValAttr !=nil {_dbgaf :=*rp ._afgg .Outline .ValAttr ;_acdae .Outline .ValAttr =&_dbgaf ;};};if rp ._afgg .Shadow !=nil {_acdae .Shadow =&_eg .CT_OnOff {};if rp ._afgg .Shadow .ValAttr !=nil {_bcag :=*rp ._afgg .Shadow .ValAttr ;
_acdae .Shadow .ValAttr =&_bcag ;};};if rp ._afgg .Emboss !=nil {_acdae .Emboss =&_eg .CT_OnOff {};if rp ._afgg .Emboss .ValAttr !=nil {_aedc :=*rp ._afgg .Emboss .ValAttr ;_acdae .Emboss .ValAttr =&_aedc ;};};if rp ._afgg .Imprint !=nil {_acdae .Imprint =&_eg .CT_OnOff {};
if rp ._afgg .Imprint .ValAttr !=nil {_ageba :=*rp ._afgg .Imprint .ValAttr ;_acdae .Imprint .ValAttr =&_ageba ;};};if rp ._afgg .NoProof !=nil {_acdae .NoProof =&_eg .CT_OnOff {};if rp ._afgg .NoProof .ValAttr !=nil {_gaace :=*rp ._afgg .NoProof .ValAttr ;
_acdae .NoProof .ValAttr =&_gaace ;};};if rp ._afgg .SnapToGrid !=nil {_acdae .SnapToGrid =&_eg .CT_OnOff {};if rp ._afgg .SnapToGrid .ValAttr !=nil {_afbbb :=*rp ._afgg .SnapToGrid .ValAttr ;_acdae .SnapToGrid .ValAttr =&_afbbb ;};};if rp ._afgg .Vanish !=nil {_acdae .Vanish =&_eg .CT_OnOff {};
if rp ._afgg .Vanish .ValAttr !=nil {_eebf :=*rp ._afgg .Vanish .ValAttr ;_acdae .Vanish .ValAttr =&_eebf ;};};if rp ._afgg .WebHidden !=nil {_acdae .WebHidden =&_eg .CT_OnOff {};if rp ._afgg .WebHidden .ValAttr !=nil {_dgea :=*rp ._afgg .WebHidden .ValAttr ;
_acdae .WebHidden .ValAttr =&_dgea ;};};if rp ._afgg .Color !=nil {_acdae .Color =&_eg .CT_Color {ValAttr :rp ._afgg .Color .ValAttr ,ThemeColorAttr :rp ._afgg .Color .ThemeColorAttr ,ThemeTintAttr :rp ._afgg .Color .ThemeTintAttr ,ThemeShadeAttr :rp ._afgg .Color .ThemeShadeAttr };
};if rp ._afgg .Spacing !=nil {_acdae .Spacing =&_eg .CT_SignedTwipsMeasure {ValAttr :rp ._afgg .Spacing .ValAttr };};if rp ._afgg .W !=nil {_acdae .W =&_eg .CT_TextScale {ValAttr :rp ._afgg .W .ValAttr };};if rp ._afgg .Kern !=nil {_acdae .Kern =&_eg .CT_HpsMeasure {ValAttr :rp ._afgg .Kern .ValAttr };
};if rp ._afgg .Position !=nil {_acdae .Position =&_eg .CT_SignedHpsMeasure {ValAttr :rp ._afgg .Position .ValAttr };};if rp ._afgg .Sz !=nil {_acdae .Sz =&_eg .CT_HpsMeasure {ValAttr :rp ._afgg .Sz .ValAttr };};if rp ._afgg .SzCs !=nil {_acdae .SzCs =&_eg .CT_HpsMeasure {ValAttr :rp ._afgg .SzCs .ValAttr };
};if rp ._afgg .Highlight !=nil {_acdae .Highlight =&_eg .CT_Highlight {ValAttr :rp ._afgg .Highlight .ValAttr };};if rp ._afgg .U !=nil {_acdae .U =&_eg .CT_Underline {ValAttr :rp ._afgg .U .ValAttr ,ColorAttr :rp ._afgg .U .ColorAttr ,ThemeColorAttr :rp ._afgg .U .ThemeColorAttr ,ThemeTintAttr :rp ._afgg .U .ThemeTintAttr ,ThemeShadeAttr :rp ._afgg .U .ThemeShadeAttr };
};if rp ._afgg .Effect !=nil {_acdae .Effect =&_eg .CT_TextEffect {ValAttr :rp ._afgg .Effect .ValAttr };};if rp ._afgg .Bdr !=nil {_acdae .Bdr =&_eg .CT_Border {ValAttr :rp ._afgg .Bdr .ValAttr ,ColorAttr :rp ._afgg .Bdr .ColorAttr ,ThemeColorAttr :rp ._afgg .Bdr .ThemeColorAttr ,ThemeTintAttr :rp ._afgg .Bdr .ThemeTintAttr ,ThemeShadeAttr :rp ._afgg .Bdr .ThemeShadeAttr ,SzAttr :rp ._afgg .Bdr .SzAttr ,SpaceAttr :rp ._afgg .Bdr .SpaceAttr ,ShadowAttr :rp ._afgg .Bdr .ShadowAttr ,FrameAttr :rp ._afgg .Bdr .FrameAttr };
};if rp ._afgg .Shd !=nil {_acdae .Shd =&_eg .CT_Shd {ValAttr :rp ._afgg .Shd .ValAttr ,ColorAttr :rp ._afgg .Shd .ColorAttr ,ThemeColorAttr :rp ._afgg .Shd .ThemeColorAttr ,ThemeTintAttr :rp ._afgg .Shd .ThemeTintAttr ,ThemeShadeAttr :rp ._afgg .Shd .ThemeShadeAttr ,FillAttr :rp ._afgg .Shd .FillAttr ,ThemeFillAttr :rp ._afgg .Shd .ThemeFillAttr ,ThemeFillTintAttr :rp ._afgg .Shd .ThemeFillTintAttr ,ThemeFillShadeAttr :rp ._afgg .Shd .ThemeFillShadeAttr };
};if rp ._afgg .FitText !=nil {_acdae .FitText =&_eg .CT_FitText {ValAttr :rp ._afgg .FitText .ValAttr ,IdAttr :rp ._afgg .FitText .IdAttr };};if rp ._afgg .VertAlign !=nil {_acdae .VertAlign =&_eg .CT_VerticalAlignRun {ValAttr :rp ._afgg .VertAlign .ValAttr };
};if rp ._afgg .Rtl !=nil {_acdae .Rtl =&_eg .CT_OnOff {ValAttr :rp ._afgg .Rtl .ValAttr };};if rp ._afgg .Cs !=nil {_acdae .Cs =&_eg .CT_OnOff {ValAttr :rp ._afgg .Cs .ValAttr };};if rp ._afgg .Em !=nil {_acdae .Em =&_eg .CT_Em {ValAttr :rp ._afgg .Em .ValAttr };
};if rp ._afgg .Lang !=nil {_acdae .Lang =&_eg .CT_Language {ValAttr :rp ._afgg .Lang .ValAttr ,EastAsiaAttr :rp ._afgg .Lang .EastAsiaAttr ,BidiAttr :rp ._afgg .Lang .BidiAttr };};if rp ._afgg .EastAsianLayout !=nil {_acdae .EastAsianLayout =&_eg .CT_EastAsianLayout {IdAttr :rp ._afgg .EastAsianLayout .IdAttr ,CombineAttr :rp ._afgg .EastAsianLayout .CombineAttr ,CombineBracketsAttr :rp ._afgg .EastAsianLayout .CombineBracketsAttr ,VertAttr :rp ._afgg .EastAsianLayout .VertAttr ,VertCompressAttr :rp ._afgg .EastAsianLayout .VertCompressAttr };
};if rp ._afgg .SpecVanish !=nil {_acdae .SpecVanish =&_eg .CT_OnOff {ValAttr :rp ._afgg .SpecVanish .ValAttr };};if rp ._afgg .OMath !=nil {_acdae .OMath =&_eg .CT_OnOff {ValAttr :rp ._afgg .OMath .ValAttr };};_bcdfe ._fdae .RPr =_acdae ;};};

// SetAll sets all of the borders to a given value.
func (_cdad TableBorders )SetAll (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_cdad .SetBottom (t ,c ,thickness );_cdad .SetLeft (t ,c ,thickness );_cdad .SetRight (t ,c ,thickness );_cdad .SetTop (t ,c ,thickness );_cdad .SetInsideHorizontal (t ,c ,thickness );
_cdad .SetInsideVertical (t ,c ,thickness );};

// Endnotes returns the endnotes defined in the document.
func (_gab *Document )Endnotes ()[]Endnote {_gdcae :=[]Endnote {};for _ ,_gaae :=range _gab ._ccae .CT_Endnotes .Endnote {_gdcae =append (_gdcae ,Endnote {_gab ,_gaae });};return _gdcae ;};

// SetFirstLineIndent controls the first line indent of the paragraph.
func (_caaaa ParagraphStyleProperties )SetFirstLineIndent (m _fd .Distance ){if _caaaa ._bgga .Ind ==nil {_caaaa ._bgga .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_caaaa ._bgga .Ind .FirstLineAttr =nil ;}else {_caaaa ._bgga .Ind .FirstLineAttr =&_cge .ST_TwipsMeasure {};
_caaaa ._bgga .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (m /_fd .Twips ));};};func _ggbfe (_gccdf *Document ,_dgca Paragraph )listItemInfo {if _gccdf .Numbering .X ()==nil {return listItemInfo {};};if len (_gccdf .Numbering .Definitions ())< 1{return listItemInfo {};
};_dabc :=_dcfd (_dgca );if _dabc ==nil {return listItemInfo {};};_cacd :=_gccdf .GetNumberingLevelByIds (_dabc .NumId .ValAttr ,_dabc .Ilvl .ValAttr );if _cecfe :=_cacd .X ();_cecfe ==nil {return listItemInfo {};};_aagg :=int64 (0);for _ ,_eaff :=range _gccdf .Numbering ._bgfb .Num {if _eaff !=nil &&_eaff .NumIdAttr ==_dabc .NumId .ValAttr {_aagg =_eaff .AbstractNumId .ValAttr ;
};};return listItemInfo {FromParagraph :&_dgca ,AbstractNumId :&_aagg ,NumberingLevel :&_cacd };};

// SetRightPct sets the cell right margin
func (_bcd CellMargins )SetRightPct (pct float64 ){_bcd ._gfba .Right =_eg .NewCT_TblWidth ();_fgc (_bcd ._gfba .Right ,pct );};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_eg .NewCT_TblWidth ()}};

// SetWidthAuto sets the the table width to automatic.
func (_cccbfg TableProperties )SetWidthAuto (){_cccbfg ._dbba .TblW =_eg .NewCT_TblWidth ();_cccbfg ._dbba .TblW .TypeAttr =_eg .ST_TblWidthAuto ;};func _fdc (_cbffe *_eg .CT_OnOff )bool {return _cbffe !=nil };

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_eeab HyperLink )SetTargetBookmark (bm Bookmark ){_eeab ._gcae .AnchorAttr =_ea .String (bm .Name ());_eeab ._gcae .IdAttr =nil ;};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dfbgf ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_dfbgf ._fbba .KeepLines =nil ;}else {_dfbgf ._fbba .KeepLines =_eg .NewCT_OnOff ();};};

// DoubleStrike returns true if run is double striked.
func (_ecfc RunProperties )DoubleStrike ()bool {return _fdc (_ecfc ._afgg .Dstrike )};

// Properties returns the cell properties.
func (_bag Cell )Properties ()CellProperties {if _bag ._cb .TcPr ==nil {_bag ._cb .TcPr =_eg .NewCT_TcPr ();};return CellProperties {_bag ._cb .TcPr };};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_fdb *Document )AddFooter ()Footer {_gee :=_eg .NewFtr ();_fdb ._bfg =append (_fdb ._bfg ,_gee );_de :=_aa .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_fdb ._bfg ));_fdb ._fbg .AddRelationship (_de ,_ea .FooterType );
_fdb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_de ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_fdb ._fge =append (_fdb ._fge ,_cc .NewRelationships ());return Footer {_fdb ,_gee };};

// GetFooter gets a section Footer for given type
func (_egec Section )GetFooter (t _eg .ST_HdrFtr )(Footer ,bool ){for _ ,_gdcd :=range _egec ._ccgbd .EG_HdrFtrReferences {if _gdcd .FooterReference .TypeAttr ==t {for _ ,_aafc :=range _egec ._bcbbe .Footers (){_bddg :=_egec ._bcbbe ._fbg .FindRIDForN (_aafc .Index (),_ea .FooterType );
if _bddg ==_gdcd .FooterReference .IdAttr {return _aafc ,true ;};};};};return Footer {},false ;};

// InitializeDefault constructs the default styles.
func (_ccbfg Styles )InitializeDefault (){_ccbfg .initializeDocDefaults ();_ccbfg .initializeStyleDefaults ();};

// SetWrapPathLineTo sets wrapPath lineTo value.
func (_gcbb AnchorDrawWrapOptions )SetWrapPathLineTo (coordinates []*_ee .CT_Point2D ){_gcbb ._gcb =coordinates ;};

// SetAlignment controls the paragraph alignment
func (_beab ParagraphStyleProperties )SetAlignment (align _eg .ST_Jc ){if align ==_eg .ST_JcUnset {_beab ._bgga .Jc =nil ;}else {_beab ._bgga .Jc =_eg .NewCT_Jc ();_beab ._bgga .Jc .ValAttr =align ;};};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_ada *Document )Paragraphs ()[]Paragraph {_fgg :=[]Paragraph {};if _ada ._fdg .Body ==nil {return nil ;};for _ ,_ebad :=range _ada ._fdg .Body .EG_BlockLevelElts {for _ ,_ceac :=range _ebad .EG_ContentBlockContent {for _ ,_cccc :=range _ceac .P {_fgg =append (_fgg ,Paragraph {_ada ,_cccc });
};};};for _ ,_bbec :=range _ada .Tables (){for _ ,_eedb :=range _bbec .Rows (){for _ ,_afaf :=range _eedb .Cells (){_fgg =append (_fgg ,_afaf .Paragraphs ()...);};};};return _fgg ;};

// RunProperties returns the run style properties.
func (_bggc Style )RunProperties ()RunProperties {if _bggc ._adcgb .RPr ==nil {_bggc ._adcgb .RPr =_eg .NewCT_RPr ();};return RunProperties {_bggc ._adcgb .RPr };};

// DoubleStrike returns true if paragraph is double striked.
func (_fbde ParagraphProperties )DoubleStrike ()bool {return _fdc (_fbde ._fbba .RPr .Dstrike )};

// SetTop sets the top border to a specified type, color and thickness.
func (_dbd CellBorders )SetTop (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_dbd ._ffb .Top =_eg .NewCT_Border ();_afec (_dbd ._ffb .Top ,t ,c ,thickness );};

// X returns the inner wml.CT_PBdr
func (_efff ParagraphBorders )X ()*_eg .CT_PBdr {return _efff ._edef };

// SetAllowOverlapAttr sets the allowOverlap attribute of anchor.
func (_fc AnchoredDrawing )SetAllowOverlapAttr (val bool ){_fc ._fdd .AllowOverlapAttr =val };

// X returns the inner wml.CT_TblBorders
func (_bdce TableBorders )X ()*_eg .CT_TblBorders {return _bdce ._caaacb };

// Caps returns true if run font is capitalized.
func (_gfccc RunProperties )Caps ()bool {return _fdc (_gfccc ._afgg .Caps )};

// Control returns an *axcontrol.Control object contained in the run or the nil value in case of no controls.
func (_fbadc Run )Control ()*_fe .Control {if _dgeab :=_fbadc ._fdae .EG_RunInnerContent ;_dgeab !=nil {if _eeee :=_dgeab [0].Object ;_eeee !=nil {if _fdfb :=_eeee .Choice ;_fdfb !=nil {if _beaef :=_fdfb .Control ;_beaef !=nil {if _beaef .IdAttr !=nil {_fefgd :=_fbadc ._caecc .GetDocRelTargetByID (*_beaef .IdAttr );
for _ ,_beabb :=range _fbadc ._caecc ._cd {if _fefgd ==_beabb .TargetAttr {return _beabb ;};};};};};};};return nil ;};

// SetText sets the text to be used in bullet mode.
func (_abcdd NumberingLevel )SetText (t string ){if t ==""{_abcdd ._ccga .LvlText =nil ;}else {_abcdd ._ccga .LvlText =_eg .NewCT_LevelText ();_abcdd ._ccga .LvlText .ValAttr =_ea .String (t );};};

// Properties returns the numbering level paragraph properties.
func (_efga NumberingLevel )Properties ()ParagraphStyleProperties {if _efga ._ccga .PPr ==nil {_efga ._ccga .PPr =_eg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_efga ._ccga .PPr };};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_adfae RunProperties )BoldValue ()OnOffValue {return _ceff (_adfae ._afgg .B )};

// SetBasedOn sets the style that this style is based on.
func (_bfabc Style )SetBasedOn (name string ){if name ==""{_bfabc ._adcgb .BasedOn =nil ;}else {_bfabc ._adcgb .BasedOn =_eg .NewCT_String ();_bfabc ._adcgb .BasedOn .ValAttr =name ;};};

// X returns the inner wrapped XML type.
func (_ceed Table )X ()*_eg .CT_Tbl {return _ceed ._cfdb };

// SetBottomPct sets the cell bottom margin
func (_gea CellMargins )SetBottomPct (pct float64 ){_gea ._gfba .Bottom =_eg .NewCT_TblWidth ();_fgc (_gea ._gfba .Bottom ,pct );};

// Caps returns true if paragraph font is capitalized.
func (_ffacc ParagraphProperties )Caps ()bool {return _fdc (_ffacc ._fbba .RPr .Caps )};

// Cells returns the cells defined in the table.
func (_adccf Row )Cells ()[]Cell {_aefd :=[]Cell {};for _ ,_eacdc :=range _adccf ._ffcff .EG_ContentCellContent {for _ ,_dcbe :=range _eacdc .Tc {_aefd =append (_aefd ,Cell {_adccf ._cabca ,_dcbe });};if _eacdc .Sdt !=nil &&_eacdc .Sdt .SdtContent !=nil {for _ ,_aebg :=range _eacdc .Sdt .SdtContent .Tc {_aefd =append (_aefd ,Cell {_adccf ._cabca ,_aebg });
};};};return _aefd ;};

// Section return paragraph properties section value.
func (_beeg ParagraphProperties )Section ()(Section ,bool ){if _beeg ._fbba .SectPr !=nil {return Section {_beeg ._aeeg ,_beeg ._fbba .SectPr },true ;};return Section {},false ;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_dcfcg TableBorders )SetInsideVertical (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_dcfcg ._caaacb .InsideV =_eg .NewCT_Border ();_afec (_dcfcg ._caaacb .InsideV ,t ,c ,thickness );};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_eebb Run )AddDrawingInline (img _cc .ImageRef )(InlineDrawing ,error ){_acdag :=_eebb .newIC ();_acdag .Drawing =_eg .NewCT_Drawing ();_edgbb :=_eg .NewWdInline ();_fbbcd :=InlineDrawing {_eebb ._caecc ,_edgbb };_edgbb .CNvGraphicFramePr =_ee .NewCT_NonVisualGraphicFrameProperties ();
_acdag .Drawing .Inline =append (_acdag .Drawing .Inline ,_edgbb );_edgbb .Graphic =_ee .NewGraphic ();_edgbb .Graphic .GraphicData =_ee .NewCT_GraphicalObjectData ();_edgbb .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_edgbb .DistTAttr =_ea .Uint32 (0);_edgbb .DistLAttr =_ea .Uint32 (0);_edgbb .DistBAttr =_ea .Uint32 (0);_edgbb .DistRAttr =_ea .Uint32 (0);_edgbb .Extent .CxAttr =int64 (float64 (img .Size ().X *_fd .Pixel72 )/_fd .EMU );_edgbb .Extent .CyAttr =int64 (float64 (img .Size ().Y *_fd .Pixel72 )/_fd .EMU );
_afaa :=0x7FFFFFFF&_c .Uint32 ();_edgbb .DocPr .IdAttr =_afaa ;_becd :=_ac .NewPic ();_becd .NvPicPr .CNvPr .IdAttr =_afaa ;_ffcdf :=img .RelID ();if _ffcdf ==""{return _fbbcd ,_fg .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_edgbb .Graphic .GraphicData .Any =append (_edgbb .Graphic .GraphicData .Any ,_becd );_becd .BlipFill =_ee .NewCT_BlipFillProperties ();_becd .BlipFill .Blip =_ee .NewCT_Blip ();_becd .BlipFill .Blip .EmbedAttr =&_ffcdf ;_becd .BlipFill .Stretch =_ee .NewCT_StretchInfoProperties ();
_becd .BlipFill .Stretch .FillRect =_ee .NewCT_RelativeRect ();_becd .SpPr =_ee .NewCT_ShapeProperties ();_becd .SpPr .Xfrm =_ee .NewCT_Transform2D ();_becd .SpPr .Xfrm .Off =_ee .NewCT_Point2D ();_becd .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_ea .Int64 (0);
_becd .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_ea .Int64 (0);_becd .SpPr .Xfrm .Ext =_ee .NewCT_PositiveSize2D ();_becd .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_fd .Point );_becd .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_fd .Point );
_becd .SpPr .PrstGeom =_ee .NewCT_PresetGeometry2D ();_becd .SpPr .PrstGeom .PrstAttr =_ee .ST_ShapeTypeRect ;return _fbbcd ,nil ;};

// SetLineSpacing controls the line spacing of the paragraph.
func (_agebg ParagraphStyleProperties )SetLineSpacing (m _fd .Distance ,rule _eg .ST_LineSpacingRule ){if _agebg ._bgga .Spacing ==nil {_agebg ._bgga .Spacing =_eg .NewCT_Spacing ();};if rule ==_eg .ST_LineSpacingRuleUnset {_agebg ._bgga .Spacing .LineRuleAttr =_eg .ST_LineSpacingRuleUnset ;
_agebg ._bgga .Spacing .LineAttr =nil ;}else {_agebg ._bgga .Spacing .LineRuleAttr =rule ;_agebg ._bgga .Spacing .LineAttr =&_eg .ST_SignedTwipsMeasure {};_agebg ._bgga .Spacing .LineAttr .Int64 =_ea .Int64 (int64 (m /_fd .Twips ));};};

// SizeValue returns the value of paragraph font size in points.
func (_agbab ParagraphProperties )SizeValue ()float64 {if _adcefg :=_agbab ._fbba .RPr .Sz ;_adcefg !=nil {_gaaa :=_adcefg .ValAttr ;if _gaaa .ST_UnsignedDecimalNumber !=nil {return float64 (*_gaaa .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_cegcb ParagraphProperties )SetHangingIndent (m _fd .Distance ){if _cegcb ._fbba .Ind ==nil {_cegcb ._fbba .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_cegcb ._fbba .Ind .HangingAttr =nil ;}else {_cegcb ._fbba .Ind .HangingAttr =&_cge .ST_TwipsMeasure {};
_cegcb ._fbba .Ind .HangingAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (m /_fd .Twips ));};};func (_eegde *WatermarkPicture )findNode (_dfdc *_ea .XSDAny ,_gdgg string )*_ea .XSDAny {for _ ,_abdd :=range _dfdc .Nodes {if _abdd .XMLName .Local ==_gdgg {return _abdd ;
};};return nil ;};

// InsertRowAfter inserts a row after another row
func (_ebfc Table )InsertRowAfter (r Row )Row {for _ecbaa ,_defc :=range _ebfc ._cfdb .EG_ContentRowContent {if len (_defc .Tr )> 0&&r .X ()==_defc .Tr [0]{_cfbfd :=_eg .NewEG_ContentRowContent ();if len (_ebfc ._cfdb .EG_ContentRowContent )< _ecbaa +2{return _ebfc .AddRow ();
};_ebfc ._cfdb .EG_ContentRowContent =append (_ebfc ._cfdb .EG_ContentRowContent ,nil );copy (_ebfc ._cfdb .EG_ContentRowContent [_ecbaa +2:],_ebfc ._cfdb .EG_ContentRowContent [_ecbaa +1:]);_ebfc ._cfdb .EG_ContentRowContent [_ecbaa +1]=_cfbfd ;_cfba :=_eg .NewCT_Row ();
_cfbfd .Tr =append (_cfbfd .Tr ,_cfba );return Row {_ebfc ._caacb ,_cfba };};};return _ebfc .AddRow ();};

// Save writes the document to an io.Writer in the Zip package format.
func (_aeg *Document )Save (w _dfe .Writer )error {return _aeg .save (w ,_aeg ._cdb )};

// X returns the inner wrapped XML type.
func (_ag Cell )X ()*_eg .CT_Tc {return _ag ._cb };

// SetVAlignment sets the vertical alignment for an anchored image.
func (_afa AnchoredDrawing )SetVAlignment (v _eg .WdST_AlignV ){_afa ._fdd .PositionV .Choice =&_eg .WdCT_PosVChoice {};_afa ._fdd .PositionV .Choice .Align =v ;};

// SetItalic sets the run to italic.
func (_cfdg RunProperties )SetItalic (b bool ){if !b {_cfdg ._afgg .I =nil ;_cfdg ._afgg .ICs =nil ;}else {_cfdg ._afgg .I =_eg .NewCT_OnOff ();_cfdg ._afgg .ICs =_eg .NewCT_OnOff ();};};

// SetHeader sets a section header.
func (_cage Section )SetHeader (h Header ,t _eg .ST_HdrFtr ){_acabe :=_eg .NewEG_HdrFtrReferences ();_cage ._ccgbd .EG_HdrFtrReferences =append (_cage ._ccgbd .EG_HdrFtrReferences ,_acabe );_acabe .HeaderReference =_eg .NewCT_HdrFtrRef ();_acabe .HeaderReference .TypeAttr =t ;
_afca :=_cage ._bcbbe ._fbg .FindRIDForN (h .Index (),_ea .HeaderType );if _afca ==""{_gc .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");
};_acabe .HeaderReference .IdAttr =_afca ;};

// FindNodeByCondition return node based on condition function,
// if wholeElements is true, its will extract childs as next node elements.
func (_eedf *Nodes )FindNodeByCondition (f func (_dccc *Node )bool ,wholeElements bool )[]Node {_ecccb :=[]Node {};for _ ,_fgac :=range _eedf ._gbeg {if f (&_fgac ){_ecccb =append (_ecccb ,_fgac );};if wholeElements {_aecda :=Nodes {_gbeg :_fgac .Children };
_ecccb =append (_ecccb ,_aecda .FindNodeByCondition (f ,wholeElements )...);};};return _ecccb ;};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_eeec Run )IsFootnote ()(bool ,int64 ){if _eeec ._fdae .EG_RunInnerContent !=nil {if _eeec ._fdae .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_eeec ._fdae .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;};


// AddStyle adds a new empty style, if styleID is already exists, it will return the style.
func (_gdbea Styles )AddStyle (styleID string ,t _eg .ST_StyleType ,isDefault bool )Style {if _gbffg ,_bbdf :=_gdbea .SearchStyleById (styleID );_bbdf {return _gbffg ;};_agggb :=_eg .NewCT_Style ();_agggb .TypeAttr =t ;if isDefault {_agggb .DefaultAttr =&_cge .ST_OnOff {};
_agggb .DefaultAttr .Bool =_ea .Bool (isDefault );};_agggb .StyleIdAttr =_ea .String (styleID );_gdbea ._caeb .Style =append (_gdbea ._caeb .Style ,_agggb );return Style {_agggb };};

// GetShapeStyle returns string style of the shape in watermark and format it to ShapeStyle.
func (_beecef *WatermarkPicture )GetShapeStyle ()_gf .ShapeStyle {if _beecef ._gcccgc !=nil &&_beecef ._gcccgc .StyleAttr !=nil {return _gf .NewShapeStyle (*_beecef ._gcccgc .StyleAttr );};return _gf .NewShapeStyle ("");};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_eg .CT_Tbl ;Row *_eg .CT_Row ;Cell *_eg .CT_Tc ;RowIndex int ;ColIndex int ;};

// GetNumberingLevelByIds returns a NumberingLevel by its NumId and LevelId attributes
// or an empty one if not found.
func (_gede *Document )GetNumberingLevelByIds (numId ,levelId int64 )NumberingLevel {if _gede .Numbering ._bgfb ==nil {return NumberingLevel {};};for _ ,_cfgc :=range _gede .Numbering ._bgfb .Num {if _cfgc !=nil &&_cfgc .NumIdAttr ==numId {_gbff :=_cfgc .AbstractNumId .ValAttr ;
for _ ,_gcbc :=range _gede .Numbering ._bgfb .AbstractNum {if _gcbc .AbstractNumIdAttr ==_gbff {if _gcbc .NumStyleLink !=nil &&len (_gcbc .Lvl )==0{if _gdec ,_dafcg :=_gede .Styles .SearchStyleById (_gcbc .NumStyleLink .ValAttr );_dafcg {if _gdec .ParagraphProperties ().NumId ()> -1{return _gede .GetNumberingLevelByIds (_gdec .ParagraphProperties ().NumId (),levelId );
};};};for _ ,_eabac :=range _gcbc .Lvl {if _eabac .IlvlAttr ==levelId {return NumberingLevel {_eabac };};};};};};};return NumberingLevel {};};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_gdff Paragraph )AddHyperLink ()HyperLink {_eceb :=_eg .NewEG_PContent ();_gdff ._dgfaed .EG_PContent =append (_gdff ._dgfaed .EG_PContent ,_eceb );_eceb .Hyperlink =_eg .NewCT_Hyperlink ();return HyperLink {_gdff ._acbbe ,_eceb .Hyperlink };};func (_acdab Styles )initializeStyleDefaults (){_efef :=_acdab .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_eg .ST_StyleTypeParagraph ,true );
_efef .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_efef .SetPrimaryStyle (true );_effc :=_acdab .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_eg .ST_StyleTypeCharacter ,true );_effc .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");
_effc .SetUISortOrder (1);_effc .SetSemiHidden (true );_effc .SetUnhideWhenUsed (true );_gddf :=_acdab .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_eg .ST_StyleTypeCharacter ,false );_gddf .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");
_gddf .SetBasedOn (_effc .StyleID ());_gddf .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_gddf .SetUISortOrder (10);_gddf .RunProperties ().Fonts ().SetASCIITheme (_eg .ST_ThemeMajorAscii );_gddf .RunProperties ().Fonts ().SetEastAsiaTheme (_eg .ST_ThemeMajorEastAsia );
_gddf .RunProperties ().Fonts ().SetHANSITheme (_eg .ST_ThemeMajorHAnsi );_gddf .RunProperties ().Fonts ().SetCSTheme (_eg .ST_ThemeMajorBidi );_gddf .RunProperties ().SetSize (28*_fd .Point );_gddf .RunProperties ().SetKerning (14*_fd .Point );_gddf .RunProperties ().SetCharacterSpacing (-10*_fd .Twips );
_bcba :=_acdab .AddStyle ("\u0054\u0069\u0074l\u0065",_eg .ST_StyleTypeParagraph ,false );_bcba .SetName ("\u0054\u0069\u0074l\u0065");_bcba .SetBasedOn (_efef .StyleID ());_bcba .SetNextStyle (_efef .StyleID ());_bcba .SetLinkedStyle (_gddf .StyleID ());
_bcba .SetUISortOrder (10);_bcba .SetPrimaryStyle (true );_bcba .ParagraphProperties ().SetContextualSpacing (true );_bcba .RunProperties ().Fonts ().SetASCIITheme (_eg .ST_ThemeMajorAscii );_bcba .RunProperties ().Fonts ().SetEastAsiaTheme (_eg .ST_ThemeMajorEastAsia );
_bcba .RunProperties ().Fonts ().SetHANSITheme (_eg .ST_ThemeMajorHAnsi );_bcba .RunProperties ().Fonts ().SetCSTheme (_eg .ST_ThemeMajorBidi );_bcba .RunProperties ().SetSize (28*_fd .Point );_bcba .RunProperties ().SetKerning (14*_fd .Point );_bcba .RunProperties ().SetCharacterSpacing (-10*_fd .Twips );
_cfea :=_acdab .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_eg .ST_StyleTypeTable ,false );_cfea .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_cfea .SetUISortOrder (99);_cfea .SetSemiHidden (true );
_cfea .SetUnhideWhenUsed (true );_cfea .X ().TblPr =_eg .NewCT_TblPrBase ();_bacg :=NewTableWidth ();_cfea .X ().TblPr .TblInd =_bacg .X ();_bacg .SetValue (0*_fd .Dxa );_cfea .X ().TblPr .TblCellMar =_eg .NewCT_TblCellMar ();_bacg =NewTableWidth ();_cfea .X ().TblPr .TblCellMar .Top =_bacg .X ();
_bacg .SetValue (0*_fd .Dxa );_bacg =NewTableWidth ();_cfea .X ().TblPr .TblCellMar .Bottom =_bacg .X ();_bacg .SetValue (0*_fd .Dxa );_bacg =NewTableWidth ();_cfea .X ().TblPr .TblCellMar .Left =_bacg .X ();_bacg .SetValue (108*_fd .Dxa );_bacg =NewTableWidth ();
_cfea .X ().TblPr .TblCellMar .Right =_bacg .X ();_bacg .SetValue (108*_fd .Dxa );_begef :=_acdab .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_eg .ST_StyleTypeNumbering ,false );_begef .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");_begef .SetUISortOrder (1);
_begef .SetSemiHidden (true );_begef .SetUnhideWhenUsed (true );_gbdc :=[]_fd .Distance {16,13,12,11,11,11,11,11,11};_bcdb :=[]_fd .Distance {240,40,40,40,40,40,40,40,40};for _befeb :=0;_befeb < 9;_befeb ++{_fcaa :=_aa .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_befeb +1);
_gcefe :=_acdab .AddStyle (_fcaa +"\u0043\u0068\u0061\u0072",_eg .ST_StyleTypeCharacter ,false );_gcefe .SetName (_aa .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_befeb +1));_gcefe .SetBasedOn (_effc .StyleID ());
_gcefe .SetLinkedStyle (_fcaa );_gcefe .SetUISortOrder (9+_befeb );_gcefe .RunProperties ().SetSize (_gbdc [_befeb ]*_fd .Point );_cceag :=_acdab .AddStyle (_fcaa ,_eg .ST_StyleTypeParagraph ,false );_cceag .SetName (_aa .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_befeb +1));
_cceag .SetNextStyle (_efef .StyleID ());_cceag .SetLinkedStyle (_cceag .StyleID ());_cceag .SetUISortOrder (9+_befeb );_cceag .SetPrimaryStyle (true );_cceag .ParagraphProperties ().SetKeepNext (true );_cceag .ParagraphProperties ().SetSpacing (_bcdb [_befeb ]*_fd .Twips ,0);
_cceag .ParagraphProperties ().SetOutlineLevel (_befeb );_cceag .RunProperties ().SetSize (_gbdc [_befeb ]*_fd .Point );};};

// SetPictureWashout set washout to watermark picture.
func (_dcfce *WatermarkPicture )SetPictureWashout (isWashout bool ){if _dcfce ._gcccgc !=nil {_egfaa :=_dcfce ._gcccgc .EG_ShapeElements ;if len (_egfaa )> 0&&_egfaa [0].Imagedata !=nil {if isWashout {_ffeea :="\u0031\u0039\u0036\u0036\u0031\u0066";_dcegg :="\u0032\u0032\u0039\u0033\u0038\u0066";
_egfaa [0].Imagedata .GainAttr =&_ffeea ;_egfaa [0].Imagedata .BlacklevelAttr =&_dcegg ;};};};};

// Underline returns the type of run underline.
func (_cgfgd RunProperties )Underline ()_eg .ST_Underline {if _fabc :=_cgfgd ._afgg .U ;_fabc !=nil {return _fabc .ValAttr ;};return 0;};func (_ebdc Paragraph )addFldChar ()*_eg .CT_FldChar {_ecdg :=_ebdc .AddRun ();_ccacg :=_ecdg .X ();_fefe :=_eg .NewEG_RunInnerContent ();
_ffbgb :=_eg .NewCT_FldChar ();_fefe .FldChar =_ffbgb ;_ccacg .EG_RunInnerContent =append (_ccacg .EG_RunInnerContent ,_fefe );return _ffbgb ;};

// X return element of Node as interface, can be either *Paragraph, *Table and Run.
func (_ebaca *Node )X ()interface{}{return _ebaca ._cdee };

// Borders returns the ParagraphBorders for setting-up border on paragraph.
func (_gadae Paragraph )Borders ()ParagraphBorders {_gadae .ensurePPr ();if _gadae ._dgfaed .PPr .PBdr ==nil {_gadae ._dgfaed .PPr .PBdr =_eg .NewCT_PBdr ();};return ParagraphBorders {_gadae ._acbbe ,_gadae ._dgfaed .PPr .PBdr };};

// Runs returns all of the runs in a paragraph.
func (_fbffd Paragraph )Runs ()[]Run {_ggfa :=[]Run {};for _ ,_geea :=range _fbffd ._dgfaed .EG_PContent {if _geea .Hyperlink !=nil &&_geea .Hyperlink .EG_ContentRunContent !=nil {for _ ,_bgegb :=range _geea .Hyperlink .EG_ContentRunContent {if _bgegb .R !=nil {_ggfa =append (_ggfa ,Run {_fbffd ._acbbe ,_bgegb .R });
};};};for _ ,_aeafc :=range _geea .EG_ContentRunContent {if _aeafc .R !=nil {_ggfa =append (_ggfa ,Run {_fbffd ._acbbe ,_aeafc .R });};if _aeafc .Sdt !=nil &&_aeafc .Sdt .SdtContent !=nil {for _ ,_gaeg :=range _aeafc .Sdt .SdtContent .EG_ContentRunContent {if _gaeg .R !=nil {_ggfa =append (_ggfa ,Run {_fbffd ._acbbe ,_gaeg .R });
};};};};};return _ggfa ;};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the footnote ids would be reordered.
func (_aacf Paragraph )RemoveFootnote (id int64 ){for _ ,_baaa :=range _aacf .Runs (){if _cbbcc ,_feaee :=_baaa .IsFootnote ();_cbbcc {if _feaee ==id {_aacf .RemoveRun (_baaa );break ;};};};_aacf ._acbbe .removeFootnote (id );};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_adcef ParagraphProperties )CharacterSpacingMeasure ()string {if _agbb :=_adcef ._fbba .RPr .Spacing ;_agbb !=nil {_edea :=_agbb .ValAttr ;if _edea .ST_UniversalMeasure !=nil {return *_edea .ST_UniversalMeasure ;};};return "";};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_cfcec TableLook )SetLastRow (on bool ){if !on {_cfcec ._gegf .LastRowAttr =&_cge .ST_OnOff {};_cfcec ._gegf .LastRowAttr .ST_OnOff1 =_cge .ST_OnOff1Off ;}else {_cfcec ._gegf .LastRowAttr =&_cge .ST_OnOff {};_cfcec ._gegf .LastRowAttr .ST_OnOff1 =_cge .ST_OnOff1On ;
};};

// DocRels returns document relationship.
func (_gfc *Document )DocRels ()_cc .Relationships {return _gfc ._fbg };

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_bgf CellProperties )SetVerticalAlignment (align _eg .ST_VerticalJc ){if align ==_eg .ST_VerticalJcUnset {_bgf ._eed .VAlign =nil ;}else {_bgf ._eed .VAlign =_eg .NewCT_VerticalJc ();_bgf ._eed .VAlign .ValAttr =align ;};};

// X returns the inner wrapped XML type.
func (_eddge ParagraphProperties )X ()*_eg .CT_PPr {return _eddge ._fbba };

// ReplaceText replace the text inside node.
func (_eaab *Node )ReplaceText (oldText ,newText string ){switch _cbgea :=_eaab .X ().(type ){case *Paragraph :for _ ,_bdad :=range _cbgea .Runs (){for _ ,_cfde :=range _bdad ._fdae .EG_RunInnerContent {if _cfde .T !=nil {_addfg :=_cfde .T .Content ;_addfg =_df .ReplaceAll (_addfg ,oldText ,newText );
_cfde .T .Content =_addfg ;};};};};for _ ,_ecfe :=range _eaab .Children {_ecfe .ReplaceText (oldText ,newText );};};

// SetShadow sets the run to shadowed text.
func (_cdcg RunProperties )SetShadow (b bool ){if !b {_cdcg ._afgg .Shadow =nil ;}else {_cdcg ._afgg .Shadow =_eg .NewCT_OnOff ();};};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_deefc *_eg .CT_TblPrBase };

// SetStrikeThrough sets the run to strike-through.
func (_fcdda RunProperties )SetStrikeThrough (b bool ){if !b {_fcdda ._afgg .Strike =nil ;}else {_fcdda ._afgg .Strike =_eg .NewCT_OnOff ();};};

// SetStartIndent controls the start indent of the paragraph.
func (_cabb ParagraphStyleProperties )SetStartIndent (m _fd .Distance ){if _cabb ._bgga .Ind ==nil {_cabb ._bgga .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_cabb ._bgga .Ind .StartAttr =nil ;}else {_cabb ._bgga .Ind .StartAttr =&_eg .ST_SignedTwipsMeasure {};
_cabb ._bgga .Ind .StartAttr .Int64 =_ea .Int64 (int64 (m /_fd .Twips ));};};

// SetPrimaryStyle marks the style as a primary style.
func (_eaad Style )SetPrimaryStyle (b bool ){if b {_eaad ._adcgb .QFormat =_eg .NewCT_OnOff ();}else {_eaad ._adcgb .QFormat =nil ;};};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_gdafbg ParagraphSpacing )SetBeforeAuto (b bool ){if b {_gdafbg ._aggbd .BeforeAutospacingAttr =&_cge .ST_OnOff {};_gdafbg ._aggbd .BeforeAutospacingAttr .Bool =_ea .Bool (true );}else {_gdafbg ._aggbd .BeforeAutospacingAttr =nil ;};};

// SetLinkedStyle sets the style that this style is linked to.
func (_gcgff Style )SetLinkedStyle (name string ){if name ==""{_gcgff ._adcgb .Link =nil ;}else {_gcgff ._adcgb .Link =_eg .NewCT_String ();_gcgff ._adcgb .Link .ValAttr =name ;};};

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_befbd FormField )SetPossibleValues (values []string ){if _befbd ._dceed .DdList !=nil {for _ ,_gfcc :=range values {_cfcag :=_eg .NewCT_String ();_cfcag .ValAttr =_gfcc ;_befbd ._dceed .DdList .ListEntry =append (_befbd ._dceed .DdList .ListEntry ,_cfcag );
};};};

// InitializeDefault constructs a default numbering.
func (_cgfe Numbering )InitializeDefault (){_dbgdf :=_eg .NewCT_AbstractNum ();_dbgdf .MultiLevelType =_eg .NewCT_MultiLevelType ();_dbgdf .MultiLevelType .ValAttr =_eg .ST_MultiLevelTypeHybridMultilevel ;_cgfe ._bgfb .AbstractNum =append (_cgfe ._bgfb .AbstractNum ,_dbgdf );
_dbgdf .AbstractNumIdAttr =1;const _ageb =720;const _cefb =720;const _cabcc =360;for _cafg :=0;_cafg < 9;_cafg ++{_afcgf :=_eg .NewCT_Lvl ();_afcgf .IlvlAttr =int64 (_cafg );_afcgf .Start =_eg .NewCT_DecimalNumber ();_afcgf .Start .ValAttr =1;_afcgf .NumFmt =_eg .NewCT_NumFmt ();
_afcgf .NumFmt .ValAttr =_eg .ST_NumberFormatBullet ;_afcgf .Suff =_eg .NewCT_LevelSuffix ();_afcgf .Suff .ValAttr =_eg .ST_LevelSuffixNothing ;_afcgf .LvlText =_eg .NewCT_LevelText ();_afcgf .LvlText .ValAttr =_ea .String ("\uf0b7");_afcgf .LvlJc =_eg .NewCT_Jc ();
_afcgf .LvlJc .ValAttr =_eg .ST_JcLeft ;_afcgf .RPr =_eg .NewCT_RPr ();_afcgf .RPr .RFonts =_eg .NewCT_Fonts ();_afcgf .RPr .RFonts .AsciiAttr =_ea .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_afcgf .RPr .RFonts .HAnsiAttr =_ea .String ("\u0053\u0079\u006d\u0062\u006f\u006c");
_afcgf .RPr .RFonts .HintAttr =_eg .ST_HintDefault ;_afcgf .PPr =_eg .NewCT_PPrGeneral ();_edgg :=int64 (_cafg *_cefb +_ageb );_afcgf .PPr .Ind =_eg .NewCT_Ind ();_afcgf .PPr .Ind .LeftAttr =&_eg .ST_SignedTwipsMeasure {};_afcgf .PPr .Ind .LeftAttr .Int64 =_ea .Int64 (_edgg );
_afcgf .PPr .Ind .HangingAttr =&_cge .ST_TwipsMeasure {};_afcgf .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (_cabcc ));_dbgdf .Lvl =append (_dbgdf .Lvl ,_afcgf );};_bfeef :=_eg .NewCT_Num ();_bfeef .NumIdAttr =1;_bfeef .AbstractNumId =_eg .NewCT_DecimalNumber ();
_bfeef .AbstractNumId .ValAttr =1;_cgfe ._bgfb .Num =append (_cgfe ._bgfb .Num ,_bfeef );};

// SetEndIndent controls the end indentation.
func (_defg ParagraphProperties )SetEndIndent (m _fd .Distance ){if _defg ._fbba .Ind ==nil {_defg ._fbba .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_defg ._fbba .Ind .EndAttr =nil ;}else {_defg ._fbba .Ind .EndAttr =&_eg .ST_SignedTwipsMeasure {};_defg ._fbba .Ind .EndAttr .Int64 =_ea .Int64 (int64 (m /_fd .Twips ));
};};func _fgc (_beg *_eg .CT_TblWidth ,_abb float64 ){_beg .TypeAttr =_eg .ST_TblWidthPct ;_beg .WAttr =&_eg .ST_MeasurementOrPercent {};_beg .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_beg .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (_abb *50));
};

// SetPicture sets the watermark picture.
func (_dcac *WatermarkPicture )SetPicture (imageRef _cc .ImageRef ){_dfdcg :=imageRef .RelID ();_aeabf :=_dcac .getShape ();if _dcac ._gcccgc !=nil {_egdf :=_dcac ._gcccgc .EG_ShapeElements ;if len (_egdf )> 0&&_egdf [0].Imagedata !=nil {_egdf [0].Imagedata .IdAttr =&_dfdcg ;
};}else {_afab :=_dcac .findNode (_aeabf ,"\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");for _eege ,_dbcc :=range _afab .Attrs {if _dbcc .Name .Local =="\u0069\u0064"{_afab .Attrs [_eege ].Value =_dfdcg ;};};};};

// SetTextWrapTight sets the text wrap to tight with a give wrap type.
func (_cgeg AnchoredDrawing )SetTextWrapTight (option *AnchorDrawWrapOptions ){_cgeg ._fdd .Choice =&_eg .WdEG_WrapTypeChoice {};_cgeg ._fdd .Choice .WrapTight =_eg .NewWdCT_WrapTight ();_cgeg ._fdd .Choice .WrapTight .WrapTextAttr =_eg .WdST_WrapTextBothSides ;
_gfb :=false ;_cgeg ._fdd .Choice .WrapTight .WrapPolygon .EditedAttr =&_gfb ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_cgeg ._fdd .Choice .WrapTight .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_cgeg ._fdd .Choice .WrapTight .WrapPolygon .Start =option .GetWrapPathStart ();
_cgeg ._fdd .LayoutInCellAttr =true ;_cgeg ._fdd .AllowOverlapAttr =true ;};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_bfaa ParagraphBorders )SetBottom (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_bfaa ._edef .Bottom =_eg .NewCT_Border ();_ggggd (_bfaa ._edef .Bottom ,t ,c ,thickness );};

// RunProperties controls run styling properties.
type RunProperties struct{_afgg *_eg .CT_RPr };

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_fec AnchoredDrawing )SetTextWrapSquare (t _eg .WdST_WrapText ){_fec ._fdd .Choice =&_eg .WdEG_WrapTypeChoice {};_fec ._fdd .Choice .WrapSquare =_eg .NewWdCT_WrapSquare ();_fec ._fdd .Choice .WrapSquare .WrapTextAttr =t ;};

// SetTextWrapBehindText sets the text wrap to behind text.
func (_cf AnchoredDrawing )SetTextWrapBehindText (){_cf ._fdd .Choice =&_eg .WdEG_WrapTypeChoice {};_cf ._fdd .Choice .WrapNone =_eg .NewWdCT_WrapNone ();_cf ._fdd .BehindDocAttr =true ;_cf ._fdd .LayoutInCellAttr =true ;_cf ._fdd .AllowOverlapAttr =true ;
};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_afc Bookmark )SetName (name string ){_afc ._feb .NameAttr =name };

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_deaa Section )GetHeader (t _eg .ST_HdrFtr )(Header ,bool ){for _ ,_efcgd :=range _deaa ._ccgbd .EG_HdrFtrReferences {if _efcgd .HeaderReference .TypeAttr ==t {for _ ,_ffbd :=range _deaa ._bcbbe .Headers (){_bedb :=_deaa ._bcbbe ._fbg .FindRIDForN (_ffbd .Index (),_ea .HeaderType );
if _bedb ==_efcgd .HeaderReference .IdAttr {return _ffbd ,true ;};};};};return Header {},false ;};

// Restart restarts the numbering
func (_gfgf *Numbering )Restart (nd *NumberingDefinition ){_edcb :=nd ._ddacb .Lvl ;_bcgga :=_gfgf .AddDefinition ();nd ._ddacb =_bcgga ._ddacb ;nd ._ddacb .Lvl =_edcb ;};

// X returns the inner wrapped XML type.
func (_aegbad TableProperties )X ()*_eg .CT_TblPr {return _aegbad ._dbba };

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_feb *_eg .CT_Bookmark };

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_dfcg CellProperties )SetColumnSpan (cols int ){if cols ==0{_dfcg ._eed .GridSpan =nil ;}else {_dfcg ._eed .GridSpan =_eg .NewCT_DecimalNumber ();_dfcg ._eed .GridSpan .ValAttr =int64 (cols );};};

// Type returns the type of the field.
func (_gbgad FormField )Type ()FormFieldType {if _gbgad ._dceed .TextInput !=nil {return FormFieldTypeText ;}else if _gbgad ._dceed .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _gbgad ._dceed .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;
};

// Clear clears the styes.
func (_bfgc Styles )Clear (){_bfgc ._caeb .DocDefaults =nil ;_bfgc ._caeb .LatentStyles =nil ;_bfgc ._caeb .Style =nil ;};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_afdbf *Document )FormFields ()[]FormField {_agc :=[]FormField {};for _ ,_babde :=range _afdbf .Paragraphs (){_fefg :=_babde .Runs ();for _cabc ,_fea :=range _fefg {for _ ,_bcgc :=range _fea ._fdae .EG_RunInnerContent {if _bcgc .FldChar ==nil ||_bcgc .FldChar .FfData ==nil {continue ;
};if _bcgc .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeBegin {if len (_bcgc .FldChar .FfData .Name )==0||_bcgc .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_afbg :=FormField {_dceed :_bcgc .FldChar .FfData };if _bcgc .FldChar .FfData .TextInput !=nil {for _bagfa :=_cabc +1;
_bagfa < len (_fefg )-1;_bagfa ++{if len (_fefg [_bagfa ]._fdae .EG_RunInnerContent )==0{continue ;};_acb :=_fefg [_bagfa ]._fdae .EG_RunInnerContent [0];if _acb .FldChar !=nil &&_acb .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeSeparate {if len (_fefg [_bagfa +1]._fdae .EG_RunInnerContent )==0{continue ;
};if _fefg [_bagfa +1]._fdae .EG_RunInnerContent [0].FldChar ==nil {_afbg ._dbede =_fefg [_bagfa +1]._fdae .EG_RunInnerContent [0];break ;};};};};_agc =append (_agc ,_afbg );};};};};for _ ,_feee :=range _afdbf .Headers (){for _ ,_gdg :=range _feee .Paragraphs (){_acgae :=_gdg .Runs ();
for _cadg ,_dgfa :=range _acgae {for _ ,_aade :=range _dgfa ._fdae .EG_RunInnerContent {if _aade .FldChar ==nil ||_aade .FldChar .FfData ==nil {continue ;};if _aade .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeBegin {if len (_aade .FldChar .FfData .Name )==0||_aade .FldChar .FfData .Name [0].ValAttr ==nil {continue ;
};_acf :=FormField {_dceed :_aade .FldChar .FfData };if _aade .FldChar .FfData .TextInput !=nil {for _fbbc :=_cadg +1;_fbbc < len (_acgae )-1;_fbbc ++{if len (_acgae [_fbbc ]._fdae .EG_RunInnerContent )==0{continue ;};_beec :=_acgae [_fbbc ]._fdae .EG_RunInnerContent [0];
if _beec .FldChar !=nil &&_beec .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeSeparate {if len (_acgae [_fbbc +1]._fdae .EG_RunInnerContent )==0{continue ;};if _acgae [_fbbc +1]._fdae .EG_RunInnerContent [0].FldChar ==nil {_acf ._dbede =_acgae [_fbbc +1]._fdae .EG_RunInnerContent [0];
break ;};};};};_agc =append (_agc ,_acf );};};};};};for _ ,_bccg :=range _afdbf .Footers (){for _ ,_gfg :=range _bccg .Paragraphs (){_bfe :=_gfg .Runs ();for _fcfe ,_gag :=range _bfe {for _ ,_cgag :=range _gag ._fdae .EG_RunInnerContent {if _cgag .FldChar ==nil ||_cgag .FldChar .FfData ==nil {continue ;
};if _cgag .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeBegin {if len (_cgag .FldChar .FfData .Name )==0||_cgag .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_faa :=FormField {_dceed :_cgag .FldChar .FfData };if _cgag .FldChar .FfData .TextInput !=nil {for _bbbe :=_fcfe +1;
_bbbe < len (_bfe )-1;_bbbe ++{if len (_bfe [_bbbe ]._fdae .EG_RunInnerContent )==0{continue ;};_ccgf :=_bfe [_bbbe ]._fdae .EG_RunInnerContent [0];if _ccgf .FldChar !=nil &&_ccgf .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeSeparate {if len (_bfe [_bbbe +1]._fdae .EG_RunInnerContent )==0{continue ;
};if _bfe [_bbbe +1]._fdae .EG_RunInnerContent [0].FldChar ==nil {_faa ._dbede =_bfe [_bbbe +1]._fdae .EG_RunInnerContent [0];break ;};};};};_agc =append (_agc ,_faa );};};};};};return _agc ;};

// PutNodeAfter put node to position after relativeTo.
func (_edff *Document )PutNodeAfter (relativeTo ,node Node ){_edff .putNode (relativeTo ,node ,false )};func (_dddg *Document )addFootnoteSeparator (){_fffd :=_eg .NewCT_FtnEdn ();_fffd .IdAttr =-1;_fffd .TypeAttr =_eg .ST_FtnEdnSeparator ;_aedec :=Footnote {_dddg ,_fffd };
_aedec .X ().EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};_bcdfg :=_aedec .AddParagraph ();_bcdfg .X ().PPr =nil ;_aaca :=_bcdfg .AddRun ();_gad :=_aaca .newIC ();_gad .Separator =_eg .NewCT_Empty ();_dddg ._dc .CT_Footnotes .Footnote =append (_dddg ._dc .CT_Footnotes .Footnote ,_fffd );
_fffd =_eg .NewCT_FtnEdn ();_fffd .IdAttr =0;_fffd .TypeAttr =_eg .ST_FtnEdnContinuationSeparator ;_aedec =Footnote {_dddg ,_fffd };_aedec .X ().EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};_bcdfg =_aedec .AddParagraph ();
_bcdfg .X ().PPr =nil ;_aaca =_bcdfg .AddRun ();_gad =_aaca .newIC ();_gad .ContinuationSeparator =_eg .NewCT_Empty ();_dddg ._dc .CT_Footnotes .Footnote =append (_dddg ._dc .CT_Footnotes .Footnote ,_fffd );};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_ddacb *_eg .CT_AbstractNum };

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_gbbg *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _gbbg .insertParagraph (relativeTo ,true );};

// SearchStylesById returns style by its id.
func (_cdbea Styles )SearchStyleById (id string )(Style ,bool ){for _ ,_aabb :=range _cdbea ._caeb .Style {if _aabb .StyleIdAttr !=nil {if *_aabb .StyleIdAttr ==id {return Style {_aabb },true ;};};};return Style {},false ;};

// NumId return numbering numId that being use by style properties.
func (_dbge ParagraphStyleProperties )NumId ()int64 {if _dbge ._bgga .NumPr !=nil {if _dbge ._bgga .NumPr .NumId !=nil {return _dbge ._bgga .NumPr .NumId .ValAttr ;};};return -1;};

// X returns the inner wrapped XML type.
func (_aae CellProperties )X ()*_eg .CT_TcPr {return _aae ._eed };

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_caeb *_eg .Styles };func (_aacd *Document )onNewRelationship (_bbgc *_dg .DecodeMap ,_adgd ,_cbbcb string ,_cege []*_bec .File ,_bfcab *_gca .Relationship ,_cbbe _dg .Target )error {_fegd :=_ea .DocTypeDocument ;switch _cbbcb {case _ea .OfficeDocumentType ,_ea .OfficeDocumentTypeStrict :_aacd ._fdg =_eg .NewDocument ();
_bbgc .AddTarget (_adgd ,_aacd ._fdg ,_cbbcb ,0);_bbgc .AddTarget (_dg .RelationsPathFor (_adgd ),_aacd ._fbg .X (),_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .CorePropertiesType :_bbgc .AddTarget (_adgd ,_aacd .CoreProperties .X (),_cbbcb ,0);
_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .CorePropertiesAltType :_bbgc .AddTarget (_adgd ,_aacd .CoreProperties .X (),_ea .CorePropertiesType ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_ea .CorePropertiesType ,0);
case _ea .CustomPropertiesType :_bbgc .AddTarget (_adgd ,_aacd .CustomProperties .X (),_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .ExtendedPropertiesType ,_ea .ExtendedPropertiesTypeStrict :_bbgc .AddTarget (_adgd ,_aacd .AppProperties .X (),_cbbcb ,0);
_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .ThumbnailType ,_ea .ThumbnailTypeStrict :for _bff ,_edgc :=range _cege {if _edgc ==nil {continue ;};if _edgc .Name ==_adgd {_cgcf ,_ggfd :=_edgc .Open ();if _ggfd !=nil {return _aa .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_ggfd );
};_aacd .Thumbnail ,_ ,_ggfd =_be .Decode (_cgcf );_cgcf .Close ();if _ggfd !=nil {return _aa .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_ggfd );
};_cege [_bff ]=nil ;};};case _ea .SettingsType ,_ea .SettingsTypeStrict :_bbgc .AddTarget (_adgd ,_aacd .Settings .X (),_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .NumberingType ,_ea .NumberingTypeStrict :_aacd .Numbering =NewNumbering ();
_bbgc .AddTarget (_adgd ,_aacd .Numbering .X (),_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .StylesType ,_ea .StylesTypeStrict :_aacd .Styles .Clear ();_bbgc .AddTarget (_adgd ,_aacd .Styles .X (),_cbbcb ,0);
_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .HeaderType ,_ea .HeaderTypeStrict :_bfge :=_eg .NewHdr ();_bbgc .AddTarget (_adgd ,_bfge ,_cbbcb ,uint32 (len (_aacd ._bebe )));_aacd ._bebe =append (_aacd ._bebe ,_bfge );
_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,len (_aacd ._bebe ));_eceg :=_cc .NewRelationships ();_bbgc .AddTarget (_dg .RelationsPathFor (_adgd ),_eceg .X (),_cbbcb ,0);_aacd ._befc =append (_aacd ._befc ,_eceg );case _ea .FooterType ,_ea .FooterTypeStrict :_dbdb :=_eg .NewFtr ();
_bbgc .AddTarget (_adgd ,_dbdb ,_cbbcb ,uint32 (len (_aacd ._bfg )));_aacd ._bfg =append (_aacd ._bfg ,_dbdb );_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,len (_aacd ._bfg ));_gadg :=_cc .NewRelationships ();_bbgc .AddTarget (_dg .RelationsPathFor (_adgd ),_gadg .X (),_cbbcb ,0);
_aacd ._fge =append (_aacd ._fge ,_gadg );case _ea .ThemeType ,_ea .ThemeTypeStrict :_bfae :=_ee .NewTheme ();_bbgc .AddTarget (_adgd ,_bfae ,_cbbcb ,uint32 (len (_aacd ._gg )));_aacd ._gg =append (_aacd ._gg ,_bfae );_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,len (_aacd ._gg ));
case _ea .WebSettingsType ,_ea .WebSettingsTypeStrict :_aacd ._dbe =_eg .NewWebSettings ();_bbgc .AddTarget (_adgd ,_aacd ._dbe ,_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .FontTableType ,_ea .FontTableTypeStrict :_aacd ._egd =_eg .NewFonts ();
_bbgc .AddTarget (_adgd ,_aacd ._egd ,_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .FontEmbeddingType :_bfcdc :=_cc .NewRelationships ();_bbgc .AddTarget (_dg .RelationsPathFor (_adgd ),_bfcdc .X (),_cbbcb ,0);
_aacd ._dff =_bfcdc ;case _ea .EndNotesType ,_ea .EndNotesTypeStrict :_aacd ._ccae =_eg .NewEndnotes ();_bbgc .AddTarget (_adgd ,_aacd ._ccae ,_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .FootNotesType ,_ea .FootNotesTypeStrict :_aacd ._dc =_eg .NewFootnotes ();
_bbgc .AddTarget (_adgd ,_aacd ._dc ,_cbbcb ,0);_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,0);case _ea .ImageType ,_ea .ImageTypeStrict :var _beed _cc .ImageRef ;for _edcd ,_dbgc :=range _cege {if _dbgc ==nil {continue ;};_fcee :=_df .TrimPrefix (_dbgc .Name ,"\u0077\u006f\u0072d\u002f");
if _eddc :=_df .TrimPrefix (_adgd ,"\u0077\u006f\u0072d\u002f");_fcee ==_eddc {_acdf ,_cccb :=_dg .ExtractToDiskTmp (_dbgc ,_aacd .TmpPath );if _cccb !=nil {return _cccb ;};_dfeb :=_b .Ext (_dbgc .Name );_edbe :=_cc .Image {};if _dfeb [1:]!="\u0065\u006d\u0066"{_begg ,_ggbe :=_cc .ImageFromStorage (_acdf );
if _ggbe !=nil {return _ggbe ;};_edbe =_begg ;}else {_edbe .Path =_acdf ;};_edbe .Format =_dfeb [1:];_beed =_cc .MakeImageRef (_edbe ,&_aacd .DocBase ,_aacd ._fbg );_cege [_edcd ]=nil ;};};if _beed .Format ()!=""{_cdbc :="\u002e"+_df .ToLower (_beed .Format ());
_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,len (_aacd .Images )+1);if _fceeg :=_b .Ext (_bfcab .TargetAttr );_fceeg !=_cdbc {_bfcab .TargetAttr =_bfcab .TargetAttr [0:len (_bfcab .TargetAttr )-len (_fceeg )]+_cdbc ;};_beed .SetTarget ("\u0077\u006f\u0072d\u002f"+_bfcab .TargetAttr );
_aacd .Images =append (_aacd .Images ,_beed );};case _ea .ControlType ,_ea .ControlTypeStrict :_agfg :=_bg .NewOcx ();_cfac :=_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,len (_aacd ._cd )+1);_gegd :="\u0077\u006f\u0072d\u002f"+_cfac [:len (_cfac )-4]+"\u002e\u0062\u0069\u006e";
for _ebgc ,_ggfbe :=range _cege {if _ggfbe ==nil {continue ;};if _ggfbe .Name ==_gegd {_bbeca ,_deaf :=_dg .ExtractToDiskTmp (_ggfbe ,_aacd .TmpPath );if _deaf !=nil {return _deaf ;};_gcafa ,_deaf :=_fe .ImportFromFile (_bbeca );if _deaf ==nil {_gcafa .TargetAttr =_cfac ;
_gcafa .Ocx =_agfg ;_aacd ._cd =append (_aacd ._cd ,_gcafa );_bbgc .AddTarget (_adgd ,_agfg ,_cbbcb ,uint32 (len (_aacd ._cd )));_bfcab .TargetAttr =_cfac ;_cege [_ebgc ]=nil ;}else {_gc .Log .Debug ("c\u0061\u006e\u006e\u006f\u0074\u0020r\u0065\u0061\u0064\u0020\u0062\u0069\u006e\u0020\u0066i\u006c\u0065\u003a \u0025s\u0020\u0025\u0073",_gegd ,_deaf .Error ());
};break ;};};case _ea .ChartType :_dcbc :=chart {_dgee :_ca .NewChartSpace ()};_aeab :=uint32 (len (_aacd ._edb ));_bbgc .AddTarget (_adgd ,_dcbc ._dgee ,_cbbcb ,_aeab );_aacd ._edb =append (_aacd ._edb ,&_dcbc );_bfcab .TargetAttr =_ea .RelativeFilename (_fegd ,_cbbe .Typ ,_cbbcb ,len (_aacd ._edb ));
_dcbc ._efb =_bfcab .TargetAttr ;default:_gc .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_cbbcb ,_adgd );
};return nil ;};

// SetBold sets the run to bold.
func (_ffae RunProperties )SetBold (b bool ){if !b {_ffae ._afgg .B =nil ;_ffae ._afgg .BCs =nil ;}else {_ffae ._afgg .B =_eg .NewCT_OnOff ();_ffae ._afgg .BCs =_eg .NewCT_OnOff ();};};func _aeag (_abgd []*_eg .EG_ContentBlockContent ,_cagd *TableInfo )[]TextItem {_afcf :=[]TextItem {};
for _ ,_edca :=range _abgd {if _bageg :=_edca .Sdt ;_bageg !=nil {if _fgbf :=_bageg .SdtContent ;_fgbf !=nil {_afcf =append (_afcf ,_fae (_fgbf .P ,_cagd ,nil )...);};};_afcf =append (_afcf ,_fae (_edca .P ,_cagd ,nil )...);for _ ,_bfdd :=range _edca .Tbl {for _acaa ,_cgef :=range _bfdd .EG_ContentRowContent {for _ ,_ebcc :=range _cgef .Tr {for _bbadb ,_fcdc :=range _ebcc .EG_ContentCellContent {for _ ,_dffa :=range _fcdc .Tc {_caed :=&TableInfo {Table :_bfdd ,Row :_ebcc ,Cell :_dffa ,RowIndex :_acaa ,ColIndex :_bbadb };
for _ ,_adgcf :=range _dffa .EG_BlockLevelElts {_afcf =append (_afcf ,_aeag (_adgcf .EG_ContentBlockContent ,_caed )...);};};};};};};};return _afcf ;};

// X returns the inner wrapped XML type.
func (_ecc AnchoredDrawing )X ()*_eg .WdAnchor {return _ecc ._fdd };

// Levels returns all of the numbering levels defined in the definition.
func (_accb NumberingDefinition )Levels ()[]NumberingLevel {_gcfbc :=[]NumberingLevel {};for _ ,_cdfc :=range _accb ._ddacb .Lvl {_gcfbc =append (_gcfbc ,NumberingLevel {_cdfc });};return _gcfbc ;};

// AddField adds a field (automatically computed text) to the document.
func (_begb Run )AddField (code string ){_begb .AddFieldWithFormatting (code ,"",true )};

// SetEmboss sets the run to embossed text.
func (_dgcfa RunProperties )SetEmboss (b bool ){if !b {_dgcfa ._afgg .Emboss =nil ;}else {_dgcfa ._afgg .Emboss =_eg .NewCT_OnOff ();};};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_ddacd TableBorders )SetBottom (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_ddacd ._caaacb .Bottom =_eg .NewCT_Border ();_afec (_ddacd ._caaacb .Bottom ,t ,c ,thickness );};

// SetLeft sets the left border to a specified type, color and thickness.
func (_gaadd ParagraphBorders )SetLeft (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_gaadd ._edef .Left =_eg .NewCT_Border ();_ggggd (_gaadd ._edef .Left ,t ,c ,thickness );};

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_fbed ParagraphProperties )AddTabStop (position _fd .Distance ,justificaton _eg .ST_TabJc ,leader _eg .ST_TabTlc ){if _fbed ._fbba .Tabs ==nil {_fbed ._fbba .Tabs =_eg .NewCT_Tabs ();};_bbef :=_eg .NewCT_TabStop ();_bbef .LeaderAttr =leader ;_bbef .ValAttr =justificaton ;
_bbef .PosAttr .Int64 =_ea .Int64 (int64 (position /_fd .Twips ));_fbed ._fbba .Tabs .Tab =append (_fbed ._fbba .Tabs .Tab ,_bbef );};

// SetColor sets a specific color or auto.
func (_fde Color )SetColor (v _ec .Color ){if v .IsAuto (){_fde ._cce .ValAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;_fde ._cce .ValAttr .ST_HexColorRGB =nil ;}else {_fde ._cce .ValAttr .ST_HexColorAuto =_eg .ST_HexColorAutoUnset ;_fde ._cce .ValAttr .ST_HexColorRGB =v .AsRGBString ();
};};func (_eabb *Document )save (_fcb _dfe .Writer ,_bagf string )error {const _efc ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";if _efdd :=_eabb ._fdg .Validate ();_efdd !=nil {_gc .Log .Warning ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_efdd );
};_dca :=_ea .DocTypeDocument ;if !_fgd .GetLicenseKey ().IsLicensed ()&&!_caf {_aa .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_aa .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return _fg .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_eabb ._cdb )==0{if len (_bagf )> 0{_eabb ._cdb =_bagf ;}else {_fgcg ,_agf :=_fgd .GenRefId ("\u0064\u0077");
if _agf !=nil {_gc .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_agf );return _agf ;};_eabb ._cdb =_fgcg ;};};if _gce :=_fgd .Track (_eabb ._cdb ,_efc );_gce !=nil {_gc .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gce );return _gce ;
};_egc :=_bec .NewWriter (_fcb );defer _egc .Close ();if _ggb :=_dg .MarshalXML (_egc ,_ea .BaseRelsFilename ,_eabb .Rels .X ());_ggb !=nil {return _ggb ;};if _gdb :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .ExtendedPropertiesType ,_eabb .AppProperties .X ());
_gdb !=nil {return _gdb ;};if _bagc :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .CorePropertiesType ,_eabb .CoreProperties .X ());_bagc !=nil {return _bagc ;};if _eabb .CustomProperties .X ()!=nil {if _cda :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .CustomPropertiesType ,_eabb .CustomProperties .X ());
_cda !=nil {return _cda ;};};if _eabb .Thumbnail !=nil {_gaa ,_dbf :=_egc .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _dbf !=nil {return _dbf ;};if _eba :=_dd .Encode (_gaa ,_eabb .Thumbnail ,nil );
_eba !=nil {return _eba ;};};if _dcd :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .SettingsType ,_eabb .Settings .X ());_dcd !=nil {return _dcd ;};_eeg :=_ea .AbsoluteFilename (_dca ,_ea .OfficeDocumentType ,0);if _cabf :=_dg .MarshalXML (_egc ,_eeg ,_eabb ._fdg );
_cabf !=nil {return _cabf ;};if _febf :=_dg .MarshalXML (_egc ,_dg .RelationsPathFor (_eeg ),_eabb ._fbg .X ());_febf !=nil {return _febf ;};if _eabb .Numbering .X ()!=nil {if _bga :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .NumberingType ,_eabb .Numbering .X ());
_bga !=nil {return _bga ;};};if _bca :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .StylesType ,_eabb .Styles .X ());_bca !=nil {return _bca ;};if _eabb ._dbe !=nil {if _bfb :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .WebSettingsType ,_eabb ._dbe );_bfb !=nil {return _bfb ;
};};if _eabb ._egd !=nil {if _aba :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .FontTableType ,_eabb ._egd );_aba !=nil {return _aba ;};};if _eabb ._ccae !=nil {if _acd :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .EndNotesType ,_eabb ._ccae );_acd !=nil {return _acd ;
};};if _eabb ._dc !=nil {if _fafg :=_dg .MarshalXMLByType (_egc ,_dca ,_ea .FootNotesType ,_eabb ._dc );_fafg !=nil {return _fafg ;};};for _gfa ,_eaba :=range _eabb ._gg {if _cae :=_dg .MarshalXMLByTypeIndex (_egc ,_dca ,_ea .ThemeType ,_gfa +1,_eaba );
_cae !=nil {return _cae ;};};for _ce ,_dgf :=range _eabb ._cd {_ega ,_abbga :=_dgf .ExportToByteArray ();if _abbga !=nil {return _abbga ;};_ade :="\u0077\u006f\u0072d\u002f"+_dgf .TargetAttr [:len (_dgf .TargetAttr )-4]+"\u002e\u0062\u0069\u006e";if _dad :=_dg .AddFileFromBytes (_egc ,_ade ,_ega );
_dad !=nil {return _dad ;};if _bcae :=_dg .MarshalXMLByTypeIndex (_egc ,_dca ,_ea .ControlType ,_ce +1,_dgf .Ocx );_bcae !=nil {return _bcae ;};};for _eabba ,_acg :=range _eabb ._bebe {_bde :=_ea .AbsoluteFilename (_dca ,_ea .HeaderType ,_eabba +1);if _bddc :=_dg .MarshalXML (_egc ,_bde ,_acg );
_bddc !=nil {return _bddc ;};if !_eabb ._befc [_eabba ].IsEmpty (){_dg .MarshalXML (_egc ,_dg .RelationsPathFor (_bde ),_eabb ._befc [_eabba ].X ());};};for _dcc ,_fdbc :=range _eabb ._bfg {_bbb :=_ea .AbsoluteFilename (_dca ,_ea .FooterType ,_dcc +1);
if _fgdb :=_dg .MarshalXMLByTypeIndex (_egc ,_dca ,_ea .FooterType ,_dcc +1,_fdbc );_fgdb !=nil {return _fgdb ;};if !_eabb ._fge [_dcc ].IsEmpty (){_dg .MarshalXML (_egc ,_dg .RelationsPathFor (_bbb ),_eabb ._fge [_dcc ].X ());};};for _fgbgb ,_acgg :=range _eabb .Images {if _ceg :=_cc .AddImageToZip (_egc ,_acgg ,_fgbgb +1,_ea .DocTypeDocument );
_ceg !=nil {return _ceg ;};};for _cgg ,_gcfe :=range _eabb ._edb {_gdbe :=_ea .AbsoluteFilename (_dca ,_ea .ChartType ,_cgg +1);_dg .MarshalXML (_egc ,_gdbe ,_gcfe ._dgee );};if _eegg :=_dg .MarshalXML (_egc ,_ea .ContentTypesFilename ,_eabb .ContentTypes .X ());
_eegg !=nil {return _eegg ;};if _cbc :=_eabb .WriteExtraFiles (_egc );_cbc !=nil {return _cbc ;};return _egc .Close ();};

// GetWrapPathStart return wrapPath start value.
func (_cgf AnchorDrawWrapOptions )GetWrapPathStart ()*_ee .CT_Point2D {return _cgf ._cca };

// Tables returns the tables defined in the document.
func (_ccacb *Document )Tables ()[]Table {_eeff :=[]Table {};if _ccacb ._fdg .Body ==nil {return nil ;};for _ ,_bagb :=range _ccacb ._fdg .Body .EG_BlockLevelElts {for _ ,_fcfg :=range _bagb .EG_ContentBlockContent {for _ ,_dcf :=range _ccacb .tables (_fcfg ){_eeff =append (_eeff ,_dcf );
};};};return _eeff ;};

// Fonts returns the style's Fonts.
func (_edfgf RunProperties )Fonts ()Fonts {if _edfgf ._afgg .RFonts ==nil {_edfgf ._afgg .RFonts =_eg .NewCT_Fonts ();};return Fonts {_edfgf ._afgg .RFonts };};

// Style return the table style.
func (_bdgcg Table )Style ()string {if _bdgcg ._cfdb .TblPr !=nil &&_bdgcg ._cfdb .TblPr .TblStyle !=nil {return _bdgcg ._cfdb .TblPr .TblStyle .ValAttr ;};return "";};

// Borders allows manipulation of the table borders.
func (_acabf TableProperties )Borders ()TableBorders {if _acabf ._dbba .TblBorders ==nil {_acabf ._dbba .TblBorders =_eg .NewCT_TblBorders ();};return TableBorders {_acabf ._dbba .TblBorders };};

// SetASCIITheme sets the font ASCII Theme.
func (_fbfe Fonts )SetASCIITheme (t _eg .ST_Theme ){_fbfe ._cbgc .AsciiThemeAttr =t };

// Properties returns the row properties.
func (_geega Row )Properties ()RowProperties {if _geega ._ffcff .TrPr ==nil {_geega ._ffcff .TrPr =_eg .NewCT_TrPr ();};return RowProperties {_geega ._ffcff .TrPr };};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_bdf ,_bedd :=Open (filename );if _bedd !=nil {return nil ,_bedd ;};_bdf ._fdg .Body =_eg .NewCT_Body ();return _bdf ,nil ;};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_febd FormField )Value ()string {if _febd ._dceed .TextInput !=nil &&_febd ._dbede .T !=nil {return _febd ._dbede .T .Content ;}else if _febd ._dceed .DdList !=nil &&_febd ._dceed .DdList .Result !=nil {_dfba :=_febd .PossibleValues ();_bcga :=int (_febd ._dceed .DdList .Result .ValAttr );
if _bcga < len (_dfba ){return _dfba [_bcga ];};}else if _febd ._dceed .CheckBox !=nil {if _febd .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_cbfe *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_bgb :=[]StructuredDocumentTag {};for _ ,_dgfe :=range _cbfe ._fdg .Body .EG_BlockLevelElts {for _ ,_bfa :=range _dgfe .EG_ContentBlockContent {if _bfa .Sdt !=nil {_bgb =append (_bgb ,StructuredDocumentTag {_cbfe ,_bfa .Sdt });
};};};return _bgb ;};

// X returns the inner wrapped XML type.
func (_feccd Numbering )X ()*_eg .Numbering {return _feccd ._bgfb };

// SetAllCaps sets the run to all caps.
func (_gcggga RunProperties )SetAllCaps (b bool ){if !b {_gcggga ._afgg .Caps =nil ;}else {_gcggga ._afgg .Caps =_eg .NewCT_OnOff ();};};func _agfb (_edg *_eg .CT_Tbl ,_dfec *_eg .CT_P ,_gbf bool )*_eg .CT_Tbl {for _ ,_gff :=range _edg .EG_ContentRowContent {for _ ,_dfg :=range _gff .Tr {for _ ,_aad :=range _dfg .EG_ContentCellContent {for _ ,_ebf :=range _aad .Tc {for _gcc ,_bceg :=range _ebf .EG_BlockLevelElts {for _ ,_bdc :=range _bceg .EG_ContentBlockContent {for _ceb ,_caaa :=range _bdc .P {if _caaa ==_dfec {_bbea :=_eg .NewEG_BlockLevelElts ();
_egce :=_eg .NewEG_ContentBlockContent ();_bbea .EG_ContentBlockContent =append (_bbea .EG_ContentBlockContent ,_egce );_cgec :=_eg .NewCT_Tbl ();_egce .Tbl =append (_egce .Tbl ,_cgec );_ebf .EG_BlockLevelElts =append (_ebf .EG_BlockLevelElts ,nil );if _gbf {copy (_ebf .EG_BlockLevelElts [_gcc +1:],_ebf .EG_BlockLevelElts [_gcc :]);
_ebf .EG_BlockLevelElts [_gcc ]=_bbea ;if _ceb !=0{_eda :=_eg .NewEG_BlockLevelElts ();_efg :=_eg .NewEG_ContentBlockContent ();_eda .EG_ContentBlockContent =append (_eda .EG_ContentBlockContent ,_efg );_efg .P =_bdc .P [:_ceb ];_ebf .EG_BlockLevelElts =append (_ebf .EG_BlockLevelElts ,nil );
copy (_ebf .EG_BlockLevelElts [_gcc +1:],_ebf .EG_BlockLevelElts [_gcc :]);_ebf .EG_BlockLevelElts [_gcc ]=_eda ;};_bdc .P =_bdc .P [_ceb :];}else {copy (_ebf .EG_BlockLevelElts [_gcc +2:],_ebf .EG_BlockLevelElts [_gcc +1:]);_ebf .EG_BlockLevelElts [_gcc +1]=_bbea ;
if _ceb !=len (_bdc .P )-1{_acc :=_eg .NewEG_BlockLevelElts ();_ddf :=_eg .NewEG_ContentBlockContent ();_acc .EG_ContentBlockContent =append (_acc .EG_ContentBlockContent ,_ddf );_ddf .P =_bdc .P [_ceb +1:];_ebf .EG_BlockLevelElts =append (_ebf .EG_BlockLevelElts ,nil );
copy (_ebf .EG_BlockLevelElts [_gcc +3:],_ebf .EG_BlockLevelElts [_gcc +2:]);_ebf .EG_BlockLevelElts [_gcc +2]=_acc ;}else {_aab :=_eg .NewEG_BlockLevelElts ();_ggbc :=_eg .NewEG_ContentBlockContent ();_aab .EG_ContentBlockContent =append (_aab .EG_ContentBlockContent ,_ggbc );
_ggbc .P =[]*_eg .CT_P {_eg .NewCT_P ()};_ebf .EG_BlockLevelElts =append (_ebf .EG_BlockLevelElts ,nil );copy (_ebf .EG_BlockLevelElts [_gcc +3:],_ebf .EG_BlockLevelElts [_gcc +2:]);_ebf .EG_BlockLevelElts [_gcc +2]=_aab ;};_bdc .P =_bdc .P [:_ceb +1];
};return _cgec ;};};for _ ,_ged :=range _bdc .Tbl {_ddc :=_agfb (_ged ,_dfec ,_gbf );if _ddc !=nil {return _ddc ;};};};};};};};};return nil ;};

// Shadow returns true if paragraph shadow is on.
func (_fdbba ParagraphProperties )Shadow ()bool {return _fdc (_fdbba ._fbba .RPr .Shadow )};

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_eg .Ftr )[]TextItem {return _aeag (footer .EG_ContentBlockContent ,nil )};func (_gfage Styles )initializeDocDefaults (){_gfage ._caeb .DocDefaults =_eg .NewCT_DocDefaults ();_gfage ._caeb .DocDefaults .RPrDefault =_eg .NewCT_RPrDefault ();
_gfage ._caeb .DocDefaults .RPrDefault .RPr =_eg .NewCT_RPr ();_dcef :=RunProperties {_gfage ._caeb .DocDefaults .RPrDefault .RPr };_dcef .SetSize (12*_fd .Point );_dcef .Fonts ().SetASCIITheme (_eg .ST_ThemeMajorAscii );_dcef .Fonts ().SetEastAsiaTheme (_eg .ST_ThemeMajorEastAsia );
_dcef .Fonts ().SetHANSITheme (_eg .ST_ThemeMajorHAnsi );_dcef .Fonts ().SetCSTheme (_eg .ST_ThemeMajorBidi );_dcef .X ().Lang =_eg .NewCT_Language ();_dcef .X ().Lang .ValAttr =_ea .String ("\u0065\u006e\u002dU\u0053");_dcef .X ().Lang .EastAsiaAttr =_ea .String ("\u0065\u006e\u002dU\u0053");
_dcef .X ().Lang .BidiAttr =_ea .String ("\u0061\u0072\u002dS\u0041");_gfage ._caeb .DocDefaults .PPrDefault =_eg .NewCT_PPrDefault ();};

// SetTop sets the top border to a specified type, color and thickness.
func (_cbab TableBorders )SetTop (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_cbab ._caaacb .Top =_eg .NewCT_Border ();_afec (_cbab ._caaacb .Top ,t ,c ,thickness );};func (_adc *Document )GetFontBytesByRelId (relID string )([]byte ,error ){if relID ==""{return nil ,nil ;
};_addb :=_adc ._dff .GetTargetByRelId (relID );_addb ="\u0077\u006f\u0072d\u002f"+_addb ;for _ ,_dgefc :=range _adc .ExtraFiles {if _dgefc .ZipPath ==_addb {_dabb ,_dgfac :=_a .ReadFile (_dgefc .DiskPath );if _dgfac !=nil {return nil ,_aa .Errorf ("e\u0072r\u006f\u0072\u0020\u0072\u0065\u0061\u0064\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",_dgefc .DiskPath ,_dgfac );
};return _dabb ,nil ;};};return nil ,_aa .Errorf ("\u0066\u006fn\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u0074\u006f\u0072\u0061\u0067\u0065: \u0025\u0073",_addb );};func _bfbea (_ffaa *_eg .CT_P ,_fbc ,_bbag map[int64 ]int64 ){for _ ,_eafa :=range _ffaa .EG_PContent {for _ ,_fbcb :=range _eafa .EG_ContentRunContent {if _fbcb .R !=nil {for _ ,_ace :=range _fbcb .R .EG_RunInnerContent {_ddfbb :=_ace .EndnoteReference ;
if _ddfbb !=nil &&_ddfbb .IdAttr > 0{if _fbce ,_gadb :=_bbag [_ddfbb .IdAttr ];_gadb {_ddfbb .IdAttr =_fbce ;};};_bfag :=_ace .FootnoteReference ;if _bfag !=nil &&_bfag .IdAttr > 0{if _ddfg ,_cbbca :=_fbc [_bfag .IdAttr ];_cbbca {_bfag .IdAttr =_ddfg ;
};};};};};};};

// SetWidth sets the cell width to a specified width.
func (_eccc CellProperties )SetWidth (d _fd .Distance ){_eccc ._eed .TcW =_eg .NewCT_TblWidth ();_eccc ._eed .TcW .TypeAttr =_eg .ST_TblWidthDxa ;_eccc ._eed .TcW .WAttr =&_eg .ST_MeasurementOrPercent {};_eccc ._eed .TcW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};
_eccc ._eed .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (d /_fd .Twips ));};func _acab (_aeabb *_eg .CT_P ,_ceec map[string ]string ){for _ ,_edce :=range _aeabb .EG_PContent {if _edce .Hyperlink !=nil &&_edce .Hyperlink .IdAttr !=nil {if _cgbg ,_fbbbg :=_ceec [*_edce .Hyperlink .IdAttr ];
_fbbbg {*_edce .Hyperlink .IdAttr =_cgbg ;};};};};

// SetToolTip sets the tooltip text for a hyperlink.
func (_bbbb HyperLink )SetToolTip (text string ){if text ==""{_bbbb ._gcae .TooltipAttr =nil ;}else {_bbbb ._gcae .TooltipAttr =_ea .String (text );};};

// Paragraphs returns the paragraphs defined in an endnote.
func (_abcd Endnote )Paragraphs ()[]Paragraph {_cecf :=[]Paragraph {};for _ ,_cgbd :=range _abcd .content (){for _ ,_adbd :=range _cgbd .P {_cecf =append (_cecf ,Paragraph {_abcd ._dfdf ,_adbd });};};return _cecf ;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_cdead RunProperties )SizeMeasure ()string {if _deadb :=_cdead ._afgg .Sz ;_deadb !=nil {_aace :=_deadb .ValAttr ;if _aace .ST_PositiveUniversalMeasure !=nil {return *_aace .ST_PositiveUniversalMeasure ;};};return "";};

// SetStartPct sets the cell start margin
func (_ebg CellMargins )SetStartPct (pct float64 ){_ebg ._gfba .Start =_eg .NewCT_TblWidth ();_fgc (_ebg ._gfba .Start ,pct );};

// NewWatermarkText generates a new WatermarkText.
func NewWatermarkText ()WatermarkText {_cccce :=_af .NewShapetype ();_bbbd :=_af .NewEG_ShapeElements ();_bbbd .Formulas =_cfgb ();_bbbd .Path =_acfd ();_bbbd .Textpath =_fbca ();_bbbd .Handles =_agbg ();_bbbd .Lock =_bdcg ();_cccce .EG_ShapeElements =[]*_af .EG_ShapeElements {_bbbd };
var (_acfc ="_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_agfff ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_eccgd =float32 (136.0);_eeeg ="\u0031\u0030\u00380\u0030";_gfdd ="m\u0040\u0037\u002c\u006c\u0040\u0038,\u006d\u0040\u0035\u002c\u0032\u0031\u0036\u0030\u0030l\u0040\u0036\u002c2\u00316\u0030\u0030\u0065";
);_cccce .IdAttr =&_acfc ;_cccce .CoordsizeAttr =&_agfff ;_cccce .SptAttr =&_eccgd ;_cccce .AdjAttr =&_eeeg ;_cccce .PathAttr =&_gfdd ;_cfdee :=_af .NewShape ();_eabcb :=_af .NewEG_ShapeElements ();_eabcb .Textpath =_fccgd ();_cfdee .EG_ShapeElements =[]*_af .EG_ShapeElements {_eabcb };
var (_gdbg ="\u0050\u006f\u0077\u0065\u0072\u0050l\u0075\u0073\u0057\u0061\u0074\u0065\u0072\u004d\u0061\u0072\u006b\u004f\u0062j\u0065\u0063\u0074\u0031\u0033\u0036\u00380\u0030\u0038\u0038\u0036";_fgfe ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";
_fdfcg ="\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_cbfb ="";_gdgd ="\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065f\u0074:\u0030\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074o\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0034\u0036\u0038\u0070\u0074;\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0032\u0033\u0034\u0070\u0074\u003b\u007a\u002d\u0069\u006ede\u0078\u003a\u002d\u0032\u0035\u0031\u0036\u0035\u0031\u0030\u0037\u0032\u003b\u006d\u0073\u006f\u002d\u0077\u0072\u0061\u0070\u002d\u0065\u0064\u0069\u0074\u0065\u0064\u003a\u0066\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0068\u0065\u0069\u0067h\u0074-p\u0065\u0072\u0063\u0065\u006et\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070o\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065l\u0061\u0074\u0069\u0076\u0065:\u006d\u0061\u0072\u0067\u0069n\u003b\u006d\u0073o\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e-\u0076\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065r\u0074\u0069\u0063\u0061\u006c\u002d\u0072e\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063e\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dh\u0065\u0069\u0067\u0068t\u002dp\u0065\u0072\u0063\u0065\u006et\u003a0";
_efca ="\u0073\u0069\u006c\u0076\u0065\u0072";);_cfdee .IdAttr =&_gdbg ;_cfdee .SpidAttr =&_fgfe ;_cfdee .TypeAttr =&_fdfcg ;_cfdee .AltAttr =&_cbfb ;_cfdee .StyleAttr =&_gdgd ;_cfdee .AllowincellAttr =_cge .ST_TrueFalseFalse ;_cfdee .FillcolorAttr =&_efca ;
_cfdee .StrokedAttr =_cge .ST_TrueFalseFalse ;_bfga :=_eg .NewCT_Picture ();_bfga .Any =[]_ea .Any {_cccce ,_cfdee };return WatermarkText {_bgge :_bfga ,_gdegag :_cfdee ,_eede :_cccce };};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_adbbg *_eg .CT_TblStylePr };

// GetEffect returns the effect of the run.
func (_bdfda RunProperties )GetEffect ()_eg .ST_TextEffect {if _bdfda ._afgg .Effect ==nil {return _eg .ST_TextEffectUnset ;};return _bdfda ._afgg .Effect .ValAttr ;};func (_cfgaa Paragraph )addEndBookmark (_adgg int64 )*_eg .CT_MarkupRange {_adcd :=_eg .NewEG_PContent ();
_cfgaa ._dgfaed .EG_PContent =append (_cfgaa ._dgfaed .EG_PContent ,_adcd );_bdgdd :=_eg .NewEG_ContentRunContent ();_deab :=_eg .NewEG_RunLevelElts ();_acagg :=_eg .NewEG_RangeMarkupElements ();_cefbf :=_eg .NewCT_MarkupRange ();_cefbf .IdAttr =_adgg ;
_acagg .BookmarkEnd =_cefbf ;_adcd .EG_ContentRunContent =append (_adcd .EG_ContentRunContent ,_bdgdd );_bdgdd .EG_RunLevelElts =append (_bdgdd .EG_RunLevelElts ,_deab );_deab .EG_RangeMarkupElements =append (_deab .EG_RangeMarkupElements ,_acagg );return _cefbf ;
};

// Type returns the type of the style.
func (_bgbaf Style )Type ()_eg .ST_StyleType {return _bgbaf ._adcgb .TypeAttr };

// SetNextStyle sets the style that the next paragraph will use.
func (_eeea Style )SetNextStyle (name string ){if name ==""{_eeea ._adcgb .Next =nil ;}else {_eeea ._adcgb .Next =_eg .NewCT_String ();_eeea ._adcgb .Next .ValAttr =name ;};};func _cdedb (_egad *Document ,_ebfbc []*_eg .EG_ContentBlockContent ,_cdfbc *TableInfo )[]Node {_beae :=[]Node {};
for _ ,_fedg :=range _ebfbc {if _fbada :=_fedg .Sdt ;_fbada !=nil {if _ccbf :=_fbada .SdtContent ;_ccbf !=nil {_beae =append (_beae ,_dbfg (_egad ,_ccbf .P ,_cdfbc ,nil )...);};};_beae =append (_beae ,_dbfg (_egad ,_fedg .P ,_cdfbc ,nil )...);for _ ,_bccge :=range _fedg .Tbl {_ebada :=Table {_egad ,_bccge };
_fddcab ,_ :=_egad .Styles .SearchStyleById (_ebada .Style ());_cdfbca :=[]Node {};for _dege ,_gegdcb :=range _bccge .EG_ContentRowContent {for _ ,_bagff :=range _gegdcb .Tr {for _gfbgb ,_ggbg :=range _bagff .EG_ContentCellContent {for _ ,_efgb :=range _ggbg .Tc {_aedea :=&TableInfo {Table :_bccge ,Row :_bagff ,Cell :_efgb ,RowIndex :_dege ,ColIndex :_gfbgb };
for _ ,_cgacc :=range _efgb .EG_BlockLevelElts {_cdfbca =append (_cdfbca ,_cdedb (_egad ,_cgacc .EG_ContentBlockContent ,_aedea )...);};};};};};_beae =append (_beae ,Node {_cdbd :_egad ,_cdee :&_ebada ,Style :_fddcab ,Children :_cdfbca });};};return _beae ;
};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_geb CellBorders )SetBottom (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_geb ._ffb .Bottom =_eg .NewCT_Border ();_afec (_geb ._ffb .Bottom ,t ,c ,thickness );};func _fcgd (_cgee *_eg .EG_ContentBlockContent )[]Bookmark {_eagad :=[]Bookmark {};
for _ ,_bcdc :=range _cgee .P {for _ ,_gdbc :=range _bcdc .EG_PContent {for _ ,_eacfa :=range _gdbc .EG_ContentRunContent {for _ ,_gada :=range _eacfa .EG_RunLevelElts {for _ ,_cef :=range _gada .EG_RangeMarkupElements {if _cef .BookmarkStart !=nil {_eagad =append (_eagad ,Bookmark {_cef .BookmarkStart });
};};};};};};for _ ,_eaef :=range _cgee .EG_RunLevelElts {for _ ,_cede :=range _eaef .EG_RangeMarkupElements {if _cede .BookmarkStart !=nil {_eagad =append (_eagad ,Bookmark {_cede .BookmarkStart });};};};for _ ,_addg :=range _cgee .Tbl {for _ ,_eagae :=range _addg .EG_ContentRowContent {for _ ,_cdfb :=range _eagae .Tr {for _ ,_cecb :=range _cdfb .EG_ContentCellContent {for _ ,_dgcf :=range _cecb .Tc {for _ ,_gga :=range _dgcf .EG_BlockLevelElts {for _ ,_fcbcc :=range _gga .EG_ContentBlockContent {for _ ,_bda :=range _fcgd (_fcbcc ){_eagad =append (_eagad ,_bda );
};};};};};};};};return _eagad ;};

// SetBottom sets the cell bottom margin
func (_fbb CellMargins )SetBottom (d _fd .Distance ){_fbb ._gfba .Bottom =_eg .NewCT_TblWidth ();_gcbg (_fbb ._gfba .Bottom ,d );};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_dbfaf RunProperties )ComplexSizeValue ()float64 {if _fdeb :=_dbfaf ._afgg .SzCs ;_fdeb !=nil {_dfdd :=_fdeb .ValAttr ;if _dfdd .ST_UnsignedDecimalNumber !=nil {return float64 (*_dfdd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetWidthPercent sets the table to a width percentage.
func (_babaa TableProperties )SetWidthPercent (pct float64 ){_babaa ._dbba .TblW =_eg .NewCT_TblWidth ();_babaa ._dbba .TblW .TypeAttr =_eg .ST_TblWidthPct ;_babaa ._dbba .TblW .WAttr =&_eg .ST_MeasurementOrPercent {};_babaa ._dbba .TblW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};
_babaa ._dbba .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (pct *50));};

// AddText adds text to a run.
func (_dgacg Run )AddText (s string ){_adad :=_eg .NewEG_RunInnerContent ();_dgacg ._fdae .EG_RunInnerContent =append (_dgacg ._fdae .EG_RunInnerContent ,_adad );_adad .T =_eg .NewCT_Text ();if _ea .NeedsSpacePreserve (s ){_gccae :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_adad .T .SpaceAttr =&_gccae ;};_adad .T .Content =s ;};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_eaaf HyperLink )AddRun ()Run {_gage :=_eg .NewEG_ContentRunContent ();_eaaf ._gcae .EG_ContentRunContent =append (_eaaf ._gcae .EG_ContentRunContent ,_gage );_aecd :=_eg .NewCT_R ();_gage .R =_aecd ;return Run {_eaaf ._fecg ,_aecd };};func _gdef (_acaee *_ee .CT_Blip ,_aeed map[string ]string ){if _acaee .EmbedAttr !=nil {if _eaeff ,_bfd :=_aeed [*_acaee .EmbedAttr ];
_bfd {*_acaee .EmbedAttr =_eaeff ;};};};

// SetWidthPercent sets the cell to a width percentage.
func (_efd CellProperties )SetWidthPercent (pct float64 ){_efd ._eed .TcW =_eg .NewCT_TblWidth ();_efd ._eed .TcW .TypeAttr =_eg .ST_TblWidthPct ;_efd ._eed .TcW .WAttr =&_eg .ST_MeasurementOrPercent {};_efd ._eed .TcW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};
_efd ._eed .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (pct *50));};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_gcgfd TableProperties )SetLayout (l _eg .ST_TblLayoutType ){if l ==_eg .ST_TblLayoutTypeUnset ||l ==_eg .ST_TblLayoutTypeAutofit {_gcgfd ._dbba .TblLayout =nil ;}else {_gcgfd ._dbba .TblLayout =_eg .NewCT_TblLayoutType ();_gcgfd ._dbba .TblLayout .TypeAttr =l ;
};};func (_bfgf *Document )syncFootnoteSettings (){_fegf :=[]int64 {};_ccccb :=_bfgf .Footnotes ();for _ ,_bbed :=range _ccccb {if _bbed .X ().TypeAttr !=_eg .ST_FtnEdnUnset &&_bbed .X ().TypeAttr !=_eg .ST_FtnEdnNormal {_fegf =append (_fegf ,_bbed .X ().IdAttr );
};};_eaca :=_bfgf .Settings .X ().CT_Settings .FootnotePr ;if _eaca ==nil {_eaca =_eg .NewCT_FtnDocProps ();};if len (_fegf )==0{_eaca .Footnote =nil ;return ;};_eaca .Footnote =[]*_eg .CT_FtnEdnSepRef {};for _ ,_eaace :=range _fegf {_gdaf :=_eg .NewCT_FtnEdnSepRef ();
_gdaf .IdAttr =_eaace ;_eaca .Footnote =append (_eaca .Footnote ,_gdaf );};};

// Footer is a footer for a document section.
type Footer struct{_fdfe *Document ;_agef *_eg .Ftr ;};

// X returns the inner wrapped XML type.
func (_faee Run )X ()*_eg .CT_R {return _faee ._fdae };

// Clear clears all content within a header
func (_bbdb Header )Clear (){_bbdb ._cceb .EG_ContentBlockContent =nil };

// Spacing returns the paragraph spacing settings.
func (_dabbd ParagraphProperties )Spacing ()ParagraphSpacing {if _dabbd ._fbba .Spacing ==nil {_dabbd ._fbba .Spacing =_eg .NewCT_Spacing ();};return ParagraphSpacing {_dabbd ._fbba .Spacing };};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_gfbcf TableStyleProperties )SetCellSpacingPercent (pct float64 ){_gfbcf ._deefc .TblCellSpacing =_eg .NewCT_TblWidth ();_gfbcf ._deefc .TblCellSpacing .TypeAttr =_eg .ST_TblWidthPct ;_gfbcf ._deefc .TblCellSpacing .WAttr =&_eg .ST_MeasurementOrPercent {};
_gfbcf ._deefc .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_gfbcf ._deefc .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (pct *50));};

// WatermarkPicture is watermark picture within document.
type WatermarkPicture struct{_ecccfd *_eg .CT_Picture ;_ddcbf *_gf .ShapeStyle ;_gcccgc *_af .Shape ;_bedc *_af .Shapetype ;};

// Clear content of node element.
func (_cgbgf *Node )Clear (){_cgbgf ._cdee =nil };

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_fgfd FormField )IsChecked ()bool {if _fgfd ._dceed .CheckBox ==nil {return false ;};if _fgfd ._dceed .CheckBox .Checked !=nil {return true ;};return false ;};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_caaacb *_eg .CT_TblBorders };

// Name returns the name of the field.
func (_bfedc FormField )Name ()string {return *_bfedc ._dceed .Name [0].ValAttr };

// SetShapeStyle sets style to the element v:shape in watermark.
func (_ccfa *WatermarkPicture )SetShapeStyle (shapeStyle _gf .ShapeStyle ){if _ccfa ._gcccgc !=nil {_abbbc :=shapeStyle .String ();_ccfa ._gcccgc .StyleAttr =&_abbbc ;};};

// NewWatermarkPicture generates new WatermarkPicture.
func NewWatermarkPicture ()WatermarkPicture {_dcffb :=_af .NewShapetype ();_bdffd :=_af .NewEG_ShapeElements ();_bdffd .Formulas =_afgba ();_bdffd .Path =_bcgaa ();_bdffd .Lock =_defd ();_dcffb .EG_ShapeElements =[]*_af .EG_ShapeElements {_bdffd };var (_ebaf ="\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";
_bedaf ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_bgbab =float32 (75.0);_cfgf ="\u006d\u0040\u0034\u00405l\u0040\u0034\u0040\u0031\u0031\u0040\u0039\u0040\u0031\u0031\u0040\u0039\u0040\u0035x\u0065";);_dcffb .IdAttr =&_ebaf ;_dcffb .CoordsizeAttr =&_bedaf ;
_dcffb .SptAttr =&_bgbab ;_dcffb .PreferrelativeAttr =_cge .ST_TrueFalseTrue ;_dcffb .PathAttr =&_cfgf ;_dcffb .FilledAttr =_cge .ST_TrueFalseFalse ;_dcffb .StrokedAttr =_cge .ST_TrueFalseFalse ;_ffad :=_af .NewShape ();_cbbbe :=_af .NewEG_ShapeElements ();
_cbbbe .Imagedata =_cdafc ();_ffad .EG_ShapeElements =[]*_af .EG_ShapeElements {_cbbbe };var (_fceg ="\u0057\u006f\u0072\u0064\u0050\u0069\u0063\u0074\u0075\u0072e\u0057\u0061\u0074\u0065\u0072\u006d\u0061r\u006b\u0031\u0036\u0033\u0032\u0033\u0031\u0036\u0035\u0039\u0035";
_babf ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_agca ="#\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_bggf ="";_bgef ="\u0070os\u0069t\u0069o\u006e\u003a\u0061\u0062\u0073\u006fl\u0075\u0074\u0065\u003bm\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0030\u003bma\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0030\u0070\u0074;\u0068e\u0069\u0067\u0068\u0074\u003a\u0030\u0070\u0074\u003b\u007a\u002d\u0069\u006ed\u0065\u0078:\u002d\u0032\u00351\u0036\u0035\u0038\u0032\u0034\u0030\u003b\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003bm\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002drela\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065\u0072t\u0069c\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e-\u0076\u0065r\u0074\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e";
);_ffad .IdAttr =&_fceg ;_ffad .SpidAttr =&_babf ;_ffad .TypeAttr =&_agca ;_ffad .AltAttr =&_bggf ;_ffad .StyleAttr =&_bgef ;_ffad .AllowincellAttr =_cge .ST_TrueFalseFalse ;_dgec :=_eg .NewCT_Picture ();_dgec .Any =[]_ea .Any {_dcffb ,_ffad };return WatermarkPicture {_ecccfd :_dgec ,_gcccgc :_ffad ,_bedc :_dcffb };
};

// X returns the inner wrapped XML type.
func (_gdega Style )X ()*_eg .CT_Style {return _gdega ._adcgb };func (_gcbgb *Document )InsertTableAfter (relativeTo Paragraph )Table {return _gcbgb .insertTable (relativeTo ,false );};

// Bold returns true if run font is bold.
func (_acfb RunProperties )Bold ()bool {_gccf :=_acfb ._afgg ;return _fdc (_gccf .B )||_fdc (_gccf .BCs )};

// SetUnderline controls underline for a run style.
func (_ageac RunProperties )SetUnderline (style _eg .ST_Underline ,c _ec .Color ){if style ==_eg .ST_UnderlineUnset {_ageac ._afgg .U =nil ;}else {_ageac ._afgg .U =_eg .NewCT_Underline ();_ageac ._afgg .U .ColorAttr =&_eg .ST_HexColor {};_ageac ._afgg .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();
_ageac ._afgg .U .ValAttr =style ;};};

// RemoveRun removes a child run from a paragraph.
func (_gacf Paragraph )RemoveRun (r Run ){for _ ,_eaffe :=range _gacf ._dgfaed .EG_PContent {for _bagcf ,_fafa :=range _eaffe .EG_ContentRunContent {if _fafa .R ==r ._fdae {copy (_eaffe .EG_ContentRunContent [_bagcf :],_eaffe .EG_ContentRunContent [_bagcf +1:]);
_eaffe .EG_ContentRunContent =_eaffe .EG_ContentRunContent [0:len (_eaffe .EG_ContentRunContent )-1];};if _fafa .Sdt !=nil &&_fafa .Sdt .SdtContent !=nil {for _cbbb ,_edabd :=range _fafa .Sdt .SdtContent .EG_ContentRunContent {if _edabd .R ==r ._fdae {copy (_fafa .Sdt .SdtContent .EG_ContentRunContent [_cbbb :],_fafa .Sdt .SdtContent .EG_ContentRunContent [_cbbb +1:]);
_fafa .Sdt .SdtContent .EG_ContentRunContent =_fafa .Sdt .SdtContent .EG_ContentRunContent [0:len (_fafa .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_eed *_eg .CT_TcPr };

// Paragraph is a paragraph within a document.
type Paragraph struct{_acbbe *Document ;_dgfaed *_eg .CT_P ;};

// SetAll sets all of the borders to a given value.
func (_ecaca ParagraphBorders )SetAll (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_ecaca .SetBottom (t ,c ,thickness );_ecaca .SetLeft (t ,c ,thickness );_ecaca .SetRight (t ,c ,thickness );_ecaca .SetTop (t ,c ,thickness );};func _bdcg ()*_af .OfcLock {_gbbcd :=_af .NewOfcLock ();
_gbbcd .ExtAttr =_af .ST_ExtEdit ;_gbbcd .TextAttr =_cge .ST_TrueFalseTrue ;_gbbcd .ShapetypeAttr =_cge .ST_TrueFalseTrue ;return _gbbcd ;};

// AddTable adds a table to the table cell.
func (_fbd Cell )AddTable ()Table {_bcg :=_eg .NewEG_BlockLevelElts ();_fbd ._cb .EG_BlockLevelElts =append (_fbd ._cb .EG_BlockLevelElts ,_bcg );_dac :=_eg .NewEG_ContentBlockContent ();_bcg .EG_ContentBlockContent =append (_bcg .EG_ContentBlockContent ,_dac );
_gcd :=_eg .NewCT_Tbl ();_dac .Tbl =append (_dac .Tbl ,_gcd );return Table {_fbd ._gbb ,_gcd };};

// SetColumnBandSize sets the number of Columns in the column band
func (_fdgfa TableStyleProperties )SetColumnBandSize (cols int64 ){_fdgfa ._deefc .TblStyleColBandSize =_eg .NewCT_DecimalNumber ();_fdgfa ._deefc .TblStyleColBandSize .ValAttr =cols ;};

// Italic returns true if paragraph font is italic.
func (_fagf ParagraphProperties )Italic ()bool {_dfbaf :=_fagf ._fbba .RPr ;return _fdc (_dfbaf .I )||_fdc (_dfbaf .ICs );};

// SetSize sets the size of the displayed image on the page.
func (_eb AnchoredDrawing )SetSize (w ,h _fd .Distance ){_eb ._fdd .Extent .CxAttr =int64 (float64 (w *_fd .Pixel72 )/_fd .EMU );_eb ._fdd .Extent .CyAttr =int64 (float64 (h *_fd .Pixel72 )/_fd .EMU );};

// SetAfterSpacing sets spacing below paragraph.
func (_agefa Paragraph )SetAfterSpacing (d _fd .Distance ){_agefa .ensurePPr ();if _agefa ._dgfaed .PPr .Spacing ==nil {_agefa ._dgfaed .PPr .Spacing =_eg .NewCT_Spacing ();};_gagf :=_agefa ._dgfaed .PPr .Spacing ;_gagf .AfterAttr =&_cge .ST_TwipsMeasure {};
_gagf .AfterAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (d /_fd .Twips ));};

// AddRun adds a run to a paragraph.
func (_dbaa Paragraph )AddRun ()Run {_bdab :=_eg .NewEG_PContent ();_dbaa ._dgfaed .EG_PContent =append (_dbaa ._dgfaed .EG_PContent ,_bdab );_fdea :=_eg .NewEG_ContentRunContent ();_bdab .EG_ContentRunContent =append (_bdab .EG_ContentRunContent ,_fdea );
_dfgde :=_eg .NewCT_R ();_fdea .R =_dfgde ;return Run {_dbaa ._acbbe ,_dfgde };};

// SetValue sets the width value.
func (_becge TableWidth )SetValue (m _fd .Distance ){_becge ._adbc .WAttr =&_eg .ST_MeasurementOrPercent {};_becge ._adbc .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_becge ._adbc .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (m /_fd .Twips ));
_becge ._adbc .TypeAttr =_eg .ST_TblWidthDxa ;};func (_fcf *Document )tables (_daa *_eg .EG_ContentBlockContent )[]Table {_bfgd :=[]Table {};for _ ,_dgd :=range _daa .Tbl {_bfgd =append (_bfgd ,Table {_fcf ,_dgd });for _ ,_eef :=range _dgd .EG_ContentRowContent {for _ ,_cad :=range _eef .Tr {for _ ,_aecc :=range _cad .EG_ContentCellContent {for _ ,_gaf :=range _aecc .Tc {for _ ,_eaea :=range _gaf .EG_BlockLevelElts {for _ ,_gge :=range _eaea .EG_ContentBlockContent {for _ ,_ccbb :=range _fcf .tables (_gge ){_bfgd =append (_bfgd ,_ccbb );
};};};};};};};};return _bfgd ;};func _dcfd (_decd Paragraph )*_eg .CT_NumPr {_decd .ensurePPr ();if _decd ._dgfaed .PPr .NumPr ==nil {return nil ;};return _decd ._dgfaed .PPr .NumPr ;};

// AddParagraph adds a new paragraph to the document body.
func (_dbeg *Document )AddParagraph ()Paragraph {_gdc :=_eg .NewEG_BlockLevelElts ();_dbeg ._fdg .Body .EG_BlockLevelElts =append (_dbeg ._fdg .Body .EG_BlockLevelElts ,_gdc );_fdbb :=_eg .NewEG_ContentBlockContent ();_gdc .EG_ContentBlockContent =append (_gdc .EG_ContentBlockContent ,_fdbb );
_adg :=_eg .NewCT_P ();_fdbb .P =append (_fdbb .P ,_adg );return Paragraph {_dbeg ,_adg };};

// SetRight sets the cell right margin
func (_bgc CellMargins )SetRight (d _fd .Distance ){_bgc ._gfba .Right =_eg .NewCT_TblWidth ();_gcbg (_bgc ._gfba .Right ,d );};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_bega FormField )SetDefaultValue (v string ){if _bega ._dceed .DdList !=nil {for _ffda ,_daca :=range _bega .PossibleValues (){if _daca ==v {_bega ._dceed .DdList .Default =_eg .NewCT_DecimalNumber ();_bega ._dceed .DdList .Default .ValAttr =int64 (_ffda );
break ;};};};};

// GetKerning returns the kerning (character spacing) of a run
func (_gaaf RunProperties )GetKerning ()_fd .Distance {if _gaaf ._afgg .Kern !=nil {return _fd .Distance (float64 (*_gaaf ._afgg .Kern .ValAttr .ST_UnsignedDecimalNumber )*_fd .HalfPoint );};return 0;};

// WatermarkText is watermark text within the document.
type WatermarkText struct{_bgge *_eg .CT_Picture ;_ffcdad *_gf .TextpathStyle ;_gdegag *_af .Shape ;_eede *_af .Shapetype ;};

// CellProperties returns the cell properties.
func (_geaeb TableConditionalFormatting )CellProperties ()CellProperties {if _geaeb ._adbbg .TcPr ==nil {_geaeb ._adbbg .TcPr =_eg .NewCT_TcPr ();};return CellProperties {_geaeb ._adbbg .TcPr };};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_bbga Footer )Index ()int {for _edgbg ,_ffbc :=range _bbga ._fdfe ._bfg {if _ffbc ==_bbga ._agef {return _edgbg ;};};return -1;};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_fgea Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_dggf :=_fgea .newIC ();_dggf .FldChar =_eg .NewCT_FldChar ();_dggf .FldChar .FldCharTypeAttr =_eg .ST_FldCharTypeBegin ;if isDirty {_dggf .FldChar .DirtyAttr =&_cge .ST_OnOff {};
_dggf .FldChar .DirtyAttr .Bool =_ea .Bool (true );};_dggf =_fgea .newIC ();_dggf .InstrText =_eg .NewCT_Text ();if fmt !=""{_dggf .InstrText .Content =code +"\u0020"+fmt ;}else {_dggf .InstrText .Content =code ;};_dggf =_fgea .newIC ();_dggf .FldChar =_eg .NewCT_FldChar ();
_dggf .FldChar .FldCharTypeAttr =_eg .ST_FldCharTypeEnd ;};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_bfaba ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_bfaba ._bgga .KeepNext =nil ;}else {_bfaba ._bgga .KeepNext =_eg .NewCT_OnOff ();};};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_adbeg FormField )SetChecked (b bool ){if _adbeg ._dceed .CheckBox ==nil {return ;};if !b {_adbeg ._dceed .CheckBox .Checked =nil ;}else {_adbeg ._dceed .CheckBox .Checked =_eg .NewCT_OnOff ();};};func (_bdaba *WatermarkText )getShape ()*_ea .XSDAny {return _bdaba .getInnerElement ("\u0073\u0068\u0061p\u0065");
};

// Style is a style within the styles.xml file.
type Style struct{_adcgb *_eg .CT_Style };

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_gacfd Paragraph )AddFootnote (text string )Footnote {var _cafcc int64 ;if _gacfd ._acbbe .HasFootnotes (){for _ ,_bbff :=range _gacfd ._acbbe .Footnotes (){if _bbff .id ()> _cafcc {_cafcc =_bbff .id ();};};_cafcc ++;}else {_gacfd ._acbbe .addFootnotes ();
_cafcc =1;};_cdgea :=_eg .NewCT_FtnEdn ();_bcged :=_eg .NewCT_FtnEdnRef ();_bcged .IdAttr =_cafcc ;_gacfd ._acbbe ._dc .CT_Footnotes .Footnote =append (_gacfd ._acbbe ._dc .CT_Footnotes .Footnote ,_cdgea );_aegba :=_gacfd .AddRun ();_fdeg :=_aegba .Properties ();
_fdeg .SetStyle (_ecgg );_aegba ._fdae .EG_RunInnerContent =[]*_eg .EG_RunInnerContent {_eg .NewEG_RunInnerContent ()};_aegba ._fdae .EG_RunInnerContent [0].FootnoteReference =_bcged ;_abga :=Footnote {_gacfd ._acbbe ,_cdgea };_abga ._fggc .IdAttr =_cafcc ;
_abga ._fggc .EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};_dage :=_abga .AddParagraph ();_dage .Properties ().SetStyle (FootnoteTextStyleId );_dage ._dgfaed .PPr .RPr =_eg .NewCT_ParaRPr ();_deebg :=_dage .AddRun ();_affd :=_deebg .Properties ();
_affd .SetStyle (_ecgg );_deebg .AddFootnoteReference ();_gcccg :=_dage .AddRun ();_gcccg .AddText ("\u0020");_gcccg =_dage .AddRun ();_gcccg .AddText (text );return _abga ;};

// SetLeftIndent controls the left indent of the paragraph.
func (_bdfc ParagraphStyleProperties )SetLeftIndent (m _fd .Distance ){if _bdfc ._bgga .Ind ==nil {_bdfc ._bgga .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_bdfc ._bgga .Ind .LeftAttr =nil ;}else {_bdfc ._bgga .Ind .LeftAttr =&_eg .ST_SignedTwipsMeasure {};
_bdfc ._bgga .Ind .LeftAttr .Int64 =_ea .Int64 (int64 (m /_fd .Twips ));};};

// AddWatermarkText adds new watermark text to the document.
func (_fac *Document )AddWatermarkText (text string )WatermarkText {var _gfag []Header ;if _ebac ,_gcaf :=_fac .BodySection ().GetHeader (_eg .ST_HdrFtrDefault );_gcaf {_gfag =append (_gfag ,_ebac );};if _cagb ,_cde :=_fac .BodySection ().GetHeader (_eg .ST_HdrFtrEven );
_cde {_gfag =append (_gfag ,_cagb );};if _aagf ,_bdff :=_fac .BodySection ().GetHeader (_eg .ST_HdrFtrFirst );_bdff {_gfag =append (_gfag ,_aagf );};if len (_gfag )< 1{_dgeg :=_fac .AddHeader ();_fac .BodySection ().SetHeader (_dgeg ,_eg .ST_HdrFtrDefault );
_gfag =append (_gfag ,_dgeg );};_edfaf :=NewWatermarkText ();for _ ,_bcec :=range _gfag {_bceab :=_bcec .Paragraphs ();if len (_bceab )< 1{_dcgbe :=_bcec .AddParagraph ();_dcgbe .AddRun ().AddText ("");};for _ ,_dagae :=range _bcec .X ().EG_ContentBlockContent {for _ ,_dacf :=range _dagae .P {for _ ,_fafb :=range _dacf .EG_PContent {for _ ,_dbbf :=range _fafb .EG_ContentRunContent {if _dbbf .R ==nil {continue ;
};for _ ,_dcb :=range _dbbf .R .EG_RunInnerContent {_dcb .Pict =_edfaf ._bgge ;break ;};};};};};};_edfaf .SetText (text );return _edfaf ;};

// SetAlignment sets the alignment of a table within the page.
func (_ffcgc TableProperties )SetAlignment (align _eg .ST_JcTable ){if align ==_eg .ST_JcTableUnset {_ffcgc ._dbba .Jc =nil ;}else {_ffcgc ._dbba .Jc =_eg .NewCT_JcTable ();_ffcgc ._dbba .Jc .ValAttr =align ;};};func (_edefa *WatermarkPicture )getShapeImagedata ()*_ea .XSDAny {return _edefa .getInnerElement ("\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");
};func (_caab *WatermarkText )getShapeType ()*_ea .XSDAny {return _caab .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");};

// IsItalic returns true if the run has been set to italics.
func (_dgbe RunProperties )IsItalic ()bool {return _dgbe .ItalicValue ()==OnOffValueOn };

// SetAfter sets the spacing that comes after the paragraph.
func (_cafcf ParagraphSpacing )SetAfter (after _fd .Distance ){_cafcf ._aggbd .AfterAttr =&_cge .ST_TwipsMeasure {};_cafcf ._aggbd .AfterAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (after /_fd .Twips ));};

// ReplaceTextByRegexp replace text inside node using regexp.
func (_faff *Nodes )ReplaceTextByRegexp (expr *_f .Regexp ,newText string ){for _ ,_dbaf :=range _faff ._gbeg {_dbaf .ReplaceTextByRegexp (expr ,newText );};};func (_faccb *Document )insertImageFromNode (_bfee Node ){for _ ,_afaea :=range _bfee .AnchoredDrawings {if _daegg ,_edfaff :=_afaea .GetImage ();
_edfaff {_bgbb ,_dcdcf :=_cc .ImageFromFile (_daegg .Path ());if _dcdcf !=nil {_gc .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_dcdcf );
};_edgag ,_dcdcf :=_faccb .AddImage (_bgbb );if _dcdcf !=nil {_gc .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_dcdcf );
};_agcb :=_faccb ._fbg .GetByRelId (_edgag .RelID ());_agcb .SetID (_daegg .RelID ());};};for _ ,_feeab :=range _bfee .InlineDrawings {if _fcba ,_dgfae :=_feeab .GetImage ();_dgfae {_aagc ,_degdb :=_cc .ImageFromFile (_fcba .Path ());if _degdb !=nil {_gc .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_degdb );
};_aff ,_degdb :=_faccb .AddImage (_aagc );if _degdb !=nil {_gc .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_degdb );
};_cdbee :=_faccb ._fbg .GetByRelId (_aff .RelID ());_cdbee .SetID (_fcba .RelID ());};};};

// Definitions returns the defined numbering definitions.
func (_dbdc Numbering )Definitions ()[]NumberingDefinition {_cefc :=[]NumberingDefinition {};if _dbdc ._bgfb !=nil {for _ ,_gagg :=range _dbdc ._bgfb .AbstractNum {_cefc =append (_cefc ,NumberingDefinition {_gagg });};};return _cefc ;};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_edfc NumberingDefinition )MultiLevelType ()_eg .ST_MultiLevelType {if _edfc ._ddacb .MultiLevelType !=nil {return _edfc ._ddacb .MultiLevelType .ValAttr ;}else {return _eg .ST_MultiLevelTypeUnset ;};};type mergeFieldInfo struct{_ebca string ;_eagca string ;
_afdfc string ;_aeefa bool ;_dfcgf bool ;_abcgb bool ;_aeaa bool ;_gddca Paragraph ;_bdbb ,_dadbc ,_bgbd int ;_gged *_eg .EG_PContent ;_agff bool ;};

// SetAll sets all of the borders to a given value.
func (_abd CellBorders )SetAll (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_abd .SetBottom (t ,c ,thickness );_abd .SetLeft (t ,c ,thickness );_abd .SetRight (t ,c ,thickness );_abd .SetTop (t ,c ,thickness );_abd .SetInsideHorizontal (t ,c ,thickness );
_abd .SetInsideVertical (t ,c ,thickness );};

// SetLeft sets the cell left margin
func (_abbg CellMargins )SetLeft (d _fd .Distance ){_abbg ._gfba .Left =_eg .NewCT_TblWidth ();_gcbg (_abbg ._gfba .Left ,d );};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_beeceg RunProperties )ComplexSizeMeasure ()string {if _bcgb :=_beeceg ._afgg .SzCs ;_bcgb !=nil {_gedbb :=_bcgb .ValAttr ;if _gedbb .ST_PositiveUniversalMeasure !=nil {return *_gedbb .ST_PositiveUniversalMeasure ;};};return "";};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_fcfa Document )SetStrict (strict bool ){if strict {_fcfa ._fdg .ConformanceAttr =_cge .ST_ConformanceClassStrict ;}else {_fcfa ._fdg .ConformanceAttr =_cge .ST_ConformanceClassTransitional ;};};

// SaveToFile writes the document out to a file.
func (_gfbd *Document )SaveToFile (path string )error {_abg ,_dfbg :=_a .Create (path );if _dfbg !=nil {return _dfbg ;};defer _abg .Close ();return _gfbd .Save (_abg );};

// SetOutline sets the run to outlined text.
func (_cggd RunProperties )SetOutline (b bool ){if !b {_cggd ._afgg .Outline =nil ;}else {_cggd ._afgg .Outline =_eg .NewCT_OnOff ();};};

// Footers returns the footers defined in the document.
func (_cbd *Document )Footers ()[]Footer {_bcge :=[]Footer {};for _ ,_bgfe :=range _cbd ._bfg {_bcge =append (_bcge ,Footer {_cbd ,_bgfe });};return _bcge ;};

// Rows returns the rows defined in the table.
func (_ggcc Table )Rows ()[]Row {_eacc :=[]Row {};for _ ,_fabcf :=range _ggcc ._cfdb .EG_ContentRowContent {for _ ,_dgeec :=range _fabcf .Tr {_eacc =append (_eacc ,Row {_ggcc ._caacb ,_dgeec });};if _fabcf .Sdt !=nil &&_fabcf .Sdt .SdtContent !=nil {for _ ,_gcaed :=range _fabcf .Sdt .SdtContent .Tr {_eacc =append (_eacc ,Row {_ggcc ._caacb ,_gcaed });
};};};return _eacc ;};

// ReplaceTextByRegexp replace the text within node using regexp expression.
func (_aegb *Node )ReplaceTextByRegexp (rgx *_f .Regexp ,newText string ){switch _ddbef :=_aegb .X ().(type ){case *Paragraph :for _ ,_bafg :=range _ddbef .Runs (){for _ ,_aaff :=range _bafg ._fdae .EG_RunInnerContent {if _aaff .T !=nil {_bbgca :=_aaff .T .Content ;
_bbgca =rgx .ReplaceAllString (_bbgca ,newText );_aaff .T .Content =_bbgca ;};};};};for _ ,_afdd :=range _aegb .Children {_afdd .ReplaceTextByRegexp (rgx ,newText );};};

// SetStyle sets the style of a paragraph.
func (_dadg ParagraphProperties )SetStyle (s string ){if s ==""{_dadg ._fbba .PStyle =nil ;}else {_dadg ._fbba .PStyle =_eg .NewCT_String ();_dadg ._fbba .PStyle .ValAttr =s ;};};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_abbfd Run )ClearContent (){_abbfd ._fdae .EG_RunInnerContent =nil };

// X returns the inner wrapped XML type.
func (_debe NumberingDefinition )X ()*_eg .CT_AbstractNum {return _debe ._ddacb };

// RightToLeft returns true if paragraph text goes from right to left.
func (_fffc ParagraphProperties )RightToLeft ()bool {return _fdc (_fffc ._fbba .RPr .Rtl )};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_eggc RunProperties )RStyle ()string {if _eggc ._afgg .RStyle !=nil {return _eggc ._afgg .RStyle .ValAttr ;};return "";};func _gcbg (_fee *_eg .CT_TblWidth ,_age _fd .Distance ){_fee .TypeAttr =_eg .ST_TblWidthDxa ;_fee .WAttr =&_eg .ST_MeasurementOrPercent {};
_fee .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_fee .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ea .Int64 (int64 (_age /_fd .Dxa ));};

// FindNodeByText return node based on matched text and return a slice of node.
func (_fgcef *Nodes )FindNodeByRegexp (r *_f .Regexp )[]Node {_gcge :=[]Node {};for _ ,_bbfc :=range _fgcef ._gbeg {if r .MatchString (_bbfc .Text ()){_gcge =append (_gcge ,_bbfc );};_dfcc :=Nodes {_gbeg :_bbfc .Children };_gcge =append (_gcge ,_dfcc .FindNodeByRegexp (r )...);
};return _gcge ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_eafg Paragraph )SetLineSpacing (d _fd .Distance ,rule _eg .ST_LineSpacingRule ){_eafg .ensurePPr ();if _eafg ._dgfaed .PPr .Spacing ==nil {_eafg ._dgfaed .PPr .Spacing =_eg .NewCT_Spacing ();};_caaca :=_eafg ._dgfaed .PPr .Spacing ;if rule ==_eg .ST_LineSpacingRuleUnset {_caaca .LineRuleAttr =_eg .ST_LineSpacingRuleUnset ;
_caaca .LineAttr =nil ;}else {_caaca .LineRuleAttr =rule ;_caaca .LineAttr =&_eg .ST_SignedTwipsMeasure {};_caaca .LineAttr .Int64 =_ea .Int64 (int64 (d /_fd .Twips ));};};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_gfba *_eg .CT_TcMar };

// Borders allows controlling individual cell borders.
func (_bed CellProperties )Borders ()CellBorders {if _bed ._eed .TcBorders ==nil {_bed ._eed .TcBorders =_eg .NewCT_TcBorders ();};return CellBorders {_bed ._eed .TcBorders };};func (_dceb Footnote )id ()int64 {return _dceb ._fggc .IdAttr };

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_fddf :=_eg .NewSettings ();_fddf .Compat =_eg .NewCT_Compat ();_cfeg :=_eg .NewCT_CompatSetting ();_cfeg .NameAttr =_ea .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");
_cfeg .UriAttr =_ea .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_cfeg .ValAttr =_ea .String ("\u0031\u0035");
_fddf .Compat .CompatSetting =append (_fddf .Compat .CompatSetting ,_cfeg );return Settings {_fddf };};

// SetTblHeader set row properties for repeat table row on every new page value.
func (_cacc RowProperties )SetTblHeader (val bool ){if !val {_cacc ._edbab .TblHeader =nil ;}else {_edefe :=_eg .NewCT_OnOff ();_cacc ._edbab .TblHeader =[]*_eg .CT_OnOff {_edefe };};};

// SetThemeColor sets the color from the theme.
func (_ffba Color )SetThemeColor (t _eg .ST_ThemeColor ){_ffba ._cce .ThemeColorAttr =t };func (_fgfb *Document )addEndnoteSeparator (){_ccfc :=_eg .NewCT_FtnEdn ();_ccfc .IdAttr =-1;_ccfc .TypeAttr =_eg .ST_FtnEdnSeparator ;_dbfa :=Footnote {_fgfb ,_ccfc };
_dbfa .X ().EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};_befb :=_dbfa .AddParagraph ();_befb .X ().PPr =nil ;_fcad :=_befb .AddRun ();_faggg :=_fcad .newIC ();_faggg .Separator =_eg .NewCT_Empty ();_fgfb ._ccae .CT_Endnotes .Endnote =append (_fgfb ._ccae .CT_Endnotes .Endnote ,_ccfc );
_ccfc =_eg .NewCT_FtnEdn ();_ccfc .IdAttr =0;_ccfc .TypeAttr =_eg .ST_FtnEdnContinuationSeparator ;_dbfa =Footnote {_fgfb ,_ccfc };_dbfa .X ().EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};_befb =_dbfa .AddParagraph ();_befb .X ().PPr =nil ;
_fcad =_befb .AddRun ();_faggg =_fcad .newIC ();_faggg .ContinuationSeparator =_eg .NewCT_Empty ();_fgfb ._ccae .CT_Endnotes .Endnote =append (_fgfb ._ccae .CT_Endnotes .Endnote ,_ccfc );};

// SetVerticalMerge controls the vertical merging of cells.
func (_fgbg CellProperties )SetVerticalMerge (mergeVal _eg .ST_Merge ){if mergeVal ==_eg .ST_MergeUnset {_fgbg ._eed .VMerge =nil ;}else {_fgbg ._eed .VMerge =_eg .NewCT_VMerge ();_fgbg ._eed .VMerge .ValAttr =mergeVal ;};};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_fada FormField )SetCalcOnExit (calcOnExit bool ){_afdg :=_eg .NewCT_OnOff ();_afdg .ValAttr =&_cge .ST_OnOff {Bool :&calcOnExit };_fada ._dceed .CalcOnExit =[]*_eg .CT_OnOff {_afdg };};

// X returns the inner wrapped XML type.
func (_fdff Fonts )X ()*_eg .CT_Fonts {return _fdff ._cbgc };

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_dede *Document )HasFootnotes ()bool {return _dede ._dc !=nil };

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_ggfe Run )AddTab (){_cgcgf :=_ggfe .newIC ();_cgcgf .Tab =_eg .NewCT_Empty ()};

// TableProperties returns the table style properties.
func (_geebb Style )TableProperties ()TableStyleProperties {if _geebb ._adcgb .TblPr ==nil {_geebb ._adcgb .TblPr =_eg .NewCT_TblPrBase ();};return TableStyleProperties {_geebb ._adcgb .TblPr };};

// GetColor returns the color.Color object representing the run color.
func (_bdcc ParagraphProperties )GetColor ()_ec .Color {if _bdbg :=_bdcc ._fbba .RPr .Color ;_bdbg !=nil {_adgcd :=_bdbg .ValAttr ;if _adgcd .ST_HexColorRGB !=nil {return _ec .FromHex (*_adgcd .ST_HexColorRGB );};};return _ec .Color {};};type listItemInfo struct{FromStyle *Style ;
FromParagraph *Paragraph ;AbstractNumId *int64 ;NumberingLevel *NumberingLevel ;};

// AddTextInput adds text input form field to the paragraph and returns it.
func (_bgeb Paragraph )AddTextInput (name string )FormField {_gbag :=_bgeb .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_gbag ._dceed .TextInput =_eg .NewCT_FFTextInput ();return _gbag ;};

// FontTable returns document fontTable element.
func (_ffbf *Document )FontTable ()*_eg .Fonts {return _ffbf ._egd };

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_egea InlineDrawing )GetImage ()(_cc .ImageRef ,bool ){_ggecg :=_egea ._dbfag .Graphic .GraphicData .Any ;if len (_ggecg )> 0{_eagc ,_cbeb :=_ggecg [0].(*_ac .Pic );if _cbeb {if _eagc .BlipFill !=nil &&_eagc .BlipFill .Blip !=nil &&_eagc .BlipFill .Blip .EmbedAttr !=nil {return _egea ._bbgf .GetImageByRelID (*_eagc .BlipFill .Blip .EmbedAttr );
};};};return _cc .ImageRef {},false ;};

// SetHeight allows controlling the height of a row within a table.
func (_ecbef RowProperties )SetHeight (ht _fd .Distance ,rule _eg .ST_HeightRule ){if rule ==_eg .ST_HeightRuleUnset {_ecbef ._edbab .TrHeight =nil ;}else {_gdgc :=_eg .NewCT_Height ();_gdgc .HRuleAttr =rule ;_gdgc .ValAttr =&_cge .ST_TwipsMeasure {};_gdgc .ValAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (ht /_fd .Twips ));
_ecbef ._edbab .TrHeight =[]*_eg .CT_Height {_gdgc };};};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";
FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";
);

// AddParagraph adds a paragraph to the header.
func (_affe Header )AddParagraph ()Paragraph {_fgceg :=_eg .NewEG_ContentBlockContent ();_affe ._cceb .EG_ContentBlockContent =append (_affe ._cceb .EG_ContentBlockContent ,_fgceg );_gcbe :=_eg .NewCT_P ();_fgceg .P =append (_fgceg .P ,_gcbe );return Paragraph {_affe ._acdg ,_gcbe };
};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_ddbba Run )DrawingAnchored ()[]AnchoredDrawing {_ccdb :=[]AnchoredDrawing {};for _ ,_cbefc :=range _ddbba ._fdae .EG_RunInnerContent {if _cbefc .Drawing ==nil {continue ;};for _ ,_beebe :=range _cbefc .Drawing .Anchor {_ccdb =append (_ccdb ,AnchoredDrawing {_ddbba ._caecc ,_beebe });
};};return _ccdb ;};

// GetStyleByID returns Style by it's IdAttr.
func (_fcgbf *Document )GetStyleByID (id string )Style {for _ ,_aggb :=range _fcgbf .Styles ._caeb .Style {if _aggb .StyleIdAttr !=nil &&*_aggb .StyleIdAttr ==id {return Style {_aggb };};};return Style {};};func _cdafc ()*_af .Imagedata {_facgf :=_af .NewImagedata ();
_gcgd :="\u0072\u0049\u0064\u0031";_egadc :="\u0057A\u0054\u0045\u0052\u004d\u0041\u0052K";_facgf .IdAttr =&_gcgd ;_facgf .TitleAttr =&_egadc ;return _facgf ;};

// SetImprint sets the run to imprinted text.
func (_eedcg RunProperties )SetImprint (b bool ){if !b {_eedcg ._afgg .Imprint =nil ;}else {_eedcg ._afgg .Imprint =_eg .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_egfg Row )X ()*_eg .CT_Row {return _egfg ._ffcff };

// RowProperties are the properties for a row within a table
type RowProperties struct{_edbab *_eg .CT_TrPr };

// SizeValue returns the value of run font size in points.
func (_bdca RunProperties )SizeValue ()float64 {if _ecae :=_bdca ._afgg .Sz ;_ecae !=nil {_fdceg :=_ecae .ValAttr ;if _fdceg .ST_UnsignedDecimalNumber !=nil {return float64 (*_fdceg .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// Text returns the underlying text in the run.
func (_bbac Run )Text ()string {if len (_bbac ._fdae .EG_RunInnerContent )==0{return "";};_fecf :=_g .Buffer {};for _ ,_cdbef :=range _bbac ._fdae .EG_RunInnerContent {if _cdbef .T !=nil {_fecf .WriteString (_cdbef .T .Content );};if _cdbef .Tab !=nil {_fecf .WriteByte ('\t');
};};return _fecf .String ();};

// Imprint returns true if run imprint is on.
func (_ecce RunProperties )Imprint ()bool {return _fdc (_ecce ._afgg .Imprint )};func (_beag Endnote )id ()int64 {return _beag ._edgd .IdAttr };

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_eeggb ParagraphSpacing )SetAfterAuto (b bool ){if b {_eeggb ._aggbd .AfterAutospacingAttr =&_cge .ST_OnOff {};_eeggb ._aggbd .AfterAutospacingAttr .Bool =_ea .Bool (true );}else {_eeggb ._aggbd .AfterAutospacingAttr =nil ;};};func (_eceaf Run )newIC ()*_eg .EG_RunInnerContent {_bbfgf :=_eg .NewEG_RunInnerContent ();
_eceaf ._fdae .EG_RunInnerContent =append (_eceaf ._fdae .EG_RunInnerContent ,_bbfgf );return _bbfgf ;};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_bbgf *Document ;_dbfag *_eg .WdInline ;};func _afgba ()*_af .Formulas {_dbag :=_af .NewFormulas ();_dbag .F =[]*_af .CT_F {_gf .CreateFormula ("\u0069\u0066 \u006c\u0069\u006e\u0065\u0044\u0072\u0061\u0077\u006e\u0020\u0070\u0069\u0078\u0065\u006c\u004c\u0069\u006e\u0065\u0057\u0069\u0064th\u0020\u0030"),_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0031\u0020\u0030"),_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0031"),_gf .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0032\u0020\u0031\u0020\u0032"),_gf .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0033\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_gf .CreateFormula ("\u0070r\u006f\u0064\u0020\u00403\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0030\u0020\u0031"),_gf .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0036\u0020\u0031\u0020\u0032"),_gf .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0037\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_gf .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0038\u0020\u0032\u00316\u0030\u0030\u0020\u0030"),_gf .CreateFormula ("\u0070r\u006f\u0064\u0020\u00407\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_gf .CreateFormula ("\u0073u\u006d \u0040\u0031\u0030\u0020\u0032\u0031\u0036\u0030\u0030\u0020\u0030")};
return _dbag ;};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_aef ParagraphProperties )SetFirstLineIndent (m _fd .Distance ){if _aef ._fbba .Ind ==nil {_aef ._fbba .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_aef ._fbba .Ind .FirstLineAttr =nil ;}else {_aef ._fbba .Ind .FirstLineAttr =&_cge .ST_TwipsMeasure {};
_aef ._fbba .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_ea .Uint64 (uint64 (m /_fd .Twips ));};};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_dgad Fonts )SetEastAsiaTheme (t _eg .ST_Theme ){_dgad ._cbgc .EastAsiaThemeAttr =t };

// SetFormat sets the numbering format.
func (_cbdde NumberingLevel )SetFormat (f _eg .ST_NumberFormat ){if _cbdde ._ccga .NumFmt ==nil {_cbdde ._ccga .NumFmt =_eg .NewCT_NumFmt ();};_cbdde ._ccga .NumFmt .ValAttr =f ;};

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_eg .CT_Drawing ;Width int64 ;Height int64 ;};

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_fcga *Document )GetImageObjByRelId (relId string )(_cc .Image ,error ){_baeg :=_fcga ._fbg .GetTargetByRelIdAndType (relId ,_ea .ImageType );if _baeg ==""{for _ ,_bfeb :=range _fcga ._befc {_baeg =_bfeb .GetTargetByRelIdAndType (relId ,_ea .ImageType );
};};if _baeg ==""{for _ ,_adbe :=range _fcga ._fge {_baeg =_adbe .GetTargetByRelIdAndType (relId ,_ea .ImageType );};};return _fcga .DocBase .GetImageBytesByTarget (_baeg );};

// SetBetween sets the between border to a specified type, color and thickness between paragraph.
func (_dbfc ParagraphBorders )SetBetween (t _eg .ST_Border ,c _ec .Color ,thickness _fd .Distance ){_dbfc ._edef .Between =_eg .NewCT_Border ();_ggggd (_dbfc ._edef .Between ,t ,c ,thickness );};func _afec (_fead *_eg .CT_Border ,_cgce _eg .ST_Border ,_ddacf _ec .Color ,_cfefd _fd .Distance ){_fead .ValAttr =_cgce ;
_fead .ColorAttr =&_eg .ST_HexColor {};if _ddacf .IsAuto (){_fead .ColorAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;}else {_fead .ColorAttr .ST_HexColorRGB =_ddacf .AsRGBString ();};if _cfefd !=_fd .Zero {_fead .SzAttr =_ea .Uint64 (uint64 (_cfefd /_fd .Point *8));
};};

// SetRightToLeft sets the run text goes from right to left.
func (_adabg RunProperties )SetRightToLeft (b bool ){if !b {_adabg ._afgg .Rtl =nil ;}else {_adabg ._afgg .Rtl =_eg .NewCT_OnOff ();};};

// SetTarget sets the URL target of the hyperlink.
func (_dfbca HyperLink )SetTarget (url string ){_bafag :=_dfbca ._fecg .AddHyperlink (url );_dfbca ._gcae .IdAttr =_ea .String (_cc .Relationship (_bafag ).ID ());_dfbca ._gcae .AnchorAttr =nil ;};

// Font returns the name of run font family.
func (_agfba RunProperties )Font ()string {if _fdbcb :=_agfba ._afgg .RFonts ;_fdbcb !=nil {if _fdbcb .AsciiAttr !=nil {return *_fdbcb .AsciiAttr ;}else if _fdbcb .HAnsiAttr !=nil {return *_fdbcb .HAnsiAttr ;}else if _fdbcb .CsAttr !=nil {return *_fdbcb .CsAttr ;
};};return "";};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_ebeb Paragraph )Style ()string {if _ebeb ._dgfaed .PPr !=nil &&_ebeb ._dgfaed .PPr .PStyle !=nil {return _ebeb ._dgfaed .PPr .PStyle .ValAttr ;};return "";};func (_cecfa *WatermarkPicture )getShapeType ()*_ea .XSDAny {return _cecfa .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_cgdde ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_cgdde ._bgga .ContextualSpacing =nil ;}else {_cgdde ._bgga .ContextualSpacing =_eg .NewCT_OnOff ();};};

// SetStyle sets the table style name.
func (_gbfa TableProperties )SetStyle (name string ){if name ==""{_gbfa ._dbba .TblStyle =nil ;}else {_gbfa ._dbba .TblStyle =_eg .NewCT_String ();_gbfa ._dbba .TblStyle .ValAttr =name ;};};

// HyperLink is a link within a document.
type HyperLink struct{_fecg *Document ;_gcae *_eg .CT_Hyperlink ;};func _defd ()*_af .OfcLock {_dgacc :=_af .NewOfcLock ();_dgacc .ExtAttr =_af .ST_ExtEdit ;_dgacc .AspectratioAttr =_cge .ST_TrueFalseTrue ;return _dgacc ;};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_baegf ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_baegf ._fbba .PageBreakBefore =nil ;}else {_baegf ._fbba .PageBreakBefore =_eg .NewCT_OnOff ();};};

// RunProperties returns the run properties controlling text formatting within the table.
func (_ddegc TableConditionalFormatting )RunProperties ()RunProperties {if _ddegc ._adbbg .RPr ==nil {_ddegc ._adbbg .RPr =_eg .NewCT_RPr ();};return RunProperties {_ddegc ._adbbg .RPr };};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_eecaf Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_eecaf .ensurePPr ();if _eecaf ._dgfaed .PPr .NumPr ==nil {_eecaf ._dgfaed .PPr .NumPr =_eg .NewCT_NumPr ();};_caeac :=_eg .NewCT_DecimalNumber ();_afbc :=int64 (-1);for _ ,_cegag :=range _eecaf ._acbbe .Numbering ._bgfb .Num {if _cegag .AbstractNumId !=nil &&_cegag .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_afbc =_cegag .NumIdAttr ;
};};if _afbc ==-1{_daad :=_eg .NewCT_Num ();_eecaf ._acbbe .Numbering ._bgfb .Num =append (_eecaf ._acbbe .Numbering ._bgfb .Num ,_daad );_daad .NumIdAttr =int64 (len (_eecaf ._acbbe .Numbering ._bgfb .Num ));_daad .AbstractNumId =_eg .NewCT_DecimalNumber ();
_daad .AbstractNumId .ValAttr =nd .AbstractNumberID ();_afbc =_daad .NumIdAttr ;};_caeac .ValAttr =_afbc ;_eecaf ._dgfaed .PPr .NumPr .NumId =_caeac ;};func (_gcdc *chart )RelId ()string {return _gcdc ._ecb };

// GetHighlight returns the HighlightColor.
func (_aeacb RunProperties )GetHighlight ()_eg .ST_HighlightColor {if _aeacb ._afgg .Highlight !=nil {return _aeacb ._afgg .Highlight .ValAttr ;};return _eg .ST_HighlightColorNone ;};

// InsertRowBefore inserts a row before another row
func (_fgcad Table )InsertRowBefore (r Row )Row {for _ddgad ,_eddgb :=range _fgcad ._cfdb .EG_ContentRowContent {if len (_eddgb .Tr )> 0&&r .X ()==_eddgb .Tr [0]{_cgbbe :=_eg .NewEG_ContentRowContent ();_fgcad ._cfdb .EG_ContentRowContent =append (_fgcad ._cfdb .EG_ContentRowContent ,nil );
copy (_fgcad ._cfdb .EG_ContentRowContent [_ddgad +1:],_fgcad ._cfdb .EG_ContentRowContent [_ddgad :]);_fgcad ._cfdb .EG_ContentRowContent [_ddgad ]=_cgbbe ;_ffed :=_eg .NewCT_Row ();_cgbbe .Tr =append (_cgbbe .Tr ,_ffed );return Row {_fgcad ._caacb ,_ffed };
};};return _fgcad .AddRow ();};func _ggggd (_cgfeb *_eg .CT_Border ,_deebf _eg .ST_Border ,_aage _ec .Color ,_dcge _fd .Distance ){_cgfeb .ValAttr =_deebf ;_cgfeb .ColorAttr =&_eg .ST_HexColor {};if _aage .IsAuto (){_cgfeb .ColorAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;
}else {_cgfeb .ColorAttr .ST_HexColorRGB =_aage .AsRGBString ();};if _dcge !=_fd .Zero {_cgfeb .SzAttr =_ea .Uint64 (uint64 (_dcge /_fd .Point *8));};};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_afb *Document )Footnote (id int64 )Footnote {for _ ,_ddbb :=range _afb .Footnotes (){if _ddbb .id ()==id {return _ddbb ;};};return Footnote {};};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_abe *Document )AddHeader ()Header {_fefa :=_eg .NewHdr ();_abe ._bebe =append (_abe ._bebe ,_fefa );_bbdd :=_aa .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_abe ._bebe ));_abe ._fbg .AddRelationship (_bbdd ,_ea .HeaderType );
_abe .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_bbdd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_abe ._befc =append (_abe ._befc ,_cc .NewRelationships ());return Header {_abe ,_fefa };};